    /** Parse and Translate a String Identifier */
    private void Ident() {
        String name;
        name = GetName();
        if (look == '('){
            //This is a function
            function(name);
        } else if (look == ':' || look == '.') { // this is a AreaReference
            GetChar();
            
            while (look == '.') { // formulas can have . or .. or ... instead of :
                GetChar();
            }
            
            String first = name;
            String second = GetName();
            tokens.add(new AreaPtg(first+":"+second));
        } else if (look == '!') {
            Match('!');
            String sheetName = name;
            String first = GetName();
            short externIdx = book.checkExternSheet(book.getSheetIndex(sheetName));
            if (look == ':') {
                Match(':');
                String second=GetName();
                if (look == '!') {
                	//The sheet name was included in both of the areas. Only really
                	//need it once
                	Match('!');
                	String third=GetName();
                	
                	if (!sheetName.equals(second))
                		throw new RuntimeException("Unhandled double sheet reference.");
                	
                	tokens.add(new Area3DPtg(first+":"+third,externIdx));
                } else {                                  
                  tokens.add(new Area3DPtg(first+":"+second,externIdx));
                }
            } else {
                tokens.add(new Ref3DPtg(first,externIdx));
            }
        } else {
            // This can be either a cell ref or a named range
        	// Try to spot which it is
        	boolean cellRef = CELL_REFERENCE_PATTERN.matcher(name).matches();
            boolean boolLit = (name.equals("TRUE") || name.equals("FALSE"));
            
            if (boolLit) {
                tokens.add(new BoolPtg(name));
            } else if (cellRef) {
                tokens.add(new ReferencePtg(name));
            } else {
            	boolean nameRecordExists = false;
                for(int i = 0; i < book.getNumNames(); i++) {
                	// Our formula will by now contain an upper-cased
                	//  version of any named range names
                    if(book.getNameRecord(i).getNameText().equalsIgnoreCase(name)) {
                        nameRecordExists = true;
                    }
                }
                if(!nameRecordExists)
                    Abort("Found reference to named range \"" + name + "\", but that named range wasn't defined!");
                tokens.add(new NamePtg(name, book));
            }
        }
    }

