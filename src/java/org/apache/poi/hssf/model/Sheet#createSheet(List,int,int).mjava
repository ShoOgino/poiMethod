    /**
     * read support  (offset used as starting point for search) for low level
     * API.  Pass in an array of Record objects, the sheet number (0 based) and
     * a record offset (should be the location of the sheets BOF record).  A Sheet
     * object is constructed and passed back with all of its initialization set
     * to the passed in records and references to those records held. This function
     * is normally called via Workbook.
     *
     * @param inRecs array containing those records in the sheet in sequence (normally obtained from RecordFactory)
     * @param sheetnum integer specifying the sheet's number (0,1 or 2 in this release)
     * @param offset of the sheet's BOF record
     *
     * @return Sheet object with all values set to those read from the file
     *
     * @see org.apache.poi.hssf.model.Workbook
     * @see org.apache.poi.hssf.record.Record
     */
    public static Sheet createSheet(List inRecs, int sheetnum, int offset)
    {
        if (log.check( POILogger.DEBUG ))
            log.logFormatted(POILogger.DEBUG,
                    "Sheet createSheet (existing file) with %",
                    new Integer(inRecs.size()));
        Sheet     retval             = new Sheet();
        ArrayList records            = new ArrayList(inRecs.size() / 5);
        // TODO - take chart streams off into separate java objects
        int       bofEofNestingLevel = 0;  // nesting level can only get to 2 (when charts are present)

        for (int k = offset; k < inRecs.size(); k++) {
            Record rec = ( Record ) inRecs.get(k);
            if ( rec.getSid() == DBCellRecord.sid ) {
                continue;
            }
            if ( rec.getSid() == IndexRecord.sid ) {
                // ignore INDEX record because it is only needed by Excel, 
                // and POI always re-calculates its contents 
                continue;
            }
            if ( rec.getSid() == StringRecord.sid ) {
                continue;
            }
            
            if ( rec.getSid() == CFHeaderRecord.sid ) {
                RecordStream rs = new RecordStream(inRecs, k);
                retval.condFormatting = new ConditionalFormattingTable(rs);
                k += rs.getCountRead()-1;
                records.add(retval.condFormatting);
                continue;
            }
            
            if (rec.getSid() == ColumnInfoRecord.sid) {
                RecordStream rs = new RecordStream(inRecs, k);
                retval._columnInfos = new ColumnInfoRecordsAggregate(rs);
                k += rs.getCountRead()-1;
                records.add(retval._columnInfos);
                continue;
            }
            if ( rec.getSid() == DVALRecord.sid) {
                RecordStream rs = new RecordStream(inRecs, k);
                retval._dataValidityTable = new DataValidityTable(rs);
                k += rs.getCountRead() - 1; // TODO - convert this method result to be zero based
                records.add(retval._dataValidityTable);
                continue;
            }
            // TODO construct RowRecordsAggregate from RecordStream
            if ((rec.getSid() == RowRecord.sid || rec.isValue()) && bofEofNestingLevel == 1 ) {
                //only add the aggregate once
                if (retval._rowsAggregate != null) {
                    throw new RuntimeException("row/cell records found in the wrong place");
                }
                int lastRowCellRec = findEndOfRowBlock(inRecs, k, retval._mergedCellsTable);
                retval._rowsAggregate = new RowRecordsAggregate(inRecs, k, lastRowCellRec);
                records.add(retval._rowsAggregate); //only add the aggregate once
                k = lastRowCellRec -1;
                continue;
            }
             
            if (PageSettingsBlock.isComponentRecord(rec.getSid())) {
                RecordStream rs = new RecordStream(inRecs, k);
                PageSettingsBlock psb = new PageSettingsBlock(rs);
                if (bofEofNestingLevel == 1) {
                    if (retval._psBlock == null) {
                        retval._psBlock = psb;
                    } else {
                        // more than one 'Page Settings Block' at nesting level 1 ?
                        // apparently this happens in about 15 test sample files
                    }
                }
                records.add(psb);
                k += rs.getCountRead()-1;
                continue;
            }
            
            if (rec.getSid() == MergeCellsRecord.sid) {
                // when the MergedCellsTable is found in the right place, we expect those records to be contiguous
                RecordStream rs = new RecordStream(inRecs, k);
                retval._mergedCellsTable.read(rs);
                k += rs.getCountRead()-1;
                continue;
            }
            if (rec.getSid() == UncalcedRecord.sid) {
                // don't add UncalcedRecord to the list
                retval._isUncalced = true; // this flag is enough
                continue;
            }

            if (rec.getSid() == BOFRecord.sid)
            {
                bofEofNestingLevel++;
                if (log.check( POILogger.DEBUG ))
                    log.log(POILogger.DEBUG, "Hit BOF record. Nesting increased to " + bofEofNestingLevel);
            }
            else if (rec.getSid() == EOFRecord.sid)
            {
                --bofEofNestingLevel;
                if (log.check( POILogger.DEBUG ))
                    log.log(POILogger.DEBUG, "Hit EOF record. Nesting decreased to " + bofEofNestingLevel);
                if (bofEofNestingLevel == 0) {
                    records.add(rec);
                    retval.eofLoc = k;
                    break;
                }
            }
            else if (rec.getSid() == DimensionsRecord.sid)
            {
                // Make a columns aggregate if one hasn't ready been created.
                if (retval._columnInfos == null)
                {
                    retval._columnInfos = new ColumnInfoRecordsAggregate();
                    records.add(retval._columnInfos);
                }

                retval._dimensions    = ( DimensionsRecord ) rec;
                retval.dimsloc = records.size();
            }
            else if (rec.getSid() == DefaultColWidthRecord.sid)
            {
                retval.defaultcolwidth = ( DefaultColWidthRecord ) rec;
            }
            else if (rec.getSid() == DefaultRowHeightRecord.sid)
            {
                retval.defaultrowheight = ( DefaultRowHeightRecord ) rec;
            }
            else if ( rec.getSid() == PrintGridlinesRecord.sid )
            {
                retval.printGridlines = (PrintGridlinesRecord) rec;
            }
            else if ( rec.getSid() == GridsetRecord.sid )
            {
                retval.gridset = (GridsetRecord) rec;
            }
            else if ( rec.getSid() == SelectionRecord.sid )
            {
                retval.selection = (SelectionRecord) rec;
            }
            else if ( rec.getSid() == WindowTwoRecord.sid )
            {
                retval.windowTwo = (WindowTwoRecord) rec;
            }
            else if ( rec.getSid() == ProtectRecord.sid )
            {
                retval.protect = (ProtectRecord) rec;
            }
            else if ( rec.getSid() == ObjectProtectRecord.sid )
            {
                retval.objprotect = (ObjectProtectRecord) rec;
            }
            else if ( rec.getSid() == ScenarioProtectRecord.sid )
            {
                retval.scenprotect = (ScenarioProtectRecord) rec;
            }
            else if ( rec.getSid() == PasswordRecord.sid )
            {
                retval.password = (PasswordRecord) rec;
            }

            records.add(rec);
        }
        if (retval._dimensions == null) {
            throw new RuntimeException("DimensionsRecord was not found");
        }
        if (retval.windowTwo == null) {
            throw new RuntimeException("WINDOW2 was not found");
        }
        // put merged cells table in the right place (regardless of where the first MergedCellsRecord was found */
        RecordOrderer.addNewSheetRecord(records, retval._mergedCellsTable);
        retval.records = records;
        retval.checkRows();
        if (log.check( POILogger.DEBUG ))
            log.log(POILogger.DEBUG, "sheet createSheet (existing file) exited");
        return retval;
    }

