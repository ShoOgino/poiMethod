    /**
     * Method write - write out this workbook to an {@link OutputStream}.  Constructs
     * a new POI POIFSFileSystem, passes in the workbook binary representation  and
     * writes it out.
     * 
     * If {@code stream} is a {@link java.io.FileOutputStream} on a networked drive
     * or has a high cost/latency associated with each written byte,
     * consider wrapping the OutputStream in a {@link java.io.BufferedOutputStream}
     * to improve write performance.
     *
     * @param stream - the java OutputStream you wish to write the XLS to
     *
     * @exception IOException if anything can't be written.
     * @see org.apache.poi.poifs.filesystem.POIFSFileSystem
     */
    @Override
	public void write(OutputStream stream)
            throws IOException
    {
        NPOIFSFileSystem fs = new NPOIFSFileSystem();
        try {
            // For tracking what we've written out, used if we're
            //  going to be preserving nodes
            List<String> excepts = new ArrayList<String>(1);
    
            // Write out the Workbook stream
            fs.createDocument(new ByteArrayInputStream(getBytes()), "Workbook");
    
            // Write out our HPFS properties, if we have them
            writeProperties(fs, excepts);
    
            if (preserveNodes) {
                // Don't write out the old Workbook, we'll be doing our new one
                // If the file had an "incorrect" name for the workbook stream,
                // don't write the old one as we'll use the correct name shortly
            	excepts.addAll(Arrays.asList(WORKBOOK_DIR_ENTRY_NAMES));
    
                // Copy over all the other nodes to our new poifs
                EntryUtils.copyNodes(
                        new FilteringDirectoryNode(this.directory, excepts)
                        , new FilteringDirectoryNode(fs.getRoot(), excepts)
                );
    
                // YK: preserve StorageClsid, it is important for embedded workbooks,
                // see Bugzilla 47920
                fs.getRoot().setStorageClsid(this.directory.getStorageClsid());
            }
            fs.writeFilesystem(stream);
        } finally {
            fs.close();
        }
    }

