    /**
     * Calculate the preffered size for this picture.
     *
     * @return HSSFClientAnchor with the preffered size for this image
     * @since POI 3.0.2
     */
    public HSSFClientAnchor getPrefferedSize(){
        HSSFClientAnchor anchor = new HSSFClientAnchor();

        EscherBSERecord bse = (EscherBSERecord)patriarch.sheet.book.getBSERecord(pictureIndex);
        byte[] data = bse.getBlipRecord().getPicturedata();
        int type = bse.getBlipTypeWin32();
        switch (type){
            //we can calculate the preffered size only for JPEG and PNG
            //other formats like WMF, EMF and PICT are not supported in Java
            case HSSFWorkbook.PICTURE_TYPE_JPEG:
            case HSSFWorkbook.PICTURE_TYPE_PNG:
                BufferedImage img = null;
                ImageReader r = null;
                try {
                    //read the image using javax.imageio.*
                    ImageInputStream iis = ImageIO.createImageInputStream( new ByteArrayInputStream(data) );
                    Iterator i = ImageIO.getImageReaders( iis );
                    r = (ImageReader) i.next();
                    r.setInput( iis );
                    img = r.read(0);

                    int[] dpi = getResolution(r);
                    int imgWidth = img.getWidth()*96/dpi[0];
                    int imgHeight = img.getHeight()*96/dpi[1];

                    //Excel measures cells in units of 1/256th of a character width.
                    //The cell width calculated based on this info is always "off".
                    //A better approach seems to be to use empirically obtained cell width and row height
                    int cellwidth = 64;
                    int rowheight = 17;

                    int col2 = imgWidth/cellwidth;
                    int row2 = imgHeight/rowheight;

                    int dx2 = (int)((float)(imgWidth % cellwidth)/cellwidth * 1024);
                    int dy2 = (int)((float)(imgHeight % rowheight)/rowheight * 256);

                    anchor.setCol2((short)col2);
                    anchor.setDx2(dx2);

                    anchor.setRow2(row2);
                    anchor.setDy2(dy2);

                } catch (IOException e){
                    //silently return if ImageIO failed to read the image
                    log.log(POILogger.WARN, e);
                    img = null;
                }

                break;
        }
        return anchor;
    }

