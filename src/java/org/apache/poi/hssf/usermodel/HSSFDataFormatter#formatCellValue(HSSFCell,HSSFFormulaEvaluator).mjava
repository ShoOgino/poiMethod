	/**
	 * <p>
	 * Returns the formatted value of a cell as a <tt>String</tt> regardless
	 * of the cell type. If the Excel format pattern cannot be parsed then the
	 * cell value will be formatted using a default format.
	 * </p>
	 * <p>When passed a null or blank cell, this method will return an empty
	 * String (""). Formula cells will be evaluated using the given
	 * {@link HSSFFormulaEvaluator} if the evaluator is non-null. If the
	 * evaluator is null, then the formula String will be returned. The caller
	 * is responsible for setting the currentRow on the evaluator
	 *</p>
	 *
	 * @param cell The cell (can be null)
	 * @param evaluator The HSSFFormulaEvaluator (can be null)
	 * @return a string value of the cell
	 */
	public String formatCellValue(HSSFCell cell,
			HSSFFormulaEvaluator evaluator) throws IllegalArgumentException {

		if (cell == null) {
			return "";
		}

		int cellType = cell.getCellType();
		if (evaluator != null && cellType == HSSFCell.CELL_TYPE_FORMULA) {
			try {
				cellType = evaluator.evaluateFormulaCell(cell);
			} catch (RuntimeException e) {
				throw new RuntimeException("Did you forget to set the current" +
						" row on the HSSFFormulaEvaluator?", e);
			}
		}
		switch (cellType)
		{
			case HSSFCell.CELL_TYPE_FORMULA :
				// should only occur if evaluator is null
				return cell.getCellFormula();

			case HSSFCell.CELL_TYPE_NUMERIC :

				if (HSSFDateUtil.isCellDateFormatted(cell)) {
					return getFormattedDateString(cell);
				}
				return getFormattedNumberString(cell);

			case HSSFCell.CELL_TYPE_STRING :
				return cell.getRichStringCellValue().getString();

			case HSSFCell.CELL_TYPE_BOOLEAN :
				return String.valueOf(cell.getBooleanCellValue());
			case HSSFCell.CELL_TYPE_BLANK :
				return "";
		}
		throw new RuntimeException("Unexpected celltype (" + cellType + ")");
	}

