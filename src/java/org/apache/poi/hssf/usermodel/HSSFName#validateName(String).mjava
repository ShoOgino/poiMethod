    private static void validateName(String name) {
        /* equivalent to:
        Pattern.compile(
                "[\\p{IsAlphabetic}_]" +
                "[\\p{IsAlphabetic}0-9_\\\\]*",
                Pattern.CASE_INSENSITIVE).matcher(name).matches();
        \p{IsAlphabetic} doesn't work on Java 6, and other regex-based character classes don't work on unicode
        thus we are stuck with Character.isLetter (for now).
        */
        
        if (name.length() == 0) {
            throw new IllegalArgumentException("Name cannot be blank");
        }
        
        // is first character valid?
        char c = name.charAt(0);
        String allowedSymbols = "_";
        boolean characterIsValid = (Character.isLetter(c) || allowedSymbols.indexOf(c) != -1);
        if (!characterIsValid) {
            throw new IllegalArgumentException("Invalid name: '"+name+"': first character must be underscore or a letter");
        }
        
        // are all other characters valid?
        allowedSymbols = "_\\"; //backslashes needed for unicode escape
        for (final char ch : name.toCharArray()) {
            characterIsValid = (Character.isLetterOrDigit(ch) || allowedSymbols.indexOf(ch) != -1);
            if (!characterIsValid) {
                throw new IllegalArgumentException("Invalid name: '"+name+"'");
            }
        }
    }

