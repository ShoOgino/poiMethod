    /**
     * Set a string value for the cell.
     *
     * @param value  value to set the cell to.  For formulas we'll set the formula
     * string, for String cells we'll set its value.  For other types we will
     * change the cell to a string cell and set its value.
     * If value is <code>null</code> then we will change the cell to a Blank cell.
     */

    public void setCellValue(RichTextString value)
    {
        HSSFRichTextString hvalue = (HSSFRichTextString) value;
        int row=record.getRow();
        short col=record.getColumn();
        short styleIndex=record.getXFIndex();
        if (hvalue == null)
        {
            notifyFormulaChanging();
            setCellType(CELL_TYPE_BLANK, false, row, col, styleIndex);
            return;
        }
        if (cellType == CELL_TYPE_FORMULA) {
            // Set the 'pre-evaluated result' for the formula
            // note - formulas do not preserve text formatting.
            FormulaRecordAggregate fr = (FormulaRecordAggregate) record;
            fr.setCachedStringResult(hvalue.getString());
            // Update our local cache to the un-formatted version
            stringValue = new HSSFRichTextString(value.getString());

            // All done
            return;
        }

        // If we get here, we're not dealing with a formula,
        //  so handle things as a normal rich text cell

        if (cellType != CELL_TYPE_STRING) {
            setCellType(CELL_TYPE_STRING, false, row, col, styleIndex);
        }
        int index = 0;

        UnicodeString str = hvalue.getUnicodeString();
        index = book.getWorkbook().addSSTString(str);
        (( LabelSSTRecord ) record).setSSTIndex(index);
        stringValue = hvalue;
        stringValue.setWorkbookReferences(book.getWorkbook(), (( LabelSSTRecord ) record));
        stringValue.setUnicodeString(book.getWorkbook().getSSTString(index));
    }

