     /**
      * A factory method allowing to create a conditional formatting rule
      * with a cell comparison operator and
      * formatting rules such as font format, border format and pattern format
      *
      * @param comparisonOperation - a constant value from
      *         <tt>{@link HSSFConditionalFormattingRule.ComparisonOperator}</tt>: <p>
      * <ul>
      *         <li>BETWEEN</li>
      *         <li>NOT_BETWEEN</li>
      *         <li>EQUAL</li>
      *         <li>NOT_EQUAL</li>
      *         <li>GT</li>
      *         <li>LT</li>
      *         <li>GE</li>
      *         <li>LE</li>
      * </ul>
      * </p>
      * @param formula1 - formula for the valued, compared with the cell
      * @param formula2 - second formula (only used with
      * {@link HSSFConditionalFormattingRule#COMPARISON_OPERATOR_BETWEEN}) and
      * {@link HSSFConditionalFormattingRule#COMPARISON_OPERATOR_NOT_BETWEEN} operations)
      * @param fontFmt - font formatting rules (may be <code>null</code>)
      * @param bordFmt - border formatting rules (may be <code>null</code>)
      * @param patternFmt - pattern formatting rules (may be <code>null</code>)
      */
     public HSSFConditionalFormattingRule createConditionalFormattingRule(
             byte comparisonOperation,
             String formula1,
             String formula2,
             HSSFFontFormatting fontFmt,
             HSSFBorderFormatting bordFmt,
             HSSFPatternFormatting patternFmt) {
    	 
        Workbook wb = workbook.getWorkbook();
        CFRuleRecord rr = CFRuleRecord.create(wb, comparisonOperation, formula1, formula2);
        return new HSSFConditionalFormattingRule(wb, rr, fontFmt, bordFmt, patternFmt);
     }

