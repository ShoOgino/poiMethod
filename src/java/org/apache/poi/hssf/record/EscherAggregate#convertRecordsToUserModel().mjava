	/**
	 * Converts the Records into UserModel
	 *  objects on the bound HSSFPatriarch
	 */
	public void convertRecordsToUserModel() {
		if(patriarch == null) {
			throw new IllegalStateException("Must call setPatriarch() first");
		}

		// The top level container ought to have
		//  the DgRecord and the container of one container
		//  per shape group (patriach overall first)
		EscherContainerRecord topContainer = getEscherContainer();
		if(topContainer == null) {
			return;
		}
		topContainer = topContainer.getChildContainers().get(0);

		List tcc = topContainer.getChildContainers();
		if(tcc.size() == 0) {
			throw new IllegalStateException("No child escher containers at the point that should hold the patriach data, and one container per top level shape!");
		}

		// First up, get the patriach position
		// This is in the first EscherSpgrRecord, in
		//  the first container, with a EscherSRecord too
		EscherContainerRecord patriachContainer =
			(EscherContainerRecord)tcc.get(0);
		EscherSpgrRecord spgr = null;
		for(Iterator<EscherRecord> it = patriachContainer.getChildIterator(); it.hasNext();) {
			EscherRecord r = it.next();
			if(r instanceof EscherSpgrRecord) {
				spgr = (EscherSpgrRecord)r;
				break;
			}
		}
		if(spgr != null) {
			patriarch.setCoordinates(
					spgr.getRectX1(), spgr.getRectY1(),
					spgr.getRectX2(), spgr.getRectY2()
			);
		}

		// Now process the containers for each group
		//  and objects
		for(int i=1; i<tcc.size(); i++) {
			EscherContainerRecord shapeContainer =
				(EscherContainerRecord)tcc.get(i);
			//System.err.println("\n\n*****\n\n");
			//System.err.println(shapeContainer);

			// Could be a group, or a base object

			if (shapeContainer.getRecordId() == EscherContainerRecord.SPGR_CONTAINER)
			{
				// Group
				if (shapeContainer.getChildRecords().size() > 0)
				{
					HSSFShapeGroup group = new HSSFShapeGroup( null,
							new HSSFClientAnchor() );
					patriarch.getChildren().add( group );

					EscherContainerRecord groupContainer = (EscherContainerRecord) shapeContainer
							.getChild( 0 );
					convertRecordsToUserModel( groupContainer, group );
				} else
				{
					log.log( POILogger.WARN,
							"Found drawing group without children." );
				}

			} else if (shapeContainer.getRecordId() == EscherContainerRecord.SP_CONTAINER)
			{
				EscherSpRecord spRecord = shapeContainer
						.getChildById( EscherSpRecord.RECORD_ID );
				int type = spRecord.getOptions() >> 4;

				switch (type)
				{
				case ST_TEXTBOX:
					HSSFTextbox box = new HSSFTextbox( null,
							new HSSFClientAnchor() );
					patriarch.addShape( box );

					convertRecordsToUserModel( shapeContainer, box );
					break;
				case ST_PICTUREFRAME:
					// Duplicated from
					// org.apache.poi.hslf.model.Picture.getPictureIndex()
					EscherOptRecord opt = (EscherOptRecord) getEscherChild(
							shapeContainer, EscherOptRecord.RECORD_ID );
					EscherSimpleProperty prop = (EscherSimpleProperty)opt.lookup(
							EscherProperties.BLIP__BLIPTODISPLAY );
					if (prop == null)
					{
						log.log( POILogger.WARN,
								"Picture index for picture shape not found." );
					} else
					{
						int pictureIndex = prop.getPropertyValue();

						EscherClientAnchorRecord anchorRecord = (EscherClientAnchorRecord) getEscherChild(
								shapeContainer,
								EscherClientAnchorRecord.RECORD_ID );
                        HSSFClientAnchor anchor = toClientAnchor(anchorRecord);

						HSSFPicture picture = new HSSFPicture( null, anchor );
						picture.setPictureIndex( pictureIndex );
						patriarch.addShape( picture );
					}
					break;
				default:
					log.log( POILogger.WARN, "Unhandled shape type: "
							+ type );
					break;
				}
			} else
			{
				log.log( POILogger.WARN, "Unexpected record id of shape group." );
			}

		}

		// Now, clear any trace of what records make up
		//  the patriarch
		// Otherwise, everything will go horribly wrong
		//  when we try to write out again....
//		clearEscherRecords();
		drawingManager.getDgg().setFileIdClusters(new EscherDggRecord.FileIdCluster[0]);

		// TODO: Support converting our records
		// back into shapes
		// log.log(POILogger.WARN, "Not processing objects into Patriarch!");
	}

