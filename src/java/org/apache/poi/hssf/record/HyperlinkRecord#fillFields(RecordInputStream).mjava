    /**
     * @param in the RecordInputstream to read the record from
     */
    protected void fillFields(RecordInputStream in)
    {
//    	System.err.println(in.currentSid);
//    	System.err.println(in.currentLength);
//    	for(int i=0; i<300; i++) {
//    		System.err.println(in.readByte());
//    	}
//    	if(1==1)
//    		throw new IllegalArgumentException("");
    	
        field_1_unknown = in.readShort();
        field_2_row = in.readUShort(); 
        field_3_column = in.readShort();
        field_4_xf_index = in.readShort();
        
        // Next up is 16 bytes we don't get
        field_5_unknown = new byte[16];
        try {
        in.read(field_5_unknown);
        } catch(IOException e) { throw new IllegalStateException(e); }
        
        // Some sort of opts
        field_6_label_opts = in.readInt();
        
        // Now for lengths, in characters
        field_7_url_len = in.readInt();
        field_8_label_len = in.readInt();
        
        // Now we have the label, as little endian unicode,
        //  with a trailing \0
        field_9_label = in.readUnicodeLEString(field_8_label_len);
        
        // Next up is some more data we can't make sense of
        field_10_unknown = new byte[16];
        try {
        in.read(field_10_unknown);
        } catch(IOException e) { throw new IllegalStateException(e); }
        
        // Might need to nudge the length by one byte
        // This is an empirical hack!
        field_11_url_opts = in.readInt();
        if(field_11_url_opts == 44) {
        	field_7_url_len--;
        }
        
        // Finally it's the URL
        field_12_url = in.readUnicodeLEString(field_7_url_len);
    }

