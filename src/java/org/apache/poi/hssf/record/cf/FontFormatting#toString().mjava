    public String toString()
    {
        StringBuffer buffer = new StringBuffer();
        buffer.append("    [Font Formatting]\n");
        
        buffer.append("    .font height = ").append(getFontHeight()).append(" twips\n");
        
        if( isFontStyleModified() )
        {
            buffer.append("    .font posture = ").append(isItalic()?"Italic":"Normal").append("\n");
        }
        else
        {
            buffer.append("    .font posture = ]not modified]").append("\n");
        }
        
        if( isFontOutlineModified() )
        {
            buffer.append("    .font outline = ").append(isOutlineOn()).append("\n");
        }
        else
        {
            buffer.append("    .font outline is not modified\n");
        }

        if( isFontShadowModified() )
        {
            buffer.append("    .font shadow = ").append(isShadowOn()).append("\n");
        }
        else
        {
            buffer.append("    .font shadow is not modified\n");
        }
        
        if( isFontCancellationModified() )
        {
            buffer.append("    .font strikeout = ").append(isStruckout()).append("\n");
        }
        else
        {
            buffer.append("    .font strikeout is not modified\n");
        }

        if( isFontStyleModified() )
        {
            buffer.append("    .font weight = ").
            	append(getFontWeight()).
            	append(
					getFontWeight() == FONT_WEIGHT_NORMAL ? "(Normal)"
							: getFontWeight() == FONT_WEIGHT_BOLD ? "(Bold)" : "0x"+Integer.toHexString(getFontWeight())).
            	append("\n");
        }
        else
        {
            buffer.append("    .font weight = ]not modified]").append("\n");
        }
        
        if( isEscapementTypeModified() )
        {
            buffer.append("    .escapement type = ").append(getEscapementType()).append("\n");
        }
        else
        {
            buffer.append("    .escapement type is not modified\n");
        }

        if( isUnderlineTypeModified() )
        {
            buffer.append("    .underline type = ").append(getUnderlineType()).append("\n");
        }
        else
        {
            buffer.append("    .underline type is not modified\n");
        }
        buffer.append("    .color index = ").append("0x"+Integer.toHexString(getFontColorIndex()).toUpperCase()).append("\n");
        

        buffer.append("    ====\n");
        buffer.append("    ["+OFFSET_FONT_HEIGHT+"] FONT HEIGHT: "+intToHex(OFFSET_FONT_HEIGHT)+"\n");
        buffer.append("    ["+OFFSET_FONT_OPTIONS+"] FONT OPTIONS: "+intToHex(OFFSET_FONT_OPTIONS)+"\n");
        buffer.append("    ["+OFFSET_FONT_WEIGHT+"] FONT WEIGHT: "+shortToHex(OFFSET_FONT_WEIGHT)+"\n");
        buffer.append("    ["+OFFSET_ESCAPEMENT_TYPE+"] FONT ESCAPEMENT: "+shortToHex(OFFSET_ESCAPEMENT_TYPE)+"\n");
        buffer.append("    ["+OFFSET_UNDERLINE_TYPE+"] FONT UNDERLINE: "+byteToHex(OFFSET_UNDERLINE_TYPE)+"\n");
        buffer.append("    ["+(OFFSET_UNDERLINE_TYPE+1)+"] FONT NOT USED: "+byteToHex(OFFSET_UNDERLINE_TYPE+1)+"\n");
        buffer.append("    ["+(OFFSET_UNDERLINE_TYPE+2)+"] FONT NOT USED: "+byteToHex(OFFSET_UNDERLINE_TYPE+2)+"\n");
        buffer.append("    ["+(OFFSET_UNDERLINE_TYPE+3)+"] FONT NOT USED: "+byteToHex(OFFSET_UNDERLINE_TYPE+3)+"\n");
        buffer.append("    ["+OFFSET_FONT_COLOR_INDEX+"] FONT COLIDX: "+intToHex(OFFSET_FONT_COLOR_INDEX)+"\n");
        buffer.append("    ["+(OFFSET_FONT_COLOR_INDEX+4)+"] FONT NOT USED: "+intToHex(OFFSET_FONT_COLOR_INDEX+4)+"\n");
        buffer.append("    ["+OFFSET_OPTION_FLAGS+"] FONT OPTIONS: "+intToHex(OFFSET_OPTION_FLAGS)+"\n");
        buffer.append("    ["+OFFSET_ESCAPEMENT_TYPE_MODIFIED+"] FONT ESC MOD: "+intToHex(OFFSET_ESCAPEMENT_TYPE_MODIFIED)+"\n");
        buffer.append("    ["+OFFSET_UNDERLINE_TYPE_MODIFIED+"] FONT UND MOD: "+intToHex(OFFSET_UNDERLINE_TYPE_MODIFIED)+"\n");
        buffer.append("    ["+OFFSET_FONT_WEIGHT+"] FONT WGH MOD: "+intToHex(OFFSET_FONT_WEIGHT)+"\n");
        buffer.append("    ["+OFFSET_NOT_USED+"] FONT NOT USED: "+intToHex(OFFSET_NOT_USED)+"\n");
        buffer.append("    ["+(OFFSET_NOT_USED+4)+"] FONT NOT USED: "+intToHex(OFFSET_NOT_USED+4)+"\n");
        buffer.append("    ["+(OFFSET_NOT_USED+8)+"] FONT NOT USED: "+intToHex(OFFSET_NOT_USED+8)+"\n");
        buffer.append("    ["+OFFSET_FONT_FORMATING_END+"] FONT FORMATTING END: "+shortToHex(OFFSET_FONT_FORMATING_END)+"\n");
        buffer.append("    ====\n");
        
        buffer.append("    [/Font Formatting]\n");
        return buffer.toString();
    }

