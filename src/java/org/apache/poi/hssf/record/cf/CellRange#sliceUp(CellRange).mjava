	/**
	 * @param range never a full row or full column range
	 * @return an array including <b>this</b> <tt>CellRange</tt> and all parts of <tt>range</tt> 
	 * outside of this range  
	 */
	private CellRange[] sliceUp(CellRange range) {
		
		List temp = new ArrayList();
		
		// Chop up range horizontally and vertically
		temp.add(range);
		if(!isFullColumnRange()) {
			temp = cutHorizontally(_firstRow, temp);
			temp = cutHorizontally(_lastRow+1, temp);
		}
		if(!isFullRowRange()) {
			temp = cutVertically(_firstColumn, temp);
			temp = cutVertically(_lastColumn+1, temp);
		}
		CellRange[] crParts = toArray(temp);

		// form result array
		temp.clear();
		temp.add(this);
		
		for (int i = 0; i < crParts.length; i++) {
			CellRange crPart = crParts[i];
			// only include parts that are not enclosed by this
			if(intersect(crPart) != ENCLOSES) {
				temp.add(crPart);
			}
		}
		return toArray(temp);
	}

