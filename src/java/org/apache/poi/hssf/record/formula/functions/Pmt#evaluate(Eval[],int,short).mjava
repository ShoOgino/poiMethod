	public Eval evaluate(Eval[] args, int srcRow, short srcCol) {
		
		if(args.length < 3 || args.length > 5) {
			return ErrorEval.VALUE_INVALID;
		}

		try {
			// evaluate first three (always present) args
			double rate = evalArg(args[0], srcRow, srcCol);
			double nper = evalArg(args[1], srcRow, srcCol);
			double pv  = evalArg(args[2], srcRow, srcCol);
			double fv = 0;
			boolean arePaymentsAtPeriodBeginning = false;

			switch (args.length) {
				case 5:
					ValueEval ve = singleOperandNumericAsBoolean(args[4], srcRow, srcCol);
					if (ve instanceof ErrorEval) { 
						return ve;
					}
					arePaymentsAtPeriodBeginning = ((BoolEval) ve).getBooleanValue();
				case 4:
					fv = evalArg(args[3], srcRow, srcCol);
			}
			double d = FinanceLib.pmt(rate, nper, pv, fv, arePaymentsAtPeriodBeginning);
			if (Double.isNaN(d)) {
				return ErrorEval.VALUE_INVALID;
			}
			if (Double.isInfinite(d)) {
				return ErrorEval.NUM_ERROR;
			}
			return new NumberEval(d);
		} catch (EvaluationException e) {
			return e.getErrorEval();
		}
	}

