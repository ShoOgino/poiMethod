    public Eval evaluate(Eval[] operands, int srcRow, short srcCol) {
        double rate = 0, fv = 0, pmt = 0, pv = 0, d = 0;
        boolean type = false;
        ValueEval retval = null;
        ValueEval ve = null;
        
        switch (operands.length) {
        default:
            retval = ErrorEval.VALUE_INVALID;
            break;
        case 5:
            ve = singleOperandNumericAsBoolean(operands[4], srcRow, srcCol);
            if (ve instanceof ErrorEval) { retval = ErrorEval.VALUE_INVALID; break; }
            type = ((BoolEval) ve).getBooleanValue();
        case 4:
            ve = singleOperandEvaluate(operands[0], srcRow, srcCol);
            if (ve instanceof NumericValueEval) rate = ((NumericValueEval) ve).getNumberValue();
            else { retval = ErrorEval.VALUE_INVALID; break; }
            
            ve = singleOperandEvaluate(operands[1], srcRow, srcCol);
            if (ve instanceof NumericValueEval) pmt  = ((NumericValueEval) ve).getNumberValue();
            else { retval = ErrorEval.VALUE_INVALID; break; }
            
            ve = singleOperandEvaluate(operands[2], srcRow, srcCol);
            if (ve instanceof NumericValueEval) pv   = ((NumericValueEval) ve).getNumberValue();
            else { retval = ErrorEval.VALUE_INVALID; break; }
            
            ve = singleOperandEvaluate(operands[3], srcRow, srcCol);
            if (ve instanceof NumericValueEval) fv = ((NumericValueEval) ve).getNumberValue();
            else { retval = ErrorEval.VALUE_INVALID; break; }
        }
        
        if (retval == null) {
            d = FinanceLib.nper(rate, pmt, pv, fv, type);
            retval = (Double.isNaN(d))
                    ? (ValueEval) ErrorEval.VALUE_INVALID
                    : (Double.isInfinite(d)) 
                        ? (ValueEval) ErrorEval.NUM_ERROR 
                        : new NumberEval(d);
        }
        return retval;
    }

