	private Eval evaluateAreaSumProduct(Eval[] evalArgs) throws EvalEx {
		int maxN = evalArgs.length;
		AreaEval[] args = new AreaEval[maxN];
		try {
			System.arraycopy(evalArgs, 0, args, 0, maxN);
		} catch (ArrayStoreException e) {
			// one of the other args was not an AreaRef
			return ErrorEval.VALUE_INVALID;
		}

		
		AreaEval firstArg = args[0];
		
		int height = firstArg.getLastRow() - firstArg.getFirstRow() + 1;
		int width = firstArg.getLastColumn() - firstArg.getFirstColumn() + 1; // TODO - junit
		
		

		double[][][] elements = new double[maxN][][];
		
		for (int n = 0; n < maxN; n++) {
			elements[n] = evaluateArea(args[n], height, width);
		}
		double acc = 0;
		
		for(int r=0; r<height; r++) {
			for(int c=0; c<width; c++) {
				double term = 1D;
				for(int n=0; n<maxN; n++) {
					term *= elements[n][r][c];
				}
				acc += term;
			}
		}
		
		return new NumberEval(acc);
	}

