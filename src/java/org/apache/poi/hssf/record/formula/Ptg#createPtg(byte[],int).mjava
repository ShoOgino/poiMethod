    /** convert infix order ptg list to rpn order ptg list
     * @return List ptgs in RPN order
     * @param infixPtgs List of ptgs in infix order
     */
    
    /* DO NOT REMOVE
     *we keep this method in case we wish to change the way we parse
     *It needs a getPrecedence in OperationsPtg
    
    public static List ptgsToRpn(List infixPtgs) {
        java.util.Stack operands = new java.util.Stack();
        java.util.List retval = new java.util.Stack();
        
        java.util.ListIterator i = infixPtgs.listIterator();
        Object p;
        OperationPtg o ;
        boolean weHaveABracket = false;
        while (i.hasNext()) {
            p=i.next();
            if (p instanceof OperationPtg) {
                if (p instanceof ParenthesisPtg) {
                    if (!weHaveABracket) {
                        operands.push(p);
                        weHaveABracket = true;
                    } else {
                        o = (OperationPtg) operands.pop();
                        while (!(o instanceof ParenthesisPtg)) { 
                            retval.add(o);
                        }
                        weHaveABracket = false;
                    }
                } else {
                    
                    while  (!operands.isEmpty() && ((OperationPtg) operands.peek()).getPrecedence() >= ((OperationPtg) p).getPrecedence() ) { //TODO handle ^ since it is right associative
                        retval.add(operands.pop());
                    }
                    operands.push(p);
                }
            } else {
                retval.add(p);
            }
        }
        while (!operands.isEmpty()) {
            if (operands.peek() instanceof ParenthesisPtg ){
                //throw some error
            } else {
                retval.add(operands.pop());
            }   
        }
        return retval;
    }
    */

    
    
    /*
    private static List ptgsToList(Class [] ptgs)
    {
        List         result = new ArrayList();
        Constructor constructor;

        for (int i = 0; i < ptgs.length; i++)
        {
            Class ptg = null;
 
            ptg = ptgs[ i ];
            try
            {
                
                constructor = ptg.getConstructor(new Class[]
                {
                    byte [].class, int.class
                });
            }
            catch (Exception illegalArgumentException)
            {
                throw new RuntimeException(
                    "Now that didn't work nicely at all (couldn't do that there list of ptgs)");
            }
            result.add(constructor);
        }
        return result;
    }*/

    
    public static Ptg createPtg(byte [] data, int offset)
    {
        byte id     = data[ offset + 0 ];
        Ptg  retval = null;
        
        final int refRef = ReferencePtg.sid - 0x20;  
        final int arrayRef = ReferencePtg.sid + 0x20;  
                                                        
        
        final int valueFunc = FunctionPtg.sid + 0x20;  
        final int arrayFunc = FunctionPtg.sid + 0x40; 
                                                        
        
        final int refArea = AreaPtg.sid-0x20;
        final int arrayArea = AreaPtg.sid+0x20;

        
        switch (id)
        {

            case AddPtg.sid :
                retval = new AddPtg(data, offset);
                break;

            case SubtractPtg.sid :
                retval = new SubtractPtg(data, offset);
                break;

            case IntPtg.sid :
                retval = new IntPtg(data, offset);
                break;

            case DividePtg.sid :
                retval = new DividePtg(data, offset);
                break;

            case MultiplyPtg.sid :
                retval = new MultiplyPtg(data, offset);
                break;

            case PowerPtg.sid :
                retval = new PowerPtg(data, offset);
                break;
                
            case ConcatPtg.sid :
                retval = new ConcatPtg(data, offset);
                break;
                

            case AreaPtg.sid :
                retval = new AreaPtg(data, offset);
                break;

            case MemErrPtg.sid :
                retval = new MemErrPtg(data, offset);
                break;

            case AttrPtg.sid :
                retval = new AttrPtg(data, offset);
                break;

            case ReferencePtg.sid :
                retval = new ReferencePtg(data, offset);
                break;
                
            case refRef :
                retval = new ReferencePtg(data, offset);
                break;

            case arrayRef :
                retval = new ReferencePtg(data, offset);
                break;                

            case ParenthesisPtg.sid :
                retval = new ParenthesisPtg(data, offset);
                break;

            case FunctionPtg.sid :
                retval = new FunctionPtg(data, offset);
                break;
                
            case valueFunc :
                retval = new FunctionPtg(data, offset);
                break;
                
            case arrayFunc :
                retval = new FunctionPtg(data, offset);
                break;
                
                
             case NumberPtg.sid :
                retval = new NumberPtg(data, offset);
             break;


                

            case NamePtg.sid :
                retval = new NamePtg(data, offset);
                break;

            case ExpPtg.sid :
                retval = new ExpPtg(data, offset);
                break;

            case Area3DPtg.sid :
                retval = new Area3DPtg(data, offset);
                break;

            case Ref3DPtg.sid:
                retval = new Ref3DPtg(data, offset);
                break;

            default :

                // retval = new UnknownPtg();
                throw new RuntimeException("Unknown PTG = "
                                           + Integer.toHexString(( int ) id)
                                           + " (" + ( int ) id + ")");
        }
        return retval;
    }

