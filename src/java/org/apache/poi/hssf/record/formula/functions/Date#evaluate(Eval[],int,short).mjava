    /**
     * @see org.apache.poi.hssf.record.formula.functions.Function#evaluate(org.apache.poi.hssf.record.formula.eval.Eval[], int, short)
     */
    public Eval evaluate(Eval[] operands, int srcCellRow, short srcCellCol) {
        if (operands.length == 3) {
            ValueEval ve[] = new ValueEval[3];
            
            ve[0] = singleOperandEvaluate(operands[0], srcCellRow, srcCellCol);
            ve[1] = singleOperandEvaluate(operands[1], srcCellRow, srcCellCol);
            ve[2] = singleOperandEvaluate(operands[2], srcCellRow, srcCellCol);
            
            if (validValues(ve)) {
                int year = getYear(ve[0]);
                int month = (int) ((NumericValueEval) ve[1]).getNumberValue() - 1;
                int day = (int) ((NumericValueEval) ve[2]).getNumberValue();
                
                if (year < 0 || month < 0 || day < 0) {
                    return ErrorEval.VALUE_INVALID;
                }
                
                if (year == 1900 && month == Calendar.FEBRUARY && day == 29) {
                    return new NumberEval(60.0);
                }
                
                if (year == 1900) {
                    if ((month == Calendar.JANUARY && day >= 60) ||
                        (month == Calendar.FEBRUARY && day >= 30))
                    {
                        day--;
                    }
                }
                
                Calendar c = new GregorianCalendar();
                
                c.set(year, month, day, 0, 0, 0);
                c.set(Calendar.MILLISECOND, 0);
                
                return new NumberEval(HSSFDateUtil.getExcelDate(c.getTime(), false)); // XXX fix 1900/1904 problem
            }
        }
        
        return ErrorEval.VALUE_INVALID;
    }

