    public void visitContainedRecords(RecordVisitor rv) {
        ValueRecordsAggregate cells = _valuesAgg;
       
        //DBCells are serialized before row records.
        final int blockCount = getRowBlockCount();
        for (int blockIndex = 0; blockIndex < blockCount; blockIndex++) {
            // Serialize a block of rows.
            // Hold onto the position of the first row in the block
            int pos=0;
            // Hold onto the size of this block that was serialized
            final int rowBlockSize = visitRowRecordsForBlock(blockIndex, rv);
            pos += rowBlockSize;
            // Serialize a block of cells for those rows
            final int startRowNumber = getStartRowNumberForBlock(blockIndex);
            final int endRowNumber = getEndRowNumberForBlock(blockIndex);
            DBCellRecord cellRecord = new DBCellRecord();
            // Note: Cell references start from the second row...
            int cellRefOffset = (rowBlockSize - RowRecord.ENCODED_SIZE);
            for (int row = startRowNumber; row <= endRowNumber; row++) {
                if (cells.rowHasCells(row)) {
                    final int rowCellSize = cells.visitCellsForRow(row, rv);
                    pos += rowCellSize;
                    // Add the offset to the first cell for the row into the
                    // DBCellRecord.
                    cellRecord.addCellOffset((short) cellRefOffset);
                    cellRefOffset = rowCellSize;
                }
            }
            // Calculate Offset from the start of a DBCellRecord to the first Row
            cellRecord.setRowOffset(pos);
            rv.visitRecord(cellRecord);
        }
        for (int i=0; i< _unknownRecords.size(); i++) {
            // Potentially breaking the file here since we don't know exactly where to write these records
            rv.visitRecord((Record) _unknownRecords.get(i));
        }
    }

