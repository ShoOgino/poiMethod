    /**
     * Processes a sequential group of cell value records.  Stops at endIx or the first
     * non-value record encountered.
     * @param sfh used to resolve any shared formulas for the current sheet
     * @return the number of records consumed
     */
    public int construct(List records, int offset, int endIx, SharedFormulaHolder sfh) {
        RecordStream rs = new RecordStream(records, offset, endIx);

        // Now do the main processing sweep
        while (rs.hasNext()) {
            Class recClass = rs.peekNextClass();
            if (recClass == StringRecord.class) {
                throw new RuntimeException("Loose StringRecord found without preceding FormulaRecord");
            }

            if (recClass == TableRecord.class) {
                throw new RuntimeException("Loose TableRecord found without preceding FormulaRecord");
            }

            if (recClass == UnknownRecord.class) {
                break;
            }
            if (recClass == RowRecord.class) {
                break;
            }
            if (recClass == DBCellRecord.class) {
                // end of 'Row Block'.  This record is ignored by POI
                break;
            }

            Record rec = rs.getNext();

            if (recClass == SharedFormulaRecord.class) {
                // Already handled, not to worry
                continue;
            }
            if (recClass == MergeCellsRecord.class) {
                // doesn't really belong here
                // can safely be ignored, because it has been processed in a higher method
                continue;
            }

            if (!rec.isValue()) {
                throw new RuntimeException("bad record type");
            }
            if (rec instanceof FormulaRecord) {
                FormulaRecord formula = (FormulaRecord)rec;
                if (formula.isSharedFormula()) {
                    sfh.convertSharedFormulaRecord(formula);
                }

                insertCell(new FormulaRecordAggregate((FormulaRecord)rec, rs));
                continue;
            }
            insertCell(( CellValueRecordInterface ) rec);
        }
        return rs.getCountRead();
    }

