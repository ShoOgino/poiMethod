	/**
	 * The {@link SharedValueRecordBase} record returned by this method
	 * @param firstCell the cell coordinates as read from the {@link ExpPtg} or {@link TblPtg}
	 * of the current formula.  Note - this is usually not the same as the cell coordinates
	 * of the formula's cell.
	 *
	 * @return the SHRFMLA, TABLE or ARRAY record for this formula cell, if it is the first cell of a
	 * table or array region. <code>null</code> if
	 */
	public SharedValueRecordBase getRecordForFirstCell(CellReference firstCell, FormulaRecordAggregate agg) {
		int row = firstCell.getRow();
		int column = firstCell.getCol();
		boolean isTopLeft = agg.getRow() == row && agg.getColumn() == column;
		if (isTopLeft) {
			for (int i = 0; i < _tableRecords.length; i++) {
				TableRecord tr = _tableRecords[i];
				if (tr.isFirstCell(row, column)) {
					return tr;
				}
			}
			for (int i = 0; i < _arrayRecords.length; i++) {
				ArrayRecord ar = _arrayRecords[i];
				if (ar.isFirstCell(row, column)) {
					return ar;
				}
			}
		} else {
			// Since arrays and tables cannot be sparse (all cells in range participate)
			// no need to search arrays and tables if agg is not the top left cell
		}
		SharedValueGroup[] groups = getGroups();
		for (int i = 0; i < groups.length; i++) {
			SharedValueGroup svg = groups[i];
			SharedValueRecordBase svr = svg.getSVR();
			if (svr.isFirstCell(row, column)) {
				if (svg.isFirstMember(agg)) {
					return svr;
				}
				return null;
			}
		}
		return null;
	}

