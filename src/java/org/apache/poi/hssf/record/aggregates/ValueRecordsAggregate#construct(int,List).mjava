    public int construct(int offset, List records)
    {
        int k = 0;

        FormulaRecordAggregate lastFormulaAggregate = null;
        
        // First up, locate all the shared formulas for this sheet
        List sharedFormulas = new java.util.ArrayList();
        for (k = offset; k < records.size(); k++)
        {
            Record rec = ( Record ) records.get(k);
            if (rec instanceof SharedFormulaRecord) {
                sharedFormulas.add(rec);
            }
            if(rec instanceof EOFRecord) {
                // End of current sheet. Ignore all subsequent shared formula records (Bugzilla 44449)
                break;
            }
        }

        // Now do the main processing sweep
        for (k = offset; k < records.size(); k++)
        {
            Record rec = ( Record ) records.get(k);

            if (rec instanceof StringRecord == false && !rec.isInValueSection() && !(rec instanceof UnknownRecord))
            {
                break;
            } else if (rec instanceof SharedFormulaRecord) {
                // Already handled, not to worry
            } else if (rec instanceof FormulaRecord)
            {
              FormulaRecord formula = (FormulaRecord)rec;
              if (formula.isSharedFormula()) {
                // Traverse the list of shared formulas in
                //  reverse order, and try to find the correct one
                //  for us
                boolean found = false;
                for (int i=sharedFormulas.size()-1;i>=0;i--) {
                    // TODO - there is no junit test case to justify this reversed loop
                    // perhaps it could just run in the normal direction?
                    SharedFormulaRecord shrd = (SharedFormulaRecord)sharedFormulas.get(i);
                    if (shrd.isFormulaInShared(formula)) {
                        shrd.convertSharedFormulaRecord(formula);
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    handleMissingSharedFormulaRecord(formula);
                }
              }
                
              lastFormulaAggregate = new FormulaRecordAggregate((FormulaRecord)rec, null);
              insertCell( lastFormulaAggregate );
            }
            else if (rec instanceof StringRecord)
            {
                lastFormulaAggregate.setStringRecord((StringRecord)rec);
            }
            else if (rec.isValue())
            {
                insertCell(( CellValueRecordInterface ) rec);
            }
        }
        return k;
    }

