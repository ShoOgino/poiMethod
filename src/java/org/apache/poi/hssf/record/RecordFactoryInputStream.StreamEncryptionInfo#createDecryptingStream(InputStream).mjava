		public RecordInputStream createDecryptingStream(InputStream original) {
			FilePassRecord fpr = _filePassRec;
			String userPassword = Biff8EncryptionKey.getCurrentUserPassword();
			if (userPassword == null) {
			    userPassword = Decryptor.DEFAULT_PASSWORD;
			}

			Biff8EncryptionKey key;
			if (fpr.getRc4KeyData() != null) {
			    Rc4KeyData rc4 = fpr.getRc4KeyData();
			    Biff8RC4Key rc4key = Biff8RC4Key.create(userPassword, rc4.getSalt());
			    key = rc4key;
			    if (!rc4key.validate(rc4.getEncryptedVerifier(), rc4.getEncryptedVerifierHash())) {
	                throw new EncryptedDocumentException(
                        (Decryptor.DEFAULT_PASSWORD.equals(userPassword) ? "Default" : "Supplied")
                        + " password is invalid for salt/verifier/verifierHash");
			    }
			} else if (fpr.getXorKeyData() != null) {
			    XorKeyData xor = fpr.getXorKeyData();
			    Biff8XORKey xorKey = Biff8XORKey.create(userPassword, xor.getKey());
			    key = xorKey;
			    
			    if (!xorKey.validate(userPassword, xor.getVerifier())) {
                    throw new EncryptedDocumentException(
		                (Decryptor.DEFAULT_PASSWORD.equals(userPassword) ? "Default" : "Supplied")
		                + " password is invalid for key/verifier");
			    }
			} else {
			    throw new EncryptedDocumentException("Crypto API not yet supported.");
			}

			return new RecordInputStream(original, key, _initialRecordsSize);
		}

