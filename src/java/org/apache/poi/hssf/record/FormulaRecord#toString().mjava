    public String toString() {

        StringBuffer sb = new StringBuffer();
        sb.append("[FORMULA]\n");
        sb.append("    .row       = ").append(HexDump.shortToHex(getRow())).append("\n");
        sb.append("    .column    = ").append(HexDump.shortToHex(getColumn())).append("\n");
        sb.append("    .xf        = ").append(HexDump.shortToHex(getXFIndex())).append("\n");
        sb.append("    .value     = ");
        if (Double.isNaN(this.getValue()) && value_data != null) {
            sb.append("(NaN)").append(HexDump.dump(value_data,0,0)).append("\n");
        } else {
            sb.append(getValue()).append("\n");
        }
        sb.append("    .options   = ").append(HexDump.shortToHex(getOptions())).append("\n");
        sb.append("    .alwaysCalc= ").append(alwaysCalc.isSet(getOptions())).append("\n");
        sb.append("    .calcOnLoad= ").append(calcOnLoad.isSet(getOptions())).append("\n");
        sb.append("    .shared    = ").append(sharedFormula.isSet(getOptions())).append("\n");
        sb.append("    .zero      = ").append(HexDump.intToHex(field_6_zero)).append("\n");

        for (int k = 0; k < field_8_parsed_expr.length; k++ ) {
            sb.append("     Ptg[").append(k).append("]=");
            sb.append(field_8_parsed_expr[k].toString()).append("\n");
        }
        sb.append("[/FORMULA]\n");
        return sb.toString();
    }

