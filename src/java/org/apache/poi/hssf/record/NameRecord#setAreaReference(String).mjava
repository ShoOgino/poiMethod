    /** sets the reference , the area only (range)
     * @param ref area reference
     */
    public void setAreaReference(String ref){
        //Trying to find if what ptg do we need
        RangeAddress ra = new RangeAddress(ref);
        Ptg oldPtg;
        Ptg ptg;

        if (field_13_name_definition==null ||field_13_name_definition.isEmpty()){
            field_13_name_definition = new Stack();
            oldPtg = createNewPtg();
        } else {
            //Trying to find extern sheet index
            oldPtg = (Ptg) field_13_name_definition.pop();
        }

        short externSheetIndex = 0;

        if (oldPtg.getClass() == Area3DPtg.class){
            externSheetIndex =  ((Area3DPtg) oldPtg).getExternSheetIndex();

        } else if (oldPtg.getClass() == Ref3DPtg.class){
            externSheetIndex =  ((Ref3DPtg) oldPtg).getExternSheetIndex();
        }

        if (ra.hasRange()) {
        	// Is it contiguous or not?
        	AreaReference[] refs = 
        		AreaReference.generateContiguous(ref);
            this.setDefinitionTextLength((short)0);

            // Add the area reference(s) 
        	for(int i=0; i<refs.length; i++) {
	            ptg = new Area3DPtg();
	            ((Area3DPtg) ptg).setExternSheetIndex(externSheetIndex);
	            ((Area3DPtg) ptg).setArea(refs[i].formatAsString());
	            field_13_name_definition.push(ptg);
	            this.setDefinitionTextLength( (short)(getDefinitionLength() + ptg.getSize()) );
        	}
        	// And then a union if we had more than one area
        	if(refs.length > 1) {
        		ptg = new UnionPtg();
                field_13_name_definition.push(ptg);
	            this.setDefinitionTextLength( (short)(getDefinitionLength() + ptg.getSize()) );
        	}
        } else {
            ptg = new Ref3DPtg();
            ((Ref3DPtg) ptg).setExternSheetIndex(externSheetIndex);
            ((Ref3DPtg) ptg).setArea(ref);
            field_13_name_definition.push(ptg);
            this.setDefinitionTextLength((short)ptg.getSize());
        }
    }

