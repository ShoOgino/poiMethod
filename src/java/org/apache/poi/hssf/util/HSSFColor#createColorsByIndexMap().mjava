    private static Hashtable<Integer,HSSFColor> createColorsByIndexMap() {
        HSSFColor[] colors = getAllColors();
        Hashtable<Integer,HSSFColor> result = new Hashtable<Integer,HSSFColor>(colors.length * 3 / 2);

        for (int i = 0; i < colors.length; i++) {
            HSSFColor color = colors[i];

            Integer index1 = Integer.valueOf(color.getIndex());
            if (result.containsKey(index1)) {
                HSSFColor prevColor = result.get(index1);
                throw new RuntimeException("Dup color index (" + index1
                        + ") for colors (" + prevColor.getClass().getName()
                        + "),(" + color.getClass().getName() + ")");
            }
            result.put(index1, color);
        }

        for (int i = 0; i < colors.length; i++) {
            HSSFColor color = colors[i];
            Integer index2 = getIndex2(color);
            if (index2 == null) {
                // most colors don't have a second index
                continue;
            }
//            if (result.containsKey(index2)) {
//                if (false) { // Many of the second indexes clash
//                    HSSFColor prevColor = (HSSFColor)result.get(index2);
//                    throw new RuntimeException("Dup color index (" + index2
//                            + ") for colors (" + prevColor.getClass().getName()
//                            + "),(" + color.getClass().getName() + ")");
//                }
//            }
            result.put(index2, color);
        }
        return result;
    }

