    /**
     * Get a logger, based on a String
     *
     * @param cat the String that defines the log
     *
     * @return a POILogger for the specified class
     */

    public static POILogger getLogger(final String cat)
    {
        POILogger logger = null;
        
        // If we haven't found out what logger to use yet,
        //  then do so now
        // Don't look it up until we're first asked, so
        //  that our users can set the system property
        //  between class loading and first use
        if(_loggerClassName == null) {
        	try {
        		_loggerClassName = System.getProperty("org.apache.poi.util.POILogger");
        	} catch(Exception e) {}
        	
        	// Use the default logger if none specified,
        	//  or none could be fetched
        	if(_loggerClassName == null) {
        		_loggerClassName = _nullLogger.getClass().getName();
        	}
        }
        
        // Short circuit for the null logger, which
        //  ignores all categories
        if(_loggerClassName.equals(_nullLogger.getClass().getName())) {
        	return _nullLogger;
        }

        
        // Fetch the right logger for them, creating
        //  it if that's required 
        if (_loggers.containsKey(cat)) {
            logger = _loggers.get(cat);
        } else {
            try {
              Class<? extends POILogger> loggerClass = 
                 (Class<? extends POILogger>)Class.forName(_loggerClassName);
              logger = loggerClass.newInstance();
              logger.initialize(cat);
            } catch(Exception e) {
              // Give up and use the null logger
              logger = _nullLogger;
            }
            
            // Save for next time
            _loggers.put(cat, logger);
        }
        return logger;
    }

