    /** 
     * For a given named property entry, either return it or null if
     *  if it wasn't found
     *  
     *  @param setName The property to read
     *  @param encryptionInfo the encryption descriptor in case of cryptoAPI encryption
     *  @return The value of the given property or null if it wasn't found.
     */
    protected PropertySet getPropertySet(String setName, EncryptionInfo encryptionInfo) {
        DirectoryNode dirNode = directory;
        
        NPOIFSFileSystem encPoifs = null;
        String step = "getting";
        try {
            if (encryptionInfo != null) {
                step = "getting encrypted";
                InputStream is = encryptionInfo.getDecryptor().getDataStream(directory);
                try {
                    encPoifs = new NPOIFSFileSystem(is);
                    dirNode = encPoifs.getRoot();
                } finally {
                    is.close();
                }
            }
            
            //directory can be null when creating new documents
            if (dirNode == null || !dirNode.hasEntry(setName)) {
                return null;
            }
    
            // Find the entry, and get an input stream for it
            step = "getting";
            DocumentInputStream dis = dirNode.createDocumentInputStream( dirNode.getEntry(setName) );
            try {
                // Create the Property Set
                step = "creating";
                return PropertySetFactory.create(dis);
            } finally {
                dis.close();
            }
        } catch (Exception e) {
            logger.log(POILogger.WARN, "Error "+step+" property set with name " + setName, e);
            return null;
        } finally {
            if (encPoifs != null) {
                try {
                    encPoifs.close();
                } catch(IOException e) {
                    logger.log(POILogger.WARN, "Error closing encrypted property poifs", e);
                }
            }
        }
    }

