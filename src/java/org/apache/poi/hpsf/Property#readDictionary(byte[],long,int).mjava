    /**
     *  <p>
     *
     *  Reads a dictionary.</p>
     *
     *@param  src     The byte array containing the bytes making out the
     *      dictionary.
     *@param  offset  At this offset within <var>src</var> the dictionary
     *      starts.
     *@param  length  The dictionary contains at most this many bytes.
     *@return         Description of the Return Value
     */
    protected Map readDictionary(final byte[] src, final long offset,
            final int length) {
        /*
         *  FIXME: Check the length!
         */
        int o = (int)offset;

        /*
         *  Read the number of dictionary entries.
         */
        final long nrEntries = LittleEndian.getUInt(src, o);
        o += LittleEndian.INT_SIZE;

        final Map m = new HashMap((int)nrEntries, (float) 1.0);
        for (int i = 0; i < nrEntries; i++) {
            /*
             *  The key
             */
            final Long id = new Long(LittleEndian.getUInt(src, o));
            o += LittleEndian.INT_SIZE;

            /*
             *  The value (a string)
             */
            final long sLength = LittleEndian.getUInt(src, o);
            o += LittleEndian.INT_SIZE;
            /*
             *  Strip trailing 0x00 bytes.
             */
            long l = sLength;
            while (src[(int)(o + l - 1)] == 0x00) {
                l--;
            }
            final String s = new String(src, o, (int)l);
            o += sLength;
            m.put(id, s);
        }
        return m;
    }

