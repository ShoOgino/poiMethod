    /**
     * Returns an array of text extractors, one for each of
     *  the embedded documents in the file (if there are any).
     * If there are no embedded documents, you'll get back an
     *  empty array. Otherwise, you'll get one open
     *  {@link POITextExtractor} for each embedded file.
     *
     * @param ext The extractor to look at for embedded documents
     *
     * @return An array of resulting extractors. Empty if no embedded documents are found.
     *
     * @throws IOException If converting the {@link DirectoryNode} into a HSSFWorkbook fails
     * @throws OldFileFormatException If the {@link DirectoryNode} points to a format of
     *      an unsupported version of Excel.
     * @throws IllegalArgumentException If creating the Extractor fails
     */
    public static POITextExtractor[] getEmbededDocsTextExtractors(POIOLE2TextExtractor ext) throws IOException {
        // All the embedded directories we spotted
        List<Entry> dirs = new ArrayList<>();
        // For anything else not directly held in as a POIFS directory
        List<InputStream> nonPOIFS = new ArrayList<>();

        // Find all the embedded directories
        DirectoryEntry root = ext.getRoot();
        if(root == null) {
            throw new IllegalStateException("The extractor didn't know which POIFS it came from!");
        }

        if(ext instanceof ExcelExtractor) {
            // These are in MBD... under the root
            Iterator<Entry> it = root.getEntries();
            while(it.hasNext()) {
                Entry entry = it.next();
                if(entry.getName().startsWith("MBD")) {
                    dirs.add(entry);
                }
            }
        } else {
            // Ask Scratchpad, or fail trying
            Class<?> cls = getScratchpadClass();
            try {
                Method m = cls.getDeclaredMethod(
                        "identifyEmbeddedResources", POIOLE2TextExtractor.class, List.class, List.class);
                m.invoke(null, ext, dirs, nonPOIFS);
            } catch (Exception e) {
                throw new IllegalArgumentException("Error checking for Scratchpad embedded resources", e);
            }
        }

        // Create the extractors
        if(dirs.size() == 0 && nonPOIFS.size() == 0){
            return new POITextExtractor[0];
        }

        ArrayList<POITextExtractor> e = new ArrayList<>();
        for (Entry dir : dirs) {
            e.add(createExtractor((DirectoryNode) dir
            ));
        }
        for (InputStream stream : nonPOIFS) {
            try {
                e.add(createExtractor(stream));
            } catch (Exception xe) {
                // Ignore, invalid format
                LOGGER.log(POILogger.WARN, xe);
            }
        }
        return e.toArray(new POITextExtractor[0]);
    }

