	private HeaderBlock(byte[] data) throws IOException {
	   this._data = data;
	   
		// verify signature
		long signature = LittleEndian.getLong(_data, _signature_offset);

		if (signature != _signature) {
			// Is it one of the usual suspects?
			byte[] OOXML_FILE_HEADER = POIFSConstants.OOXML_FILE_HEADER;
			if (_data[0] == OOXML_FILE_HEADER[0] &&
				_data[1] == OOXML_FILE_HEADER[1] &&
				_data[2] == OOXML_FILE_HEADER[2] &&
				_data[3] == OOXML_FILE_HEADER[3]) {
				throw new OfficeXmlFileException("The supplied data appears to be in the Office 2007+ XML. You are calling the part of POI that deals with OLE2 Office Documents. You need to call a different part of POI to process this data (eg XSSF instead of HSSF)");
			}
			
            byte[] RAW_XML_FILE_HEADER = POIFSConstants.RAW_XML_FILE_HEADER;
            if (_data[0] == RAW_XML_FILE_HEADER[0] &&
                _data[1] == RAW_XML_FILE_HEADER[1] &&
                _data[2] == RAW_XML_FILE_HEADER[2] &&
                _data[3] == RAW_XML_FILE_HEADER[3] &&
                _data[4] == RAW_XML_FILE_HEADER[4]) {
                throw new NotOLE2FileException("The supplied data appears to be a raw XML file. Formats such as Office 2003 XML are not supported");
            }
            
            if (_data[0] == 0x09 && _data[1] == 0x00 && // sid=0x0009
                _data[2] == 0x04 && _data[3] == 0x00 && // size=0x0004
                _data[4] == 0x00 && _data[5] == 0x00 && // unused
               (_data[6] == 0x10 || _data[6] == 0x20 || _data[6] == 0x40) &&
                _data[7] == 0x00) {
                // BIFF2 raw stream
                throw new OldExcelFormatException("The supplied data appears to be in BIFF2 format. " +
                        "HSSF only supports the BIFF8 format, try OldExcelExtractor");
            }
            if (_data[0] == 0x09 && _data[1] == 0x02 && // sid=0x0209
                _data[2] == 0x06 && _data[3] == 0x00 && // size=0x0006
                _data[4] == 0x00 && _data[5] == 0x00 && // unused
               (_data[6] == 0x10 || _data[6] == 0x20 || _data[6] == 0x40) &&
                _data[7] == 0x00) {
                // BIFF3 raw stream
                throw new OldExcelFormatException("The supplied data appears to be in BIFF3 format. " +
                        "HSSF only supports the BIFF8 format, try OldExcelExtractor");
            }
            if (_data[0] == 0x09 && _data[1] == 0x04 && // sid=0x0409
                _data[2] == 0x06 && _data[3] == 0x00 && // size=0x0006
                _data[4] == 0x00 && _data[5] == 0x00) { // unused
                if (((_data[6] == 0x10 || _data[6] == 0x20 || _data[6] == 0x40) &&
                      _data[7] == 0x00) ||
                    (_data[6] == 0x00 && _data[7] == 0x01)) {
                    // BIFF4 raw stream
                    throw new OldExcelFormatException("The supplied data appears to be in BIFF4 format. " +
                            "HSSF only supports the BIFF8 format, try OldExcelExtractor");
                }
            }

			// Give a generic error if the OLE2 signature isn't found
			throw new NotOLE2FileException("Invalid header signature; read "
				                  + HexDump.longToHex(signature) + ", expected "
				                  + HexDump.longToHex(_signature) + " - Your file appears "
				                  + "not to be a valid OLE2 document");
		}


		// Figure out our block size
		if (_data[30] == 12) {
			this.bigBlockSize = POIFSConstants.LARGER_BIG_BLOCK_SIZE_DETAILS;
		} else if(_data[30] == 9) {
			this.bigBlockSize = POIFSConstants.SMALLER_BIG_BLOCK_SIZE_DETAILS;
		} else {
		   throw new IOException("Unsupported blocksize  (2^"+ _data[30] + "). Expected 2^9 or 2^12.");
		}

	   // Setup the fields to read and write the counts and starts
      _bat_count      = new IntegerField(_bat_count_offset, data).get();
      _property_start = new IntegerField(_property_start_offset,_data).get();
      _sbat_start = new IntegerField(_sbat_start_offset, _data).get();
      _sbat_count = new IntegerField(_sbat_block_count_offset, _data).get();
      _xbat_start = new IntegerField(_xbat_start_offset, _data).get();
      _xbat_count = new IntegerField(_xbat_count_offset, _data).get();
	}

