	private HeaderBlock(byte[] data) throws IOException {
	   this._data = data.clone();
	   
		// verify signature
		long signature = LittleEndian.getLong(_data, _signature_offset);

		if (signature != _signature) {
			// Is it one of the usual suspects?
			if (cmp(POIFSConstants.OOXML_FILE_HEADER, data)) {
				throw new OfficeXmlFileException("The supplied data appears to be in the Office 2007+ XML. "
			        + "You are calling the part of POI that deals with OLE2 Office Documents. "
			        + "You need to call a different part of POI to process this data (eg XSSF instead of HSSF)");
			}
			
            if (cmp(POIFSConstants.RAW_XML_FILE_HEADER, data)) {
                throw new NotOLE2FileException("The supplied data appears to be a raw XML file. "
                    + "Formats such as Office 2003 XML are not supported");
            }
            
            // Old MS Write raw stream
            if (cmp(MAGIC_MSWRITEa, data) || cmp(MAGIC_MSWRITEb, data)) {
                throw new NotOLE2FileException("The supplied data appears to be in the old MS Write format. "
                    + "Apache POI doesn't currently support this format");
            }

            // BIFF2 raw stream
            if (cmp(MAGIC_BIFF2, data)) {
                throw new OldExcelFormatException("The supplied data appears to be in BIFF2 format. "
                    + "HSSF only supports the BIFF8 format, try OldExcelExtractor");
            }
            
            // BIFF3 raw stream
            if (cmp(MAGIC_BIFF3, data)) {
                throw new OldExcelFormatException("The supplied data appears to be in BIFF3 format. "
                    + "HSSF only supports the BIFF8 format, try OldExcelExtractor");
            }
            
            // BIFF4 raw stream
            if (cmp(MAGIC_BIFF4a, data) || cmp(MAGIC_BIFF4b, data)) {
                throw new OldExcelFormatException("The supplied data appears to be in BIFF4 format. "
                    + "HSSF only supports the BIFF8 format, try OldExcelExtractor");
            }

			// Give a generic error if the OLE2 signature isn't found
			throw new NotOLE2FileException("Invalid header signature; read "
				                  + HexDump.longToHex(signature) + ", expected "
				                  + HexDump.longToHex(_signature) + " - Your file appears "
				                  + "not to be a valid OLE2 document");
		}


		// Figure out our block size
		if (_data[30] == 12) {
			this.bigBlockSize = POIFSConstants.LARGER_BIG_BLOCK_SIZE_DETAILS;
		} else if(_data[30] == 9) {
			this.bigBlockSize = POIFSConstants.SMALLER_BIG_BLOCK_SIZE_DETAILS;
		} else {
		   throw new IOException("Unsupported blocksize  (2^"+ _data[30] + "). Expected 2^9 or 2^12.");
		}

	   // Setup the fields to read and write the counts and starts
      _bat_count  = new IntegerField(_bat_count_offset, data).get();
      _property_start = new IntegerField(_property_start_offset,_data).get();
      _sbat_start = new IntegerField(_sbat_start_offset, _data).get();
      _sbat_count = new IntegerField(_sbat_block_count_offset, _data).get();
      _xbat_start = new IntegerField(_xbat_start_offset, _data).get();
      _xbat_count = new IntegerField(_xbat_count_offset, _data).get();
	}

