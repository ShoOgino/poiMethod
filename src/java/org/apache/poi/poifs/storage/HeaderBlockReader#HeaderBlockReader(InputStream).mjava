    /**
     * create a new HeaderBlockReader from an InputStream
     *
     * @param stream the source InputStream
     *
     * @exception IOException on errors or bad data
     */

    public HeaderBlockReader(final InputStream stream)
        throws IOException
    {
    	// At this point, we don't know how big our
    	//  block sizes are
    	// So, read the first 32 bytes to check, then
    	//  read the rest of the block
    	byte[] blockStart = new byte[32];
    	int bsCount = IOUtils.readFully(stream, blockStart);
    	if(bsCount != 32) {
    		alertShortRead(bsCount);
    	}
    	
    	// Figure out our block size
    	if(blockStart[30] == 12) {
    		bigBlockSize = POIFSConstants.LARGER_BIG_BLOCK_SIZE;
    	}
        _data = new byte[ bigBlockSize ];
        System.arraycopy(blockStart, 0, _data, 0, blockStart.length);
    	
    	// Now we can read the rest of our header
        int byte_count = IOUtils.readFully(stream, _data, blockStart.length, _data.length - blockStart.length);
        if (byte_count+bsCount != bigBlockSize) {
    		alertShortRead(byte_count);
        }

        // verify signature
        LongField signature = new LongField(_signature_offset, _data);

        if (signature.get() != _signature)
        {
			// Is it one of the usual suspects?
        	byte[] OOXML_FILE_HEADER = POIFSConstants.OOXML_FILE_HEADER;
			if(_data[0] == OOXML_FILE_HEADER[0] && 
					_data[1] == OOXML_FILE_HEADER[1] && 
					_data[2] == OOXML_FILE_HEADER[2] &&
					_data[3] == OOXML_FILE_HEADER[3]) {
				throw new OfficeXmlFileException("The supplied data appears to be in the Office 2007+ XML. POI only supports OLE2 Office documents");
			}

			// Give a generic error
            throw new IOException("Invalid header signature; read "
                                  + signature.get() + ", expected "
                                  + _signature);
        }
        _bat_count      = new IntegerField(_bat_count_offset, _data);
        _property_start = new IntegerField(_property_start_offset, _data);
        _sbat_start     = new IntegerField(_sbat_start_offset, _data);
        _xbat_start     = new IntegerField(_xbat_start_offset, _data);
        _xbat_count     = new IntegerField(_xbat_count_offset, _data);
    }

