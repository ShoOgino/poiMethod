    /**
     * Reads VBA Project modules from a VBA Project directory located at
     * <tt>macroDir</tt> into <tt>modules</tt>.
     *
     * @since 3.15-beta2
     */    
    protected void readMacros(DirectoryNode macroDir, ModuleMap modules) throws IOException {
        for (Entry entry : macroDir) {
            if (! (entry instanceof DocumentNode)) { continue; }
            
            String name = entry.getName();
            DocumentNode document = (DocumentNode)entry;
            DocumentInputStream dis = new DocumentInputStream(document);
            try {
                if ("dir".equalsIgnoreCase(name)) {
                    // process DIR
                    RLEDecompressingInputStream in = new RLEDecompressingInputStream(dis);
                    String streamName = null;
                    int recordId = 0;
                    try {
                        while (true) {
                            recordId = in.readShort();
                            if (EOF == recordId
                                    || VERSION_INDEPENDENT_TERMINATOR == recordId) {
                                break;
                            }
                            int recordLength = in.readInt();
                            switch (recordId) {
                            case PROJECTVERSION:
                                trySkip(in, 6);
                                break;
                            case PROJECTCODEPAGE:
                                int codepage = in.readShort();
                                modules.charset = Charset.forName("Cp" + codepage);
                                break;
                            case STREAMNAME:
                                streamName = readString(in, recordLength, modules.charset);
                                break;
                            case MODULEOFFSET:
                                readModule(in, streamName, modules);
                                break;
                            default:
                                trySkip(in, recordLength);
                                break;
                            }
                        }
                    } catch (final IOException e) {
                        throw new IOException(
                                "Error occurred while reading macros at section id "
                                + recordId + " (" + HexDump.shortToHex(recordId) + ")", e);
                    }
                    finally {
                        in.close();
                    }
                } else if (!startsWithIgnoreCase(name, "__SRP")
                        && !startsWithIgnoreCase(name, "_VBA_PROJECT")) {
                    // process module, skip __SRP and _VBA_PROJECT since these do not contain macros
                    Module module = modules.get(name);
                    final InputStream in;
                    // TODO Refactor this to fetch dir then do the rest
                    if (module == null) {
                        // no DIR stream with offsets yet, so store the compressed bytes for later
                        module = new Module();
                        modules.put(name, module);
                        in = dis;
                    } else {
                        // we know the offset already, so decompress immediately on-the-fly
                        long skippedBytes = dis.skip(module.offset);
                        if (skippedBytes != module.offset) {
                            throw new IOException("tried to skip " + module.offset + " bytes, but actually skipped " + skippedBytes + " bytes");
                        }
                        in = new RLEDecompressingInputStream(dis);
                    }
                    final ByteArrayOutputStream out = new ByteArrayOutputStream();
                    IOUtils.copy(in, out);
                    in.close();
                    out.close();
                    module.buf = out.toByteArray();
                }
            }
            finally {
                dis.close();
            }
        }
    }

