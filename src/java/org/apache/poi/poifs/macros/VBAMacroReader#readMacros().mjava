    /**
     * Reads all macros from all modules of the opened office file. 
     */
    public Map<String, String> readMacros() throws IOException {
        class Module {
            Integer offset;
            byte[] buf;
        }
        class ModuleMap extends HashMap<String, Module> {

            Charset charset = Charset.forName("Cp1252"); // default charset
        }
        try {
            final ModuleMap modules = new ModuleMap();
            POIFSReader dirReader = new POIFSReader();
            dirReader.registerListener(new POIFSReaderListener() {

                public void processPOIFSReaderEvent(POIFSReaderEvent event) {
                    try {
                        String name = event.getName();
                        if (event.getPath().toString().endsWith("\\VBA")) {
                            if ("dir".equals(name)) {
                                // process DIR
                                RLEDecompressingInputStream in = new RLEDecompressingInputStream(event.getStream());
                                String streamName = null;
                                while (true) {
                                    int id = in.readShort();
                                    if (id == -1 || id == 0x0010) {
                                        break; // EOF or TERMINATOR
                                    }
                                    int len = in.readInt();
                                    switch (id) {
                                        case 0x0009: // PROJECTVERSION
                                            in.skip(6);
                                            break;
                                        case 0x0003: // PROJECTCODEPAGE
                                            int codepage = in.readShort();
                                            modules.charset = Charset.forName("Cp" + codepage);
                                            break;
                                        case 0x001A: // STREAMNAME
                                            byte[] streamNameBuf = new byte[len];
                                            int count = in.read(streamNameBuf);
                                            streamName = new String(streamNameBuf, 0, count, modules.charset);
                                            break;
                                        case 0x0031: // MODULEOFFSET
                                            int moduleOffset = in.readInt();
                                            Module module = modules.get(streamName);
                                            if (module != null) {
                                                ByteArrayOutputStream out = new ByteArrayOutputStream();
                                                RLEDecompressingInputStream stream = new RLEDecompressingInputStream(new ByteArrayInputStream(
                                                        module.buf, moduleOffset, module.buf.length - moduleOffset));
                                                IOUtils.copy(stream, out);
                                                stream.close();
                                                out.close();
                                                module.buf = out.toByteArray();
                                            } else {
                                                module = new Module();
                                                module.offset = moduleOffset;
                                                modules.put(streamName, module);
                                            }
                                            break;
                                        default:
                                            in.skip(len);
                                            break;
                                    }
                                }
                            } else if (!name.startsWith("__SRP") && !name.startsWith("_VBA_PROJECT")) {
                                // process module, skip __SRP and _VBA_PROJECT since these do not contain macros
                                Module module = modules.get(name);
                                final DocumentInputStream stream = event.getStream();
                                final InputStream in;
                                if (module == null) {
                                    // no DIR stream with offsets yet, so store the compressed bytes for later
                                    module = new Module();
                                    modules.put(name, module);
                                    in = stream;
                                } else {
                                    // we know the offset already, so decompress immediately on-the-fly
                                    stream.skip(module.offset);
                                    in = new RLEDecompressingInputStream(stream);
                                }
                                final ByteArrayOutputStream out = new ByteArrayOutputStream();
                                IOUtils.copy(in, out);
                                in.close();
                                out.close();
                                module.buf = out.toByteArray();
                            }
                        }
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            });
            dirReader.read(null); // TODO
            Map<String, String> moduleSources = new HashMap<String, String>();
            for (Map.Entry<String, Module> entry : modules.entrySet()) {
                Module module = entry.getValue();
                if (module.buf != null && module.buf.length > 0) { // Skip empty modules
                    moduleSources.put(entry.getKey(), new String(module.buf, modules.charset));
                }
            }
            return moduleSources;
        } catch (IOException e) {
            e.printStackTrace();
            throw e;
        }
    }

