    protected byte[] hashPassword(EncryptionInfo info,
                                  String password) throws NoSuchAlgorithmException {
        // If no password was given, use the default
        if (password == null) {
            password = DEFAULT_PASSWORD;
        }
        
        byte[] pass;
        try {
            pass = password.getBytes("UTF-16LE");
        } catch (UnsupportedEncodingException e) {
            throw new EncryptedDocumentException("UTF16 not supported");
        }

        byte[] salt = info.getVerifier().getSalt();
        
        MessageDigest sha1 = MessageDigest.getInstance("SHA-1");
        sha1.update(salt);
        byte[] hash = sha1.digest(pass);
        byte[] iterator = new byte[LittleEndianConsts.INT_SIZE];
        
        try {
        for (int i = 0; i < info.getVerifier().getSpinCount(); i++) {
        	LittleEndian.putInt(iterator, 0, i);
            sha1.reset();
            sha1.update(iterator);
            sha1.update(hash);
            sha1.digest(hash, 0, hash.length); // don't create hash buffer everytime new
        }
        } catch (DigestException e) {
        	throw new EncryptedDocumentException("error in password hashing");
        }
        
        return hash;
    }

