    private void processProperties(final BlockList small_blocks,
                                   final BlockList big_blocks,
                                   final Iterator<Property> properties,
                                   final POIFSDocumentPath path)
    throws IOException {
        if (!properties.hasNext() && notifyEmptyDirectories) {
            Iterator<POIFSReaderListener> listeners  = registry.getListeners(path, ".");
            while (listeners.hasNext()) {
                POIFSReaderListener pl = listeners.next();
                POIFSReaderEvent pe = new POIFSReaderEvent(null, path, null);
                pl.processPOIFSReaderEvent(pe);
            }
            return;
        }

        while (properties.hasNext())
        {
            Property property = properties.next();
            String   name     = property.getName();

            if (property.isDirectory()) {
                POIFSDocumentPath new_path = new POIFSDocumentPath(path,new String[]{name});
                DirectoryProperty dp = (DirectoryProperty) property;
                processProperties(small_blocks, big_blocks, dp.getChildren(), new_path);
            } else {
                int startBlock = property.getStartBlock();
                Iterator<POIFSReaderListener> listeners  = registry.getListeners(path, name);

                if (listeners.hasNext())
                {
                    int            size     = property.getSize();
                    OPOIFSDocument document = null;

                    if (property.shouldUseSmallBlocks())
                    {
                        document =
                            new OPOIFSDocument(name, small_blocks
                                .fetchBlocks(startBlock, -1), size);
                    }
                    else
                    {
                        document =
                            new OPOIFSDocument(name, big_blocks
                                .fetchBlocks(startBlock, -1), size);
                    }
                    while (listeners.hasNext())
                    {
                        POIFSReaderListener listener = listeners.next();
                        try (DocumentInputStream dis = new DocumentInputStream(document)) {
                            listener.processPOIFSReaderEvent(new POIFSReaderEvent(dis, path, name));
                        }
                    }
                }
                else
                {

                    // consume the document's data and discard it
                    if (property.shouldUseSmallBlocks())
                    {
                        small_blocks.fetchBlocks(startBlock, -1);
                    }
                    else
                    {
                        big_blocks.fetchBlocks(startBlock, -1);
                    }
                }
            }
        }
    }

