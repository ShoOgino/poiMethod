    private NPOIFSFileSystem(FileChannel channel, File srcFile, boolean readOnly, boolean closeChannelOnError)
         throws IOException
    {
       this(false);

       try {
          // Initialize the datasource
          if (srcFile != null) {
              if (srcFile.length() == 0)
                  throw new EmptyFileException();
              
              FileBackedDataSource d = new FileBackedDataSource(srcFile, readOnly);
              channel = d.getChannel();
              _data = d;
          } else {
              _data = new FileBackedDataSource(channel, readOnly);
          }
           
          // Get the header
          ByteBuffer headerBuffer = ByteBuffer.allocate(POIFSConstants.SMALLER_BIG_BLOCK_SIZE);
          IOUtils.readFully(channel, headerBuffer);
          
          // Have the header processed
          _header = new HeaderBlock(headerBuffer);
          
          // Now process the various entries
          readCoreContents();
       } catch(IOException e) {
          // Until we upgrade to Java 7, and can do a MultiCatch, we 
          //  need to keep these two catch blocks in sync on their cleanup
          if (closeChannelOnError && channel != null) {
              channel.close();
              channel = null;
          }
          throw e;
       } catch(RuntimeException e) {
          // Comes from Iterators etc.
          // TODO Decide if we can handle these better whilst
          //  still sticking to the iterator contract
           if (closeChannelOnError && channel != null) {
               channel.close();
               channel = null;
           }
          throw e;
       }
    }

