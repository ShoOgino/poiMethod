    private static void initProps()
    {
        if ( properties == null )
        {
            properties = new HashMap();
            addProp( TRANSFORM__ROTATION, data( "transform.rotation" ) );
            addProp( PROTECTION__LOCKROTATION , data( "protection.lockrotation" ) );
            addProp( PROTECTION__LOCKASPECTRATIO , data( "protection.lockaspectratio" ) );
            addProp( PROTECTION__LOCKPOSITION , data( "protection.lockposition" ) );
            addProp( PROTECTION__LOCKAGAINSTSELECT , data( "protection.lockagainstselect" ) );
            addProp( PROTECTION__LOCKCROPPING , data( "protection.lockcropping" ) );
            addProp( PROTECTION__LOCKVERTICES , data( "protection.lockvertices" ) );
            addProp( PROTECTION__LOCKTEXT , data( "protection.locktext" ) );
            addProp( PROTECTION__LOCKADJUSTHANDLES , data( "protection.lockadjusthandles" ) );
            addProp( PROTECTION__LOCKAGAINSTGROUPING , data( "protection.lockagainstgrouping", EscherPropertyMetaData.TYPE_BOOLEAN ) );
            addProp( TEXT__TEXTID , data( "text.textid" ) );
            addProp( TEXT__TEXTLEFT , data( "text.textleft" ) );
            addProp( TEXT__TEXTTOP , data( "text.texttop" ) );
            addProp( TEXT__TEXTRIGHT , data( "text.textright" ) );
            addProp( TEXT__TEXTBOTTOM , data( "text.textbottom" ) );
            addProp( TEXT__WRAPTEXT , data( "text.wraptext" ) );
            addProp( TEXT__SCALETEXT , data( "text.scaletext" ) );
            addProp( TEXT__ANCHORTEXT , data( "text.anchortext" ) );
            addProp( TEXT__TEXTFLOW , data( "text.textflow" ) );
            addProp( TEXT__FONTROTATION , data( "text.fontrotation" ) );
            addProp( TEXT__IDOFNEXTSHAPE , data( "text.idofnextshape" ) );
            addProp( TEXT__BIDIR , data( "text.bidir" ) );
            addProp( TEXT__SINGLECLICKSELECTS , data( "text.singleclickselects" ) );
            addProp( TEXT__USEHOSTMARGINS , data( "text.usehostmargins" ) );
            addProp( TEXT__ROTATETEXTWITHSHAPE , data( "text.rotatetextwithshape" ) );
            addProp( TEXT__SIZESHAPETOFITTEXT , data( "text.sizeshapetofittext" ) );
            addProp( TEXT__SIZE_TEXT_TO_FIT_SHAPE, data( "text.sizetexttofitshape", EscherPropertyMetaData.TYPE_BOOLEAN ) );
            addProp( GEOTEXT__UNICODE , data( "geotext.unicode" ) );
            addProp( GEOTEXT__RTFTEXT , data( "geotext.rtftext" ) );
            addProp( GEOTEXT__ALIGNMENTONCURVE , data( "geotext.alignmentoncurve" ) );
            addProp( GEOTEXT__DEFAULTPOINTSIZE , data( "geotext.defaultpointsize" ) );
            addProp( GEOTEXT__TEXTSPACING , data( "geotext.textspacing" ) );
            addProp( GEOTEXT__FONTFAMILYNAME , data( "geotext.fontfamilyname" ) );
            addProp( GEOTEXT__REVERSEROWORDER , data( "geotext.reverseroworder" ) );
            addProp( GEOTEXT__HASTEXTEFFECT , data( "geotext.hastexteffect" ) );
            addProp( GEOTEXT__ROTATECHARACTERS , data( "geotext.rotatecharacters" ) );
            addProp( GEOTEXT__KERNCHARACTERS , data( "geotext.kerncharacters" ) );
            addProp( GEOTEXT__TIGHTORTRACK , data( "geotext.tightortrack" ) );
            addProp( GEOTEXT__STRETCHTOFITSHAPE , data( "geotext.stretchtofitshape" ) );
            addProp( GEOTEXT__CHARBOUNDINGBOX , data( "geotext.charboundingbox" ) );
            addProp( GEOTEXT__SCALETEXTONPATH , data( "geotext.scaletextonpath" ) );
            addProp( GEOTEXT__STRETCHCHARHEIGHT , data( "geotext.stretchcharheight" ) );
            addProp( GEOTEXT__NOMEASUREALONGPATH , data( "geotext.nomeasurealongpath" ) );
            addProp( GEOTEXT__BOLDFONT , data( "geotext.boldfont" ) );
            addProp( GEOTEXT__ITALICFONT , data( "geotext.italicfont" ) );
            addProp( GEOTEXT__UNDERLINEFONT , data( "geotext.underlinefont" ) );
            addProp( GEOTEXT__SHADOWFONT , data( "geotext.shadowfont" ) );
            addProp( GEOTEXT__SMALLCAPSFONT , data( "geotext.smallcapsfont" ) );
            addProp( GEOTEXT__STRIKETHROUGHFONT , data( "geotext.strikethroughfont" ) );
            addProp( BLIP__CROPFROMTOP , data( "blip.cropfromtop" ) );
            addProp( BLIP__CROPFROMBOTTOM , data( "blip.cropfrombottom" ) );
            addProp( BLIP__CROPFROMLEFT , data( "blip.cropfromleft" ) );
            addProp( BLIP__CROPFROMRIGHT , data( "blip.cropfromright" ) );
            addProp( BLIP__BLIPTODISPLAY , data( "blip.bliptodisplay" ) );
            addProp( BLIP__BLIPFILENAME , data( "blip.blipfilename" ) );
            addProp( BLIP__BLIPFLAGS , data( "blip.blipflags" ) );
            addProp( BLIP__TRANSPARENTCOLOR , data( "blip.transparentcolor" ) );
            addProp( BLIP__CONTRASTSETTING , data( "blip.contrastsetting" ) );
            addProp( BLIP__BRIGHTNESSSETTING , data( "blip.brightnesssetting" ) );
            addProp( BLIP__GAMMA , data( "blip.gamma" ) );
            addProp( BLIP__PICTUREID , data( "blip.pictureid" ) );
            addProp( BLIP__DOUBLEMOD , data( "blip.doublemod" ) );
            addProp( BLIP__PICTUREFILLMOD , data( "blip.picturefillmod" ) );
            addProp( BLIP__PICTURELINE , data( "blip.pictureline" ) );
            addProp( BLIP__PRINTBLIP , data( "blip.printblip" ) );
            addProp( BLIP__PRINTBLIPFILENAME , data( "blip.printblipfilename" ) );
            addProp( BLIP__PRINTFLAGS , data( "blip.printflags" ) );
            addProp( BLIP__NOHITTESTPICTURE , data( "blip.nohittestpicture" ) );
            addProp( BLIP__PICTUREGRAY , data( "blip.picturegray" ) );
            addProp( BLIP__PICTUREBILEVEL , data( "blip.picturebilevel" ) );
            addProp( BLIP__PICTUREACTIVE , data( "blip.pictureactive" ) );
            addProp( GEOMETRY__LEFT , data( "geometry.left" ) );
            addProp( GEOMETRY__TOP , data( "geometry.top" ) );
            addProp( GEOMETRY__RIGHT , data( "geometry.right" ) );
            addProp( GEOMETRY__BOTTOM , data( "geometry.bottom" ) );
            addProp( GEOMETRY__SHAPEPATH , data( "geometry.shapepath", EscherPropertyMetaData.TYPE_SHAPEPATH ) );
            addProp( GEOMETRY__VERTICES , data( "geometry.vertices" , EscherPropertyMetaData.TYPE_ARRAY ) );
            addProp( GEOMETRY__SEGMENTINFO , data( "geometry.segmentinfo", EscherPropertyMetaData.TYPE_ARRAY ) );
            addProp( GEOMETRY__ADJUSTVALUE , data( "geometry.adjustvalue" ) );
            addProp( GEOMETRY__ADJUST2VALUE , data( "geometry.adjust2value" ) );
            addProp( GEOMETRY__ADJUST3VALUE , data( "geometry.adjust3value" ) );
            addProp( GEOMETRY__ADJUST4VALUE , data( "geometry.adjust4value" ) );
            addProp( GEOMETRY__ADJUST5VALUE , data( "geometry.adjust5value" ) );
            addProp( GEOMETRY__ADJUST6VALUE , data( "geometry.adjust6value" ) );
            addProp( GEOMETRY__ADJUST7VALUE , data( "geometry.adjust7value" ) );
            addProp( GEOMETRY__ADJUST8VALUE , data( "geometry.adjust8value" ) );
            addProp( GEOMETRY__ADJUST9VALUE , data( "geometry.adjust9value" ) );
            addProp( GEOMETRY__ADJUST10VALUE , data( "geometry.adjust10value" ) );
            addProp( GEOMETRY__SHADOWok , data( "geometry.shadowOK" ) );
            addProp( GEOMETRY__3DOK , data( "geometry.3dok" ) );
            addProp( GEOMETRY__LINEOK , data( "geometry.lineok" ) );
            addProp( GEOMETRY__GEOTEXTOK , data( "geometry.geotextok" ) );
            addProp( GEOMETRY__FILLSHADESHAPEOK , data( "geometry.fillshadeshapeok" ) );
            addProp( GEOMETRY__FILLOK , data( "geometry.fillok", EscherPropertyMetaData.TYPE_BOOLEAN ) );
            addProp( FILL__FILLTYPE , data( "fill.filltype" ) );
            addProp( FILL__FILLCOLOR, data( "fill.fillcolor", EscherPropertyMetaData.TYPE_RGB ) );
            addProp( FILL__FILLOPACITY , data( "fill.fillopacity" ) );
            addProp( FILL__FILLBACKCOLOR , data( "fill.fillbackcolor", EscherPropertyMetaData.TYPE_RGB ) );
            addProp( FILL__BACKOPACITY , data( "fill.backopacity" ) );
            addProp( FILL__CRMOD , data( "fill.crmod" ) );
            addProp( FILL__PATTERNTEXTURE , data( "fill.patterntexture" ) );
            addProp( FILL__BLIPFILENAME , data( "fill.blipfilename" ) );
            addProp( FILL__BLIPFLAGS, data( "fill.blipflags" ) );
            addProp( FILL__WIDTH , data( "fill.width" ) );
            addProp( FILL__HEIGHT , data( "fill.height" ) );
            addProp( FILL__ANGLE , data( "fill.angle" ) );
            addProp( FILL__FOCUS , data( "fill.focus" ) );
            addProp( FILL__TOLEFT , data( "fill.toleft" ) );
            addProp( FILL__TOTOP , data( "fill.totop" ) );
            addProp( FILL__TORIGHT , data( "fill.toright" ) );
            addProp( FILL__TOBOTTOM , data( "fill.tobottom" ) );
            addProp( FILL__RECTLEFT , data( "fill.rectleft" ) );
            addProp( FILL__RECTTOP , data( "fill.recttop" ) );
            addProp( FILL__RECTRIGHT , data( "fill.rectright" ) );
            addProp( FILL__RECTBOTTOM , data( "fill.rectbottom" ) );
            addProp( FILL__DZTYPE , data( "fill.dztype" ) );
            addProp( FILL__SHADEPRESET , data( "fill.shadepreset" ) );
            addProp( FILL__SHADECOLORS , data( "fill.shadecolors", EscherPropertyMetaData.TYPE_ARRAY ) );
            addProp( FILL__ORIGINX , data( "fill.originx" ) );
            addProp( FILL__ORIGINY , data( "fill.originy" ) );
            addProp( FILL__SHAPEORIGINX , data( "fill.shapeoriginx" ) );
            addProp( FILL__SHAPEORIGINY , data( "fill.shapeoriginy" ) );
            addProp( FILL__SHADETYPE , data( "fill.shadetype" ) );
            addProp( FILL__FILLED , data( "fill.filled" ) );
            addProp( FILL__HITTESTFILL , data( "fill.hittestfill" ) );
            addProp( FILL__SHAPE , data( "fill.shape" ) );
            addProp( FILL__USERECT , data( "fill.userect" ) );
            addProp( FILL__NOFILLHITTEST , data( "fill.nofillhittest", EscherPropertyMetaData.TYPE_BOOLEAN ) );
            addProp( LINESTYLE__COLOR, data( "linestyle.color", EscherPropertyMetaData.TYPE_RGB ) );
            addProp( LINESTYLE__OPACITY , data( "linestyle.opacity" ) );
            addProp( LINESTYLE__BACKCOLOR , data( "linestyle.backcolor", EscherPropertyMetaData.TYPE_RGB ) );
            addProp( LINESTYLE__CRMOD , data( "linestyle.crmod" ) );
            addProp( LINESTYLE__LINETYPE , data( "linestyle.linetype" ) );
            addProp( LINESTYLE__FILLBLIP , data( "linestyle.fillblip" ) );
            addProp( LINESTYLE__FILLBLIPNAME , data( "linestyle.fillblipname" ) );
            addProp( LINESTYLE__FILLBLIPFLAGS , data( "linestyle.fillblipflags" ) );
            addProp( LINESTYLE__FILLWIDTH , data( "linestyle.fillwidth" ) );
            addProp( LINESTYLE__FILLHEIGHT , data( "linestyle.fillheight" ) );
            addProp( LINESTYLE__FILLDZTYPE , data( "linestyle.filldztype" ) );
            addProp( LINESTYLE__LINEWIDTH , data( "linestyle.linewidth" ) );
            addProp( LINESTYLE__LINEMITERLIMIT , data( "linestyle.linemiterlimit" ) );
            addProp( LINESTYLE__LINESTYLE , data( "linestyle.linestyle" ) );
            addProp( LINESTYLE__LINEDASHING , data( "linestyle.linedashing" ) );
            addProp( LINESTYLE__LINEDASHSTYLE , data( "linestyle.linedashstyle", EscherPropertyMetaData.TYPE_ARRAY ) );
            addProp( LINESTYLE__LINESTARTARROWHEAD , data( "linestyle.linestartarrowhead" ) );
            addProp( LINESTYLE__LINEENDARROWHEAD , data( "linestyle.lineendarrowhead" ) );
            addProp( LINESTYLE__LINESTARTARROWWIDTH , data( "linestyle.linestartarrowwidth" ) );
            addProp( LINESTYLE__LINEESTARTARROWLENGTH , data( "linestyle.lineestartarrowlength" ) );
            addProp( LINESTYLE__LINEENDARROWWIDTH , data( "linestyle.lineendarrowwidth" ) );
            addProp( LINESTYLE__LINEENDARROWLENGTH , data( "linestyle.lineendarrowlength" ) );
            addProp( LINESTYLE__LINEJOINSTYLE , data( "linestyle.linejoinstyle" ) );
            addProp( LINESTYLE__LINEENDCAPSTYLE , data( "linestyle.lineendcapstyle" ) );
            addProp( LINESTYLE__ARROWHEADSOK , data( "linestyle.arrowheadsok" ) );
            addProp( LINESTYLE__ANYLINE , data( "linestyle.anyline" ) );
            addProp( LINESTYLE__HITLINETEST , data( "linestyle.hitlinetest" ) );
            addProp( LINESTYLE__LINEFILLSHAPE , data( "linestyle.linefillshape" ) );
            addProp( LINESTYLE__NOLINEDRAWDASH , data( "linestyle.nolinedrawdash", EscherPropertyMetaData.TYPE_BOOLEAN ) );
            addProp( SHADOWSTYLE__TYPE , data( "shadowstyle.type" ) );
            addProp( SHADOWSTYLE__COLOR , data( "shadowstyle.color", EscherPropertyMetaData.TYPE_RGB ) );
            addProp( SHADOWSTYLE__HIGHLIGHT , data( "shadowstyle.highlight" ) );
            addProp( SHADOWSTYLE__CRMOD , data( "shadowstyle.crmod" ) );
            addProp( SHADOWSTYLE__OPACITY , data( "shadowstyle.opacity" ) );
            addProp( SHADOWSTYLE__OFFSETX , data( "shadowstyle.offsetx" ) );
            addProp( SHADOWSTYLE__OFFSETY , data( "shadowstyle.offsety" ) );
            addProp( SHADOWSTYLE__SECONDOFFSETX , data( "shadowstyle.secondoffsetx" ) );
            addProp( SHADOWSTYLE__SECONDOFFSETY , data( "shadowstyle.secondoffsety" ) );
            addProp( SHADOWSTYLE__SCALEXTOX , data( "shadowstyle.scalextox" ) );
            addProp( SHADOWSTYLE__SCALEYTOX , data( "shadowstyle.scaleytox" ) );
            addProp( SHADOWSTYLE__SCALEXTOY , data( "shadowstyle.scalextoy" ) );
            addProp( SHADOWSTYLE__SCALEYTOY , data( "shadowstyle.scaleytoy" ) );
            addProp( SHADOWSTYLE__PERSPECTIVEX , data( "shadowstyle.perspectivex" ) );
            addProp( SHADOWSTYLE__PERSPECTIVEY , data( "shadowstyle.perspectivey" ) );
            addProp( SHADOWSTYLE__WEIGHT , data( "shadowstyle.weight" ) );
            addProp( SHADOWSTYLE__ORIGINX , data( "shadowstyle.originx" ) );
            addProp( SHADOWSTYLE__ORIGINY , data( "shadowstyle.originy" ) );
            addProp( SHADOWSTYLE__SHADOW , data( "shadowstyle.shadow" ) );
            addProp( SHADOWSTYLE__SHADOWOBSURED , data( "shadowstyle.shadowobsured" ) );
            addProp( PERSPECTIVE__TYPE , data( "perspective.type" ) );
            addProp( PERSPECTIVE__OFFSETX , data( "perspective.offsetx" ) );
            addProp( PERSPECTIVE__OFFSETY , data( "perspective.offsety" ) );
            addProp( PERSPECTIVE__SCALEXTOX , data( "perspective.scalextox" ) );
            addProp( PERSPECTIVE__SCALEYTOX , data( "perspective.scaleytox" ) );
            addProp( PERSPECTIVE__SCALEXTOY , data( "perspective.scalextoy" ) );
            addProp( PERSPECTIVE__SCALEYTOY , data( "perspective.scaleytoy" ) );
            addProp( PERSPECTIVE__PERSPECTIVEX , data( "perspective.perspectivex" ) );
            addProp( PERSPECTIVE__PERSPECTIVEY , data( "perspective.perspectivey" ) );
            addProp( PERSPECTIVE__WEIGHT , data( "perspective.weight" ) );
            addProp( PERSPECTIVE__ORIGINX , data( "perspective.originx" ) );
            addProp( PERSPECTIVE__ORIGINY , data( "perspective.originy" ) );
            addProp( PERSPECTIVE__PERSPECTIVEON , data( "perspective.perspectiveon" ) );
            addProp( THREED__SPECULARAMOUNT , data( "3d.specularamount" ) );
            addProp( THREED__DIFFUSEAMOUNT , data( "3d.diffuseamount" ) );
            addProp( THREED__SHININESS , data( "3d.shininess" ) );
            addProp( THREED__EDGETHICKNESS , data( "3d.edgethickness" ) );
            addProp( THREED__EXTRUDEFORWARD , data( "3d.extrudeforward" ) );
            addProp( THREED__EXTRUDEBACKWARD , data( "3d.extrudebackward" ) );
            addProp( THREED__EXTRUDEPLANE , data( "3d.extrudeplane" ) );
            addProp( THREED__EXTRUSIONCOLOR , data( "3d.extrusioncolor", EscherPropertyMetaData.TYPE_RGB ) );
            addProp( THREED__CRMOD , data( "3d.crmod" ) );
            addProp( THREED__3DEFFECT , data( "3d.3deffect" ) );
            addProp( THREED__METALLIC , data( "3d.metallic" ) );
            addProp( THREED__USEEXTRUSIONCOLOR , data( "3d.useextrusioncolor", EscherPropertyMetaData.TYPE_RGB ) );
            addProp( THREED__LIGHTFACE , data( "3d.lightface" ) );
            addProp( THREEDSTYLE__YROTATIONANGLE , data( "3dstyle.yrotationangle" ) );
            addProp( THREEDSTYLE__XROTATIONANGLE , data( "3dstyle.xrotationangle" ) );
            addProp( THREEDSTYLE__ROTATIONAXISX , data( "3dstyle.rotationaxisx" ) );
            addProp( THREEDSTYLE__ROTATIONAXISY , data( "3dstyle.rotationaxisy" ) );
            addProp( THREEDSTYLE__ROTATIONAXISZ , data( "3dstyle.rotationaxisz" ) );
            addProp( THREEDSTYLE__ROTATIONANGLE , data( "3dstyle.rotationangle" ) );
            addProp( THREEDSTYLE__ROTATIONCENTERX , data( "3dstyle.rotationcenterx" ) );
            addProp( THREEDSTYLE__ROTATIONCENTERY , data( "3dstyle.rotationcentery" ) );
            addProp( THREEDSTYLE__ROTATIONCENTERZ , data( "3dstyle.rotationcenterz" ) );
            addProp( THREEDSTYLE__RENDERMODE , data( "3dstyle.rendermode" ) );
            addProp( THREEDSTYLE__TOLERANCE , data( "3dstyle.tolerance" ) );
            addProp( THREEDSTYLE__XVIEWPOINT , data( "3dstyle.xviewpoint" ) );
            addProp( THREEDSTYLE__YVIEWPOINT , data( "3dstyle.yviewpoint" ) );
            addProp( THREEDSTYLE__ZVIEWPOINT , data( "3dstyle.zviewpoint" ) );
            addProp( THREEDSTYLE__ORIGINX , data( "3dstyle.originx" ) );
            addProp( THREEDSTYLE__ORIGINY , data( "3dstyle.originy" ) );
            addProp( THREEDSTYLE__SKEWANGLE , data( "3dstyle.skewangle" ) );
            addProp( THREEDSTYLE__SKEWAMOUNT , data( "3dstyle.skewamount" ) );
            addProp( THREEDSTYLE__AMBIENTINTENSITY , data( "3dstyle.ambientintensity" ) );
            addProp( THREEDSTYLE__KEYX , data( "3dstyle.keyx" ) );
            addProp( THREEDSTYLE__KEYY , data( "3dstyle.keyy" ) );
            addProp( THREEDSTYLE__KEYZ , data( "3dstyle.keyz" ) );
            addProp( THREEDSTYLE__KEYINTENSITY , data( "3dstyle.keyintensity" ) );
            addProp( THREEDSTYLE__FILLX , data( "3dstyle.fillx" ) );
            addProp( THREEDSTYLE__FILLY , data( "3dstyle.filly" ) );
            addProp( THREEDSTYLE__FILLZ , data( "3dstyle.fillz" ) );
            addProp( THREEDSTYLE__FILLINTENSITY , data( "3dstyle.fillintensity" ) );
            addProp( THREEDSTYLE__CONSTRAINROTATION , data( "3dstyle.constrainrotation" ) );
            addProp( THREEDSTYLE__ROTATIONCENTERAUTO , data( "3dstyle.rotationcenterauto" ) );
            addProp( THREEDSTYLE__PARALLEL , data( "3dstyle.parallel" ) );
            addProp( THREEDSTYLE__KEYHARSH , data( "3dstyle.keyharsh" ) );
            addProp( THREEDSTYLE__FILLHARSH , data( "3dstyle.fillharsh" ) );
            addProp( SHAPE__MASTER , data( "shape.master" ) );
            addProp( SHAPE__CONNECTORSTYLE , data( "shape.connectorstyle" ) );
            addProp( SHAPE__BLACKANDWHITESETTINGS , data( "shape.blackandwhitesettings" ) );
            addProp( SHAPE__WMODEPUREBW , data( "shape.wmodepurebw" ) );
            addProp( SHAPE__WMODEBW , data( "shape.wmodebw" ) );
            addProp( SHAPE__OLEICON , data( "shape.oleicon" ) );
            addProp( SHAPE__PREFERRELATIVERESIZE , data( "shape.preferrelativeresize" ) );
            addProp( SHAPE__LOCKSHAPETYPE , data( "shape.lockshapetype" ) );
            addProp( SHAPE__DELETEATTACHEDOBJECT , data( "shape.deleteattachedobject" ) );
            addProp( SHAPE__BACKGROUNDSHAPE , data( "shape.backgroundshape" ) );
            addProp( CALLOUT__CALLOUTTYPE , data( "callout.callouttype" ) );
            addProp( CALLOUT__XYCALLOUTGAP , data( "callout.xycalloutgap" ) );
            addProp( CALLOUT__CALLOUTANGLE , data( "callout.calloutangle" ) );
            addProp( CALLOUT__CALLOUTDROPTYPE , data( "callout.calloutdroptype" ) );
            addProp( CALLOUT__CALLOUTDROPSPECIFIED , data( "callout.calloutdropspecified" ) );
            addProp( CALLOUT__CALLOUTLENGTHSPECIFIED , data( "callout.calloutlengthspecified" ) );
            addProp( CALLOUT__ISCALLOUT , data( "callout.iscallout" ) );
            addProp( CALLOUT__CALLOUTACCENTBAR , data( "callout.calloutaccentbar" ) );
            addProp( CALLOUT__CALLOUTTEXTBORDER , data( "callout.callouttextborder" ) );
            addProp( CALLOUT__CALLOUTMINUSX , data( "callout.calloutminusx" ) );
            addProp( CALLOUT__CALLOUTMINUSY , data( "callout.calloutminusy" ) );
            addProp( CALLOUT__DROPAUTO , data( "callout.dropauto" ) );
            addProp( CALLOUT__LENGTHSPECIFIED , data( "callout.lengthspecified" ) );
            addProp( GROUPSHAPE__SHAPENAME , data( "groupshape.shapename" ) );
            addProp( GROUPSHAPE__DESCRIPTION , data( "groupshape.description" ) );
            addProp( GROUPSHAPE__HYPERLINK , data( "groupshape.hyperlink" ) );
            addProp( GROUPSHAPE__WRAPPOLYGONVERTICES , data( "groupshape.wrappolygonvertices", EscherPropertyMetaData.TYPE_ARRAY ) );
            addProp( GROUPSHAPE__WRAPDISTLEFT , data( "groupshape.wrapdistleft" ) );
            addProp( GROUPSHAPE__WRAPDISTTOP , data( "groupshape.wrapdisttop" ) );
            addProp( GROUPSHAPE__WRAPDISTRIGHT , data( "groupshape.wrapdistright" ) );
            addProp( GROUPSHAPE__WRAPDISTBOTTOM , data( "groupshape.wrapdistbottom" ) );
            addProp( GROUPSHAPE__REGROUPID , data( "groupshape.regroupid" ) );
            addProp( GROUPSHAPE__EDITEDWRAP , data( "groupshape.editedwrap" ) );
            addProp( GROUPSHAPE__BEHINDDOCUMENT , data( "groupshape.behinddocument" ) );
            addProp( GROUPSHAPE__ONDBLCLICKNOTIFY , data( "groupshape.ondblclicknotify" ) );
            addProp( GROUPSHAPE__ISBUTTON , data( "groupshape.isbutton" ) );
            addProp( GROUPSHAPE__1DADJUSTMENT , data( "groupshape.1dadjustment" ) );
            addProp( GROUPSHAPE__HIDDEN , data( "groupshape.hidden" ) );
            addProp( GROUPSHAPE__PRINT , data( "groupshape.print", EscherPropertyMetaData.TYPE_BOOLEAN ) );
        }
    }

