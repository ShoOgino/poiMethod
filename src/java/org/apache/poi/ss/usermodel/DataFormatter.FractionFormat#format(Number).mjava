       public String format(Number num) {
          double wholePart = Math.floor(num.doubleValue());
          double decPart = num.doubleValue() - wholePart;
          if (wholePart * decPart == 0) {
             return "0";
          }
          String[] parts = str.split(" ");
          String[] fractParts;
          if (parts.length == 2) {
             fractParts = parts[1].split("/");
          } else {
             fractParts = str.split("/");
          }

          if (fractParts.length == 2) {
             double minVal = 1.0;
             double currDenom = Math.pow(10 ,  fractParts[1].length()) - 1d;
             double currNeum = 0;
             for (int i = (int)(Math.pow(10,  fractParts[1].length())- 1d); i > 0; i--) {
                for(int i2 = (int)(Math.pow(10,  fractParts[1].length())- 1d); i2 > 0; i2--){
                   if (minVal >=  Math.abs((double)i2/(double)i - decPart)) {
                      currDenom = i;
                      currNeum = i2;
                      minVal = Math.abs((double)i2/(double)i  - decPart);
                   }
                }
             }
             NumberFormat neumFormatter = new DecimalFormat(fractParts[0]);
             NumberFormat denomFormatter = new DecimalFormat(fractParts[1]);
             if (parts.length == 2) {
                NumberFormat wholeFormatter = new DecimalFormat(parts[0]);
                String result = wholeFormatter.format(wholePart) + " " + neumFormatter.format(currNeum) + "/" + denomFormatter.format(currDenom);
                return result;
             } else {
                String result = neumFormatter.format(currNeum + (currDenom * wholePart)) + "/" + denomFormatter.format(currDenom);
                return result;
             }
          } else {
             throw new IllegalArgumentException("Fraction must have 2 parts, found " + fractParts.length + " for fraction format " + str);
          }
       }

