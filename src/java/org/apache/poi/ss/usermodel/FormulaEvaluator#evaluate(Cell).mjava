    /**
     * If cell contains a formula, the formula is evaluated and returned,
     * else the CellValue simply copies the appropriate cell value from
     * the cell and also its cell type. This method should be preferred over
     * evaluateInCell() when the call should not modify the contents of the
     * original cell. 
     * @param cell
     */
    public CellValue evaluate(Cell cell) {
        CellValue retval = null;
        if (cell != null) {
            switch (cell.getCellType()) {
            case Cell.CELL_TYPE_BLANK:
                retval = new CellValue(Cell.CELL_TYPE_BLANK, _workbook.getCreationHelper());
                break;
            case Cell.CELL_TYPE_BOOLEAN:
                retval = new CellValue(Cell.CELL_TYPE_BOOLEAN, _workbook.getCreationHelper());
                retval.setBooleanValue(cell.getBooleanCellValue());
                break;
            case Cell.CELL_TYPE_ERROR:
                retval = new CellValue(Cell.CELL_TYPE_ERROR, _workbook.getCreationHelper());
                retval.setErrorValue(cell.getErrorCellValue());
                break;
            case Cell.CELL_TYPE_FORMULA:
                retval = getCellValueForEval(internalEvaluate(cell, _sheet, _workbook), _workbook.getCreationHelper());
                break;
            case Cell.CELL_TYPE_NUMERIC:
                retval = new CellValue(Cell.CELL_TYPE_NUMERIC, _workbook.getCreationHelper());
                retval.setNumberValue(cell.getNumericCellValue());
                break;
            case Cell.CELL_TYPE_STRING:
                retval = new CellValue(Cell.CELL_TYPE_STRING, _workbook.getCreationHelper());
                retval.setRichTextStringValue(cell.getRichStringCellValue());
                break;
            }
        }
        return retval;
    }

