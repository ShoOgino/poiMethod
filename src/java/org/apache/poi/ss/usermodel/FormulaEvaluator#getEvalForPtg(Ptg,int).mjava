    /**
     * returns an appropriate Eval impl instance for the Ptg. The Ptg must be
     * one of: Area3DPtg, AreaPtg, ReferencePtg, Ref3DPtg, IntPtg, NumberPtg,
     * StringPtg, BoolPtg <br/>special Note: OperationPtg subtypes cannot be
     * passed here!
     */
    private Eval getEvalForPtg(Ptg ptg, int sheetIndex) {
        if (ptg instanceof NamePtg) {
            // named ranges, macro functions
            NamePtg namePtg = (NamePtg) ptg;
            int numberOfNames = _workbook.getNumberOfNames();
            int nameIndex = namePtg.getIndex();
            if(nameIndex < 0 || nameIndex >= numberOfNames) {
                throw new RuntimeException("Bad name index (" + nameIndex
                        + "). Allowed range is (0.." + (numberOfNames-1) + ")");
            }
			if(_workbook instanceof org.apache.poi.hssf.usermodel.HSSFWorkbook) {
				NameRecord nameRecord = ((org.apache.poi.hssf.usermodel.HSSFWorkbook)_workbook).getNameRecord(nameIndex);
				if (nameRecord.isFunctionName()) {
					return new NameEval(nameRecord.getNameText());
				}
				if (nameRecord.hasFormula()) {
					return evaluateNameFormula(nameRecord.getNameDefinition(), sheetIndex);
				}

				throw new RuntimeException("Don't now how to evalate name '" + nameRecord.getNameText() + "'");
			}
			throw new RuntimeException("Don't now how to evalate name for XSSFWorkbook");
        }
        if (ptg instanceof NameXPtg) {
            NameXPtg nameXPtg = (NameXPtg) ptg;
            return new NameXEval(nameXPtg.getSheetRefIndex(), nameXPtg.getNameIndex());
        }

        if (ptg instanceof IntPtg) {
            return new NumberEval(((IntPtg)ptg).getValue());
        }
        if (ptg instanceof NumberPtg) {
            return new NumberEval(((NumberPtg)ptg).getValue());
        }
        if (ptg instanceof StringPtg) {
            return new StringEval(((StringPtg) ptg).getValue());
        }
        if (ptg instanceof BoolPtg) {
            return BoolEval.valueOf(((BoolPtg) ptg).getValue());
        }
        if (ptg instanceof ErrPtg) {
            return ErrorEval.valueOf(((ErrPtg) ptg).getErrorCode());
        }
        Sheet sheet = _workbook.getSheetAt(sheetIndex);
        if (ptg instanceof RefPtg) {
            return new LazyRefEval(((RefPtg) ptg), sheet, this);
        }
        if (ptg instanceof AreaPtg) {
            return new LazyAreaEval(((AreaPtg) ptg), sheet, this);
        }
        if (ptg instanceof Ref3DPtg) {
            Ref3DPtg refPtg = (Ref3DPtg) ptg;
            Sheet xsheet = getOtherSheet(refPtg.getExternSheetIndex());
            return new LazyRefEval(refPtg, xsheet, this);
        }
        if (ptg instanceof Area3DPtg) {
            Area3DPtg a3dp = (Area3DPtg) ptg;
            Sheet xsheet = getOtherSheet(a3dp.getExternSheetIndex());
            return new LazyAreaEval(a3dp, xsheet, this);
        }

        if (ptg instanceof UnknownPtg) {
            // POI uses UnknownPtg when the encoded Ptg array seems to be corrupted.
            // This seems to occur in very rare cases (e.g. unused name formulas in bug 44774, attachment 21790)
            // In any case, formulas are re-parsed before execution, so UnknownPtg should not get here 
            throw new RuntimeException("UnknownPtg not allowed");
        }
        
        throw new RuntimeException("Unexpected ptg class (" + ptg.getClass().getName() + ")");
    }

