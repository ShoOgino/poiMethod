	private static BigDecimal convertToBigDecimal(int exponent, long fracBits) {
		byte[] joob = {
				(byte) (fracBits >> 48), 	
				(byte) (fracBits >> 40), 	
				(byte) (fracBits >> 32), 	
				(byte) (fracBits >> 24), 	
				(byte) (fracBits >> 16), 	
				(byte) (fracBits >>  8), 	
				(byte) (fracBits >>  0), 	
		};
		
		BigInteger bigInt = new BigInteger(joob);
		int lastSigBitIndex = exponent-FRAC_BITS_WIDTH;
		if(lastSigBitIndex < 0) {
			BigInteger shifto = new BigInteger("1").shiftLeft(-lastSigBitIndex);
			int scale = 1 -(int) (lastSigBitIndex/LOG2_10); 
			BigDecimal bd1 = new BigDecimal(bigInt);
			BigDecimal bdShifto = new BigDecimal(shifto);
			return bd1.divide(bdShifto, scale, BigDecimal.ROUND_HALF_UP);
		}
		BigInteger sl = bigInt.shiftLeft(lastSigBitIndex);
		return new BigDecimal(sl);
	}

