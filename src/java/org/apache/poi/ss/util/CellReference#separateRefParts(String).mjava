    /**
     * Separates the sheet name, row, and columns from a cell reference string.
     * 
     * @param reference is a string that identifies a cell within the sheet or workbook
     * reference may not refer to a cell in an external workbook
     * reference may be absolute or relative.
     * @return String array of sheetName, column (in ALPHA-26 format), and row
     * output column or row elements will contain absolute reference markers if they
     * existed in the input reference.
     */
    private static CellRefParts separateRefParts(String reference) {
        int plingPos = reference.lastIndexOf(SHEET_NAME_DELIMITER);
        final String sheetName = parseSheetName(reference, plingPos);
        String row;
        String col;
        int start = plingPos+1;

        int length = reference.length();

        int loc = start;
        // skip initial dollars
        if (reference.charAt(loc)==ABSOLUTE_REFERENCE_MARKER) {
            loc++;
        }
        // step over column name chars until first digit (or dollars) for row number.
        for (; loc < length; loc++) {
            char ch = reference.charAt(loc);
            if (Character.isDigit(ch) || ch == ABSOLUTE_REFERENCE_MARKER) {
                break;
            }
        }

        col = reference.substring(start,loc).toUpperCase(Locale.ROOT);
        row = reference.substring(loc);
        CellRefParts cellRefParts = new CellRefParts(sheetName, row, col);
        return cellRefParts;
    }

