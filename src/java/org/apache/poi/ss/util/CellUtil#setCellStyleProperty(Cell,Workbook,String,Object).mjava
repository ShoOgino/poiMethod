	/**
	 * <p>This method attempts to find an existing CellStyle that matches the <code>cell</code>'s
	 * current style plus a single style property <code>propertyName</code> with value
	 * <code>propertyValue<code>.
	 * A new style is created if the workbook does not contain a matching style.</p>
	 * 
	 * <p>Modifies the cell style of <code>cell</code> without affecting other cells that use the
	 * same style.</p>
	 * 
	 * <p>If setting more than one cell style property on a cell, use
	 * {@link #setCellStyleProperties(org.apache.poi.ss.usermodel.Cell, Map)},
	 * which is faster and does not add unnecessary intermediate CellStyles to the workbook.</p>
	 * 
	 * @param workbook The workbook that is being worked with.
	 * @param propertyName The name of the property that is to be changed.
	 * @param propertyValue The value of the property that is to be changed.
	 * @param cell The cell that needs it's style changes
	 */
	public static void setCellStyleProperty(Cell cell, Workbook workbook, String propertyName,
			Object propertyValue) {
		if (cell.getSheet().getWorkbook() != workbook) {
			throw new IllegalArgumentException("Cannot set cell style property. Cell does not belong to workbook.");
		}

		Map<String, Object> values = Collections.singletonMap(propertyName, propertyValue);
		setCellStyleProperties(cell, values);
	}

