	/**
	 * @param sb initially contains just the significant digits
	 * @param pAbsExponent to be inserted (after "0.") at the start of the number
	 */
	private static void formatLessThanOne(StringBuffer sb, int pAbsExponent) {
		if (sb.charAt(0) == 0) {
			throw new IllegalArgumentException("First digit of significand should be non-zero");
		}
		if (pAbsExponent < 1) {
			throw new IllegalArgumentException("abs(exponent) must be positive");
		}
		
		int numberOfLeadingZeros = pAbsExponent-1;
		int absExponent = pAbsExponent; 
		int maxSigFigs = getNumberOfSignificantFiguresDisplayed(-absExponent); 
		
		boolean roundCausedCarry = performRound(sb, 0, maxSigFigs);
		int nRemainingSigFigs;
		if(roundCausedCarry) {
			absExponent--;
			numberOfLeadingZeros--;
			nRemainingSigFigs = 1;
			sb.setLength(0);
			sb.append("1");
		} else {
			nRemainingSigFigs = countSignifantDigits(sb, 0 + maxSigFigs);
			sb.setLength(nRemainingSigFigs);
		}
		
		int normalLength = 2 + numberOfLeadingZeros + nRemainingSigFigs; // 2 == "0.".length()
		
		if (needsScientificNotation(normalLength)) {
			if (sb.length()>1) {
				sb.insert(1, '.');
			}
			sb.append('E');
			sb.append('-');
			appendExp(sb, absExponent);
		} else { 
			sb.insert(0, "0.");
			for(int i=numberOfLeadingZeros; i>0; i--) {
				sb.insert(2, '0');
			}
		}
	}

