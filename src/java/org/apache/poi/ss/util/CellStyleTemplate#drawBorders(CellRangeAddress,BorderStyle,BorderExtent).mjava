    /**
     * Draws a group of cell borders for a cell range. The borders are not
     * applied to the cells at this time, just the template is drawn. To apply
     * the drawn borders to a sheet, use {@link #applyBorders}.
     * 
     * @param range
     *            - {@link CellRangeAddress} range of cells on which borders are
     *            drawn.
     * @param borderStyle
     *            - Type of border to draw. {@link BorderStyle}.
     * @param extent
     *            - {@link BorderExtent} of the borders to be applied.
     */
    public void drawBorders(CellRangeAddress range, BorderStyle borderStyle,
            BorderExtent extent) {
        switch (extent) {
        case NONE:
            removeBorders(range);
            break;
        case ALL:
            drawHorizontalBorders(range, borderStyle, BorderExtent.ALL);
            drawVerticalBorders(range, borderStyle, BorderExtent.ALL);
            break;
        case INSIDE:
            drawHorizontalBorders(range, borderStyle, BorderExtent.INSIDE);
            drawVerticalBorders(range, borderStyle, BorderExtent.INSIDE);
            break;
        case OUTSIDE:
            drawOutsideBorders(range, borderStyle, BorderExtent.ALL);
            break;
        case TOP:
            drawTopBorder(range, borderStyle);
            break;
        case BOTTOM:
            drawBottomBorder(range, borderStyle);
            break;
        case LEFT:
            drawLeftBorder(range, borderStyle);
            break;
        case RIGHT:
            drawRightBorder(range, borderStyle);
            break;
        case HORIZONTAL:
            drawHorizontalBorders(range, borderStyle, BorderExtent.ALL);
            break;
        case INSIDE_HORIZONTAL:
            drawHorizontalBorders(range, borderStyle, BorderExtent.INSIDE);
            break;
        case OUTSIDE_HORIZONTAL:
            drawOutsideBorders(range, borderStyle, BorderExtent.HORIZONTAL);
            break;
        case VERTICAL:
            drawVerticalBorders(range, borderStyle, BorderExtent.ALL);
            break;
        case INSIDE_VERTICAL:
            drawVerticalBorders(range, borderStyle, BorderExtent.INSIDE);
            break;
        case OUTSIDE_VERTICAL:
            drawOutsideBorders(range, borderStyle, BorderExtent.VERTICAL);
            break;
        }
    }

