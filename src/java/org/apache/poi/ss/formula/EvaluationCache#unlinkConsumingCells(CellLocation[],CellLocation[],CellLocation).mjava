	private void unlinkConsumingCells(CellLocation[] prevUsedCells, CellLocation[] usedCells,
			CellLocation cellLoc) {
		if (prevUsedCells == null) {
			return;
		}
		int nPrevUsed = prevUsedCells.length;
		if (nPrevUsed < 1) {
			return;
		}
		int nUsed = usedCells.length;
		Set usedSet;
		if (nUsed < 1) {
			usedSet = Collections.EMPTY_SET;
		} else {
			usedSet = new HashSet(nUsed * 3 / 2);
			for (int i = 0; i < nUsed; i++) {
				usedSet.add(usedCells[i]);
			}
		}
		for (int i = 0; i < nPrevUsed; i++) {
			CellLocation prevUsed = prevUsedCells[i];
			if (!usedSet.contains(prevUsed)) {
				// previously was used by cellLoc, but not anymore
				getEntry(prevUsed).clearConsumingCell(cellLoc);
				if (_evaluationListener != null) {
					//TODO _evaluationListener.onUnconsume(prevUsed.getSheetIndex(), etc)
				}
			}
		}
		
	}

