	/**
	 * Calls formulaCell.setFormulaResult(null, null) recursively all the way up the tree of 
	 * dependencies. Calls usedCell.clearConsumingCell(fc) for each child of a cell that is
	 * cleared along the way.
	 * @param formulaCells
	 */
	private void recurseClearCachedFormulaResults(CellLocation[] formulaCells, int depth) {
		int nextDepth = depth+1;
		for (int i = 0; i < formulaCells.length; i++) {
			CellLocation fc = formulaCells[i];
			CellCacheEntry formulaCell = getEntry(fc);
			CellLocation[] usedCells = formulaCell.getUsedCells();
			if (usedCells != null) {
				for (int j = 0; j < usedCells.length; j++) {
					CellCacheEntry usedCell = getEntry(usedCells[j]);
					usedCell.clearConsumingCell(fc);
				}
			}
			if (_evaluationListener != null) {
				ValueEval value = formulaCell.getValue();
				_evaluationListener.onClearDependentCachedValue(fc.getSheetIndex(), fc.getRowIndex(), fc.getColumnIndex(), value, nextDepth);
			}
			formulaCell.setFormulaResult(null, null);
			recurseClearCachedFormulaResults(formulaCell.getConsumingCells(), nextDepth);
		}
	}

