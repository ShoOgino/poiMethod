	/**
	 * @return never <code>null</code>, never {@link BlankEval}
	 */
	private ValueEval internalEvaluate(Cell srcCell, CellLocation cellLoc, EvaluationTracker tracker) {
		int sheetIndex = cellLoc.getSheetIndex();
		int rowIndex = cellLoc.getRowIndex();
		int columnIndex = cellLoc.getColumnIndex();

		ValueEval result;

		result = tracker.startEvaluate(cellLoc);
		IEvaluationListener evalListener = _evaluationListener;
		if (result != null) {
			if(evalListener != null) {
				evalListener.onCacheHit(sheetIndex, rowIndex, columnIndex, result);
			}
			return result;
		}

		boolean isPlainFormulaCell = false;
		try {
			result = getValueFromNonFormulaCell(srcCell);
			if (result != null) {
				isPlainFormulaCell = true;
				if(evalListener != null) {
					evalListener.onReadPlainValue(sheetIndex, rowIndex, columnIndex, result);
				}
			} else {
				isPlainFormulaCell = false;
				Ptg[] ptgs = _workbook.getFormulaTokens(srcCell);
				if(evalListener == null) {
					result = evaluateCell(sheetIndex, rowIndex, (short)columnIndex, ptgs, tracker);
				} else {
					evalListener.onStartEvaluate(sheetIndex, rowIndex, columnIndex, ptgs);
					result = evaluateCell(sheetIndex, rowIndex, (short)columnIndex, ptgs, tracker);
					evalListener.onEndEvaluate(sheetIndex, rowIndex, columnIndex, result);
				}
			}
		} finally {
			tracker.endEvaluate(cellLoc, result, isPlainFormulaCell);
		}
		if (isDebugLogEnabled()) {
			String sheetName = getSheetName(sheetIndex);
			CellReference cr = new CellReference(rowIndex, columnIndex);
			logDebug("Evaluated " + sheetName + "!" + cr.formatAsString() + " to " + result.toString());
		}
		return result;
	}

