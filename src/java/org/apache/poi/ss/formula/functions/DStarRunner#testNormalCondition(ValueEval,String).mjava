    /**
     * Test a value against a simple (< > <= >= = starts-with) condition string.
     *
     * @param value The value to check.
     * @param condition The condition to check for.
     * @return Whether the condition holds.
     * @throws EvaluationException If comparison operator and operands don't match.
     */
    private static boolean testNormalCondition(ValueEval value, String condition)
            throws EvaluationException {
        if(condition.startsWith("<")) { // It's a </<= condition.
            String number = condition.substring(1);
            if(number.startsWith("=")) {
                number = number.substring(1);
                return testNumericCondition(value, operator.smallerEqualThan, number);
            } else {
                return testNumericCondition(value, operator.smallerThan, number);
            }
        }
        else if(condition.startsWith(">")) { // It's a >/>= condition.
            String number = condition.substring(1);
            if(number.startsWith("=")) {
                number = number.substring(1);
                return testNumericCondition(value, operator.largerEqualThan, number);
            } else {
                return testNumericCondition(value, operator.largerThan, number);
            }
        }
        else if(condition.startsWith("=")) { // It's a = condition.
            String stringOrNumber = condition.substring(1);
            // Distinguish between string and number.
            boolean itsANumber = false;
            try {
                Integer.parseInt(stringOrNumber);
                itsANumber = true;
            } catch (NumberFormatException e) { // It's not an int.
                try {
                    Double.parseDouble(stringOrNumber);
                    itsANumber = true;
                } catch (NumberFormatException e2) { // It's a string.
                    itsANumber = false;
                }
            }
            if(itsANumber) {
                return testNumericCondition(value, operator.equal, stringOrNumber);
            } else { // It's a string.
                String valueString = getStringFromValueEval(value);
                return stringOrNumber.equals(valueString);
            }
        } else { // It's a text starts-with condition.
            String valueString = getStringFromValueEval(value);
            return valueString.startsWith(condition);
        }
    }

