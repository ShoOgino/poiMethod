    /**
     * Returns the first column index that matches the given name. The name can either be
     * a string or an integer, when it's an integer, then the respective column
     * (1 based index) is returned.
     * @param nameValueEval
     * @param db
     * @return the first column index that matches the given name (or int)
     * @throws EvaluationException
     */
    @SuppressWarnings("unused")
    private static int getColumnForTag(ValueEval nameValueEval, TwoDEval db)
            throws EvaluationException {
        int resultColumn = -1;

        // Numbers as column indicator are allowed, check that.
        if(nameValueEval instanceof NumericValueEval) {
            double doubleResultColumn = ((NumericValueEval)nameValueEval).getNumberValue();
            resultColumn = (int)doubleResultColumn;
            // Floating comparisions are usually not possible, but should work for 0.0.
            if(doubleResultColumn - resultColumn != 0.0)
                throw new EvaluationException(ErrorEval.VALUE_INVALID);
            resultColumn -= 1; // Numbers are 1-based not 0-based.
        } else {
            resultColumn = getColumnForName(nameValueEval, db);
        }
        return resultColumn;
    }

