    /**
     *
     * @param ranges  criteria ranges, each range must be of the same dimensions as <code>aeSum</code>
     * @param predicates  array of predicates, a predicate for each value in <code>ranges</code>
     * @param aeSum  the range to sum
     *
     * @return the computed value
     */
    private static double sumMatchingCells(AreaEval[] ranges, I_MatchPredicate[] predicates, AreaEval aeSum) {
        int height = aeSum.getHeight();
        int width = aeSum.getWidth();

        double result = 0.0;
        for (int r = 0; r < height; r++) {
            for (int c = 0; c < width; c++) {

                boolean matches = true;
                for(int i = 0; i < ranges.length; i++){
                    AreaEval aeRange = ranges[i];
                    I_MatchPredicate mp = predicates[i];

                    if (!mp.matches(aeRange.getRelativeValue(r, c))) {
                        matches = false;
                        break;
                    }

                }

                if(matches) { // sum only if all of the corresponding criteria specified are true for that cell.
                    result += accumulate(aeSum, r, c);
                }
            }
        }
        return result;
    }

