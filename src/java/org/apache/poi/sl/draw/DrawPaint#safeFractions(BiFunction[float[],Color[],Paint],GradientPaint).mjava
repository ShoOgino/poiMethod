    private Paint safeFractions(BiFunction<float[],Color[],Paint> init, GradientPaint fill) {
        float[] fractions = fill.getGradientFractions();
        final ColorStyle[] styles = fill.getGradientColors();

        // need to remap the fractions, because Java doesn't like repeating fraction values
        Map<Float,Color> m = new TreeMap<>();
        for (int i = 0; i<fractions.length; i++) {
            // if fc is null, use transparent color to get color of background
            m.put(fractions[i], (styles[i] == null ? TRANSPARENT : applyColorTransform(styles[i])));
        }

        final Color[] colors = new Color[m.size()];
        if (fractions.length != m.size()) {
            fractions = new float[m.size()];
        }

        int i=0;
        for (Map.Entry<Float,Color> me : m.entrySet()) {
            fractions[i] = me.getKey();
            colors[i] = me.getValue();
            i++;
        }

        return init.apply(fractions, colors);
    }

