    /**
     * Map text charset depending on font family.
     * Currently this only maps for wingdings font (into unicode private use area)
     *
     * @param text the raw text
     * @param fontFamily the font family
     * @return AttributedString with mapped codepoints
     *
     * @see <a href="http://stackoverflow.com/questions/8692095">Drawing exotic fonts in a java applet</a>
     * @see StringUtil#mapMsCodepointString(String)
     */
    protected String mapFontCharset(String text, String fontFamily) {
        // TODO: find a real charset mapping solution instead of hard coding for Wingdings
        String attStr = text;
        if ("Wingdings".equalsIgnoreCase(fontFamily)) {
            // wingdings doesn't contain high-surrogates, so chars are ok
            boolean changed = false;
            char chrs[] = attStr.toCharArray();
            for (int i=0; i<chrs.length; i++) {
                // only change valid chars
                if ((0x20 <= chrs[i] && chrs[i] <= 0x7f) ||
                    (0xa0 <= chrs[i] && chrs[i] <= 0xff)) {
                    chrs[i] |= 0xf000;
                    changed = true;
                }
            }

            if (changed) {
                attStr = new String(chrs);
            }
        }
        return attStr;
    }

