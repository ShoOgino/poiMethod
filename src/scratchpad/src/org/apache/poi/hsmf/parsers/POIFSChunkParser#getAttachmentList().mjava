	/**
	 *
	 * @return a map containing attachment name (String) and data (ByteArrayInputStream)
	 */
	public Map getAttachmentList() {
		Map attachments = new HashMap();
		List attachmentList = new ArrayList();
		for(Iterator i = directoryMap.keySet().iterator(); i.hasNext();) {
			String entry = (String)i.next();

			if(entry.startsWith(AttachmentChunks.namePrefix)) {
				String attachmentIdString = entry.replace(AttachmentChunks.namePrefix, "");
				try {
					int attachmentId = Integer.parseInt(attachmentIdString);
					attachmentList.add(directoryMap.get(entry));
				} catch (NumberFormatException nfe) {
					System.err.println("Invalid attachment id");
				}
			}
		}
		for (Iterator iterator = attachmentList.iterator(); iterator.hasNext();) {
			HashMap AttachmentChunkMap = (HashMap) iterator.next();
			AttachmentChunks attachmentChunks = this.identifyAttachmentChunks(AttachmentChunkMap);
			try {
				Chunk fileName = this.getDocumentNode(AttachmentChunkMap, attachmentChunks.attachLongFileName);
				Chunk content = this.getDocumentNode(AttachmentChunkMap, attachmentChunks.attachData);
				attachments.put(fileName.toString(), new ByteArrayInputStream(content.getValueByteArray().toByteArray()));
			} catch (ChunkNotFoundException e) {
				System.err.println("Invalid attachment chunk");
			}
		}
		return attachments;
	}

