   /**
    * Creates a chunk, and gives it to its parent group 
    */
   protected static void process(DocumentNode entry, ChunkGroup grouping) {
      String entryName = entry.getName();
      
      if(entryName.length() < 9) {
         // Name in the wrong format
         return;
      }
      if(entryName.indexOf('_') == -1) {
         // Name in the wrong format
         return;
      }
      
      // Split it into its parts
      int splitAt = entryName.lastIndexOf('_');
      if(splitAt == -1 || splitAt > (entryName.length()-8)) {
         throw new IllegalArgumentException("Invalid chunk name " + entryName);
      }
      
      // Now try to turn it into id + type
      String namePrefix = entryName.substring(0, splitAt+1);
      String ids = entryName.substring(splitAt+1);
      try {
         int chunkId = Integer.parseInt(ids.substring(0, 4), 16);
         int type    = Integer.parseInt(ids.substring(4, 8), 16);
         
         Chunk chunk = null;
         
         // Special cases based on the ID
         switch(chunkId) {
         case Chunks.SUBMISSION_ID_DATE:
            chunk = new MessageSubmissionChunk(namePrefix, chunkId, type);
            break;
         default:
            // Nothing special about this ID
            // So, do the usual thing which is by type
            switch(type) {
            case Types.BINARY:
               chunk = new ByteChunk(namePrefix, chunkId, type);
               break;
            case Types.ASCII_STRING:
            case Types.UNICODE_STRING:
               chunk = new StringChunk(namePrefix, chunkId, type);
               break;
            }
         }
         
         if(chunk != null) {
            try {
               DocumentInputStream inp = new DocumentInputStream(entry);
               chunk.readValue(inp);
               grouping.record(chunk);
            } catch(IOException e) {
               System.err.println("Error reading from part " + entry.getName() + " - " + e.toString());
            }
         }
      } catch(NumberFormatException e) {
         // Name in the wrong format
         return;
      }
   }

