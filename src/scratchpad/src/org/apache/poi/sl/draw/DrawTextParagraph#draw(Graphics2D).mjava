    public void draw(Graphics2D graphics){
        if (lines.isEmpty()) return;
        
        double leftInset = insets.left;
        double rightInset = insets.right;
        double penY = y;

        double leftMargin = paragraph.getLeftMargin();
        boolean firstLine = true;
        double indent = paragraph.getIndent();

        //The vertical line spacing
        double spacing = paragraph.getLineSpacing();
        for(DrawTextFragment line : lines){
            double penX = x + leftMargin;

            if(firstLine) {
                if (!isEmptyParagraph()) {
                    bullet = getBullet(graphics, line.getAttributedString().getIterator());
                }
                
                if(bullet != null){
                    if (indent < 0) {
                        // a negative value means "Hanging" indentation and
                        // indicates the position of the actual bullet character.
                        // (the bullet is shifted to right relative to the text)
                        bullet.setPosition(penX + indent, penY);
                    } else if(indent > 0){
                        // a positive value means the "First Line" indentation:
                        // the first line is indented and other lines start at the bullet ofset
                        bullet.setPosition(penX, penY);
                        penX += indent;
                    } else {
                        // a zero indent means that the bullet and text have the same offset
                        bullet.setPosition(penX, penY);

                        // don't let text overlay the bullet and advance by the bullet width
                        penX += bullet.getLayout().getAdvance() + 1;
                    }

                    bullet.draw(graphics);
                } else {
                    penX += indent;
                }
            }

            Rectangle2D anchor = DrawShape.getAnchor(graphics, paragraph.getParentShape());

            switch (paragraph.getTextAlign()) {
                case CENTER:
                    penX += (anchor.getWidth() - leftMargin - line.getWidth() - leftInset - rightInset) / 2;
                    break;
                case RIGHT:
                    penX += (anchor.getWidth() - line.getWidth() - leftInset - rightInset);
                    break;
                default:
                    break;
            }

            line.setPosition(penX, penY);
            line.draw(graphics);

            if(spacing > 0) {
                // If linespacing >= 0, then linespacing is a percentage of normal line height.
                penY += spacing*0.01* line.getHeight();
            } else {
                // positive value means absolute spacing in points
                penY += -spacing;
            }

            firstLine = false;
        }

        y = penY - y;
    }

