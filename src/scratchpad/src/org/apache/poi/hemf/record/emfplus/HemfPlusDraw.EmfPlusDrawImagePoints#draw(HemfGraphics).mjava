        @Override
        public void draw(HemfGraphics ctx) {
            HemfDrawProperties prop = ctx.getProperties();

            ctx.applyObjectTableEntry(imageAttributesID);
            ctx.applyObjectTableEntry(getObjectId());

            AffineTransform txSaved = ctx.getTransform(), tx = new AffineTransform(txSaved);
            try {
                tx.concatenate(trans);
                ctx.setTransform(tx);

                EmfPlusObject imgObj = (EmfPlusObject)ctx.getObjectTableEntry(getObjectId());
                EmfPlusImage img = imgObj.getObjectData();
                Rectangle2D srcBounds = img.getBounds(imgObj.getContinuedObject());
                BufferedImage bi = prop.getEmfPlusImage();

                prop.setRasterOp(HwmfTernaryRasterOp.SRCCOPY);
                prop.setBkMode(HwmfBkMode.TRANSPARENT);

                // the buffered image might be rescaled, so we need to calculate a new src rect to take
                // the image data from
                AffineTransform srcTx = new AffineTransform();
                srcTx.translate(-srcBounds.getX(), srcBounds.getY());
                srcTx.scale(bi.getWidth()/srcBounds.getWidth(), bi.getHeight()/srcBounds.getHeight());
                srcTx.translate(bi.getMinX(), bi.getMinY());

                Rectangle2D biRect = srcTx.createTransformedShape(srcRect).getBounds2D();

                // TODO: handle srcUnit
                Rectangle2D destRect = new Rectangle2D.Double(0, 0, biRect.getWidth(), biRect.getHeight());
                ctx.drawImage(bi, srcRect, destRect);
            } finally {
                ctx.setTransform(txSaved);
            }
        }

