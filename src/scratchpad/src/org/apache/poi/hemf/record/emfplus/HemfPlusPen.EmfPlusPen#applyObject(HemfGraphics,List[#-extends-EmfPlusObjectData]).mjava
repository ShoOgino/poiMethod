        @Override
        public void applyObject(HemfGraphics ctx, List<? extends EmfPlusObjectData> continuedObjectData) {
            final HemfDrawProperties prop = ctx.getProperties();
            // TOOD:
            // - set width according unit type
            // - provide logic for different start and end cap
            // - provide standard caps like diamondd
            // - support custom caps

            // workaround for too wide pens ... just arbitrary reduce high values ...
            prop.setPenWidth(penWidth > 20 ? 1 : penWidth);
            prop.setPenStyle(new HwmfPenStyle(){
                @Override
                public HwmfLineCap getLineCap() {
                    // ignore endCap for now
                    switch(startCap) {
                        default:
                        case FLAT:
                            return HwmfLineCap.FLAT;
                        case ROUND:
                            return HwmfLineCap.ROUND;
                        case SQUARE:
                            return HwmfLineCap.SQUARE;
                    }
                }

                @Override
                public HwmfLineJoin getLineJoin() {
                    switch (join) {
                        default:
                        case BEVEL:
                            return HwmfLineJoin.BEVEL;
                        case ROUND:
                            return HwmfLineJoin.ROUND;
                        case MITER_CLIPPED:
                        case MITER:
                            return HwmfLineJoin.MITER;
                    }
                }

                @Override
                public HwmfLineDash getLineDash() {
                    return dashedLineData == null ? HwmfLineDash.SOLID : HwmfLineDash.USERSTYLE;
                }

                @Override
                public float[] getLineDashes() {
                    return dashedLineData;
                }

                @Override
                public boolean isAlternateDash() {
                    return (getLineDash() != HwmfLineDash.SOLID && dashOffset != null && dashOffset == 0);
                }

                @Override
                public boolean isGeometric() {
                    return (unitType == EmfPlusUnitType.World || unitType == EmfPlusUnitType.Display);
                }
            });
        }

