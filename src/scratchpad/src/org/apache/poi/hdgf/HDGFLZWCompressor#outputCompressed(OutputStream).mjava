/**
 * Output the compressed representation for the bytes
 *  found in rawCode
 */
private void outputCompressed(OutputStream res) throws IOException {
	// It's not worth compressing only 1 or two bytes,
	//  due to the overheads
	// So if asked, just output uncompressed
	if(rawCodeLen < 3) {
		for(int i=0; i<rawCodeLen; i++) {
			outputUncompressed(rawCode[i], res);
		}
		return;
	}
	
	// Grab where the data lives
	int codesAt = findRawCodeInBuffer();
   codesAt -= 18;
	if(codesAt < 0) {
	   codesAt += 4096;
	}

	// Increment the mask bit count, we've done another code
	maskBitsSet++;
	
	// Add the length+code to the buffer
	// (The position is the first 12 bits, the
	//  length is the last 4 bits)
	int bp1 = (codesAt & 255);
	int bp2 = (rawCodeLen-3) + ((codesAt-bp1) >> 4);
	buffer[bufferLen] = HDGFLZW.fromInt(bp1);
	bufferLen++;
   buffer[bufferLen] = HDGFLZW.fromInt(bp2);
   bufferLen++;
   
   // Copy the data to the dictionary in the new place
   for(int i=0; i<rawCodeLen; i++) {
      dict[(posOut&4095)] = rawCode[i];
      posOut++; 
   }

	// If we're now at 8 codes, output
	if(maskBitsSet == 8) {
		output8Codes(res);
	}
}

