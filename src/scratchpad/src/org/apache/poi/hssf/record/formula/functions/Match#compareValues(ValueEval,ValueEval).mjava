	/**
	 * This method can only compare a pair of <tt>NumericValueEval</tt>s, <tt>StringEval</tt>s
	 * or <tt>BoolEval</tt>s
	 * @return negative for a&lt;b, positive for a&gt;b and 0 for a = b
	 */
	private static int compareValues(ValueEval a, ValueEval b) {
		if (a instanceof StringEval) {
			StringEval sa = (StringEval) a;
			StringEval sb = (StringEval) b;
			return sa.getStringValue().compareToIgnoreCase(sb.getStringValue());
		}
		if (a instanceof NumericValueEval) {
			NumericValueEval na = (NumericValueEval) a;
			NumericValueEval nb = (NumericValueEval) b;
			return Double.compare(na.getNumberValue(), nb.getNumberValue());
		}
		if (a instanceof BoolEval) {
			boolean ba = ((BoolEval) a).getBooleanValue();
			boolean bb = ((BoolEval) b).getBooleanValue();
			if(ba == bb) {
				return 0;
			}
			// TRUE > FALSE
			if(ba) {
				return +1;
			}
			return -1;
		}
		throw new RuntimeException("bad eval type (" + a.getClass().getName() + ")");
	}

