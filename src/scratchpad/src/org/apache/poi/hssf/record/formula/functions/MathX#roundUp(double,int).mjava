    /**
     * Returns a value rounded-up to p digits after decimal.
     * If p is negative, then the number is rounded to
     * places to the left of the decimal point. eg. 
     * 10.23 rounded to -1 will give: 20. If p is zero,
     * the returned value is rounded to the nearest integral
     * value.
     * <p>If n is negative, the resulting value is obtained
     * as the round-up value of absolute value of n multiplied
     * by the sign value of n (@see MathX.sign(double d)). 
     * Thus, -0.2 rounded-up to p=0 will give -1 not 0.
     * <p>If n is NaN, returned value is NaN.
     * @param n
     * @param p
     * @return
     */
    public static double roundUp(double n, int p) {
        double retval;
        
        if (Double.isNaN(n) || Double.isInfinite(n)) {
            retval = Double.NaN;
        }
        else {
            if (p != 0) {
                double temp = Math.pow(10, p);
                double nat = Math.abs(n*temp);
                
                retval = sign(n) * 
                    ((nat == (long) nat)
                            ? nat / temp
                            : Math.round(nat + 0.5) / temp);
            }
            else {
                double na = Math.abs(n);
                retval = sign(n) * 
                    ((na == (long) na)
                        ? na
                        : (long) na + 1);
            }
        }
        
        return retval;
    }

