	/**
	 * Gets the table that starts with paragraph. In a Word file, a table
	 * consists of a group of paragraphs with certain flags set.
	 *
	 * @param paragraph
	 *            The paragraph that is the first paragraph in the table.
	 * @return The table that starts with paragraph
	 */
	public Table getTable(Paragraph paragraph) {
		if (!paragraph.isInTable()) {
			throw new IllegalArgumentException("This paragraph doesn't belong to a table");
		}

		Range r = paragraph;
		if (r._parent.get() != this) {
			throw new IllegalArgumentException("This paragraph is not a child of this range");
		}

		r.initAll();
		int tableLevel = paragraph.getTableLevel();
		int tableEndInclusive = r._parEnd ;

        if ( r._parStart != 0 )
        {
            Paragraph previous = new Paragraph(
                    _paragraphs.get( r._parStart - 1 ), this );
            if ( previous.isInTable() && //
                    previous.getTableLevel() == tableLevel //
                    && previous._sectionEnd >= r._sectionStart )
            {
                throw new IllegalArgumentException(
                        "This paragraph is not the first one in the table" );
            }
        }

        final Range overallrange = getDocument() instanceof HWPFDocument ? ((HWPFDocument) getDocument())
                .getOverallRange() : getDocument().getRange();
        int limit = _paragraphs.size();
        for ( ; tableEndInclusive < limit - 1; tableEndInclusive++ )
        {
            Paragraph next = new Paragraph( _paragraphs.get( tableEndInclusive + 1 ),
                    overallrange );
            if ( !next.isInTable() || next.getTableLevel() < tableLevel )
                break;
        }

        initAll();
        if ( tableEndInclusive + 1 > _parEnd )
        {
            throw new ArrayIndexOutOfBoundsException(
                    "The table's bounds fall outside of this Range" );
        }
        if ( tableEndInclusive < 0 )
        {
            throw new ArrayIndexOutOfBoundsException(
                    "The table's end is negative, which isn't allowed!" );
        }
        return new Table( r._parStart, tableEndInclusive + 1, r._doc.getRange(),
                paragraph.getTableLevel() );
    }

