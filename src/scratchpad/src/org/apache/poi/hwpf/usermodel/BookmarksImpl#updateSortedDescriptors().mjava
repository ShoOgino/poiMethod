    private void updateSortedDescriptors()
    {
        if ( sortedDescriptors != null )
            return;

        Map<Integer, List<GenericPropertyNode>> result = new HashMap<Integer, List<GenericPropertyNode>>();
        for ( int b = 0; b < bookmarksTables.getDescriptorsFirstCount(); b++ )
        {
            GenericPropertyNode property = bookmarksTables
                    .getDescriptorFirst( b );
            Integer positionKey = Integer.valueOf( property.getStart() );
            List<GenericPropertyNode> atPositionList = result.get( positionKey );
            if ( atPositionList == null )
            {
                atPositionList = new LinkedList<GenericPropertyNode>();
                result.put( positionKey, atPositionList );
            }
            atPositionList.add( property );
        }

        int counter = 0;
        int[] indices = new int[result.size()];
        for ( Map.Entry<Integer, List<GenericPropertyNode>> entry : result
                .entrySet() )
        {
            indices[counter++] = entry.getKey().intValue();
            List<GenericPropertyNode> updated = new ArrayList<GenericPropertyNode>(
                    entry.getValue() );
            Collections.sort( updated, PropertyNode.EndComparator.instance );
            entry.setValue( updated );
        }

        this.sortedDescriptors = result;
        this.sortedStartPositions = indices;
    }

