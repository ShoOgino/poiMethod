    public void fillFields( final byte[] std, final int startOffset )
    {
        int offset = startOffset;

        this._base = new FFDataBase( std, offset );
        offset += FFDataBase.getSize();

        this._xstzName = new Xstz( std, offset );
        offset += this._xstzName.getSize();

        if ( _base.getIType() == FFDataBase.ITYPE_TEXT )
        {
            _xstzTextDef = new Xstz( std, offset );
            offset += this._xstzTextDef.getSize();
        }
        else
        {
            this._xstzTextDef = null;
        }

        if ( _base.getIType() == FFDataBase.ITYPE_CHCK
                || _base.getIType() == FFDataBase.ITYPE_DROP )
        {
            this._wDef = Integer
                    .valueOf( LittleEndian.getUShort( std, offset ) );
            offset += LittleEndian.SHORT_SIZE;
        }
        else
        {
            this._wDef = null;
        }

        _xstzTextFormat = new Xstz( std, offset );
        offset += this._xstzTextFormat.getSize();

        _xstzHelpText = new Xstz( std, offset );
        offset += this._xstzHelpText.getSize();

        _xstzStatText = new Xstz( std, offset );
        offset += this._xstzStatText.getSize();

        _xstzEntryMcr = new Xstz( std, offset );
        offset += this._xstzEntryMcr.getSize();

        _xstzExitMcr = new Xstz( std, offset );
        offset += this._xstzExitMcr.getSize();

        if ( _base.getIType() == FFDataBase.ITYPE_DROP )
        {
            _hsttbDropList = new Sttb( std, offset );
            offset += _hsttbDropList.getSize();
        }
    }

