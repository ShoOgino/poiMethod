  public OldSectionTable(byte[] documentStream, int offset,
                      int size, int fcMin,
                      TextPieceTable tpt)
  {
    PlexOfCps sedPlex = new PlexOfCps(documentStream, offset, size, 12);
    CharIsBytes charConv = new CharIsBytes(tpt);

    int length = sedPlex.length();

    for (int x = 0; x < length; x++)
    {
      GenericPropertyNode node = sedPlex.getProperty(x);
      SectionDescriptor sed = new SectionDescriptor(node.getBytes(), 0);

      int fileOffset = sed.getFc();
      int startAt = node.getStart();
      int endAt = node.getEnd();

      SEPX sepx;
      // check for the optimization
      if (fileOffset == 0xffffffff)
      {
        sepx = new SEPX(sed, startAt, endAt, charConv, new byte[0]);
      }
      else
      {
        // The first short at the offset is the size of the grpprl.
        int sepxSize = LittleEndian.getShort(documentStream, fileOffset);
        // Because we don't properly know about all the details of the old
        //  section properties, and we're trying to decode them as if they
        //  were the new ones, we sometimes "need" more data than we have.
        // As a workaround, have a few extra 0 bytes on the end!
        byte[] buf = new byte[sepxSize+2];
        fileOffset += LittleEndian.SHORT_SIZE;
        System.arraycopy(documentStream, fileOffset, buf, 0, buf.length);
        sepx = new SEPX(sed, startAt, endAt, charConv, buf);
      }

      if (tpt.isIndexInTable( sepx.getStartBytes(), sepx.getEndBytes() ))
        _sections.add(sepx);
    }
    Collections.sort( _sections, PropertyNode.StartComparator.instance );
  }

