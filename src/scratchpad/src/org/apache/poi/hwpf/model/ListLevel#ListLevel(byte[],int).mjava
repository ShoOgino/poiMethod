  public ListLevel(byte[] buf, int offset)
  {
    _iStartAt = LittleEndian.getInt(buf, offset);
    offset += LittleEndian.INT_SIZE;
    _nfc = buf[offset++];
    _info = buf[offset++];

    _rgbxchNums = new byte[9];
    for (int x = 0; x < 9; x++)
    {
      _rgbxchNums[x] = buf[offset++];
    }
    _ixchFollow = buf[offset++];
    _dxaSpace = LittleEndian.getInt(buf, offset);
    offset += LittleEndian.INT_SIZE;
    _dxaIndent = LittleEndian.getInt(buf, offset);
    offset += LittleEndian.INT_SIZE;
    _cbGrpprlChpx = LittleEndian.getUnsignedByte(buf, offset++);
    _cbGrpprlPapx = LittleEndian.getUnsignedByte(buf, offset++);
    _reserved = LittleEndian.getShort(buf, offset);
    offset += LittleEndian.SHORT_SIZE;

    _grpprlPapx = new byte[_cbGrpprlPapx];
    _grpprlChpx = new byte[_cbGrpprlChpx];
    System.arraycopy(buf, offset, _grpprlChpx, 0, _cbGrpprlChpx);
    offset += _cbGrpprlChpx;
    System.arraycopy(buf, offset, _grpprlPapx, 0, _cbGrpprlPapx);
    offset += _cbGrpprlPapx;

    int numberTextLength = LittleEndian.getShort(buf, offset);
    _numberText = new char[numberTextLength];
    offset += LittleEndian.SHORT_SIZE;
    for (int x = 0; x < numberTextLength; x++)
    {
      _numberText[x] = (char)LittleEndian.getShort(buf, offset);
      offset += LittleEndian.SHORT_SIZE;
    }

  }

