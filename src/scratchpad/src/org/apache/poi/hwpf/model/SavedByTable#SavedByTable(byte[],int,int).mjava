  /**
   * Constructor to read the table from the table stream.
   *
   * @param tableStream the table stream.
   * @param offset the offset into the byte array.
   * @param size the size of the table in the byte array.
   */
  public SavedByTable(byte[] tableStream, int offset, int size)
  {      
//    // Read the value that I don't know what it does. :-)
//    unknownValue = LittleEndian.getShort(tableStream, offset);
//    offset += 2;
//
//    // The stored int is the number of strings, and there are two strings per entry.
//    int numEntries = LittleEndian.getInt(tableStream, offset) / 2;
//    offset += 4;
//
//    entries = new SavedByEntry[numEntries];
//    for (int i = 0; i < numEntries; i++)
//    {
//      int len = LittleEndian.getShort(tableStream, offset);
//      offset += 2;
//      String userName = StringUtil.getFromUnicodeLE(tableStream, offset, len);
//      offset += len * 2;
//      len = LittleEndian.getShort(tableStream, offset);
//      offset += 2;
//      String saveLocation = StringUtil.getFromUnicodeLE(tableStream, offset, len);
//      offset += len * 2;
//
//      entries[i] = new SavedByEntry(userName, saveLocation);
//    }

        // first value is mark for extended STTBF ;) -- sergey
        String[] strings = SttbfUtils.read( tableStream, offset );

        int numEntries = strings.length / 2;
        entries = new SavedByEntry[numEntries];
        for ( int i = 0; i < numEntries; i++ )
        {
            entries[i] = new SavedByEntry( strings[i * 2], strings[i * 2 + 1] );
        }
    }

