    public String toString()
    {
        StringBuffer buffer = new StringBuffer();

        buffer.append( "[TAP]\n" );

        buffer.append( "    .istd                 = " );
        buffer.append( " (" ).append( getIstd() ).append( " )\n" );

        buffer.append( "    .jc                   = " );
        buffer.append( " (" ).append( getJc() ).append( " )\n" );

        buffer.append( "    .dxaGapHalf           = " );
        buffer.append( " (" ).append( getDxaGapHalf() ).append( " )\n" );

        buffer.append( "    .dyaRowHeight         = " );
        buffer.append( " (" ).append( getDyaRowHeight() ).append( " )\n" );

        buffer.append( "    .fCantSplit           = " );
        buffer.append( " (" ).append( getFCantSplit() ).append( " )\n" );

        buffer.append( "    .fCantSplit90         = " );
        buffer.append( " (" ).append( getFCantSplit90() ).append( " )\n" );

        buffer.append( "    .fTableHeader         = " );
        buffer.append( " (" ).append( getFTableHeader() ).append( " )\n" );

        buffer.append( "    .tlp                  = " );
        buffer.append( " (" ).append( getTlp() ).append( " )\n" );

        buffer.append( "    .wWidth               = " );
        buffer.append( " (" ).append( getWWidth() ).append( " )\n" );

        buffer.append( "    .wWidthIndent         = " );
        buffer.append( " (" ).append( getWWidthIndent() ).append( " )\n" );

        buffer.append( "    .wWidthBefore         = " );
        buffer.append( " (" ).append( getWWidthBefore() ).append( " )\n" );

        buffer.append( "    .wWidthAfter          = " );
        buffer.append( " (" ).append( getWWidthAfter() ).append( " )\n" );

        buffer.append( "    .widthAndFitsFlags    = " );
        buffer.append( " (" ).append( getWidthAndFitsFlags() ).append( " )\n" );
        buffer.append( "         .fAutofit                 = " )
                .append( isFAutofit() ).append( '\n' );
        buffer.append( "         .fKeepFollow              = " )
                .append( isFKeepFollow() ).append( '\n' );
        buffer.append( "         .ftsWidth                 = " )
                .append( getFtsWidth() ).append( '\n' );
        buffer.append( "         .ftsWidthIndent           = " )
                .append( getFtsWidthIndent() ).append( '\n' );
        buffer.append( "         .ftsWidthBefore           = " )
                .append( getFtsWidthBefore() ).append( '\n' );
        buffer.append( "         .ftsWidthAfter            = " )
                .append( getFtsWidthAfter() ).append( '\n' );
        buffer.append( "         .fNeverBeenAutofit        = " )
                .append( isFNeverBeenAutofit() ).append( '\n' );
        buffer.append( "         .fInvalAutofit            = " )
                .append( isFInvalAutofit() ).append( '\n' );
        buffer.append( "         .widthAndFitsFlags_empty1     = " )
                .append( getWidthAndFitsFlags_empty1() ).append( '\n' );
        buffer.append( "         .fVert                    = " )
                .append( isFVert() ).append( '\n' );
        buffer.append( "         .pcVert                   = " )
                .append( getPcVert() ).append( '\n' );
        buffer.append( "         .pcHorz                   = " )
                .append( getPcHorz() ).append( '\n' );
        buffer.append( "         .widthAndFitsFlags_empty2     = " )
                .append( getWidthAndFitsFlags_empty2() ).append( '\n' );

        buffer.append( "    .dxaAbs               = " );
        buffer.append( " (" ).append( getDxaAbs() ).append( " )\n" );

        buffer.append( "    .dyaAbs               = " );
        buffer.append( " (" ).append( getDyaAbs() ).append( " )\n" );

        buffer.append( "    .dxaFromText          = " );
        buffer.append( " (" ).append( getDxaFromText() ).append( " )\n" );

        buffer.append( "    .dyaFromText          = " );
        buffer.append( " (" ).append( getDyaFromText() ).append( " )\n" );

        buffer.append( "    .dxaFromTextRight     = " );
        buffer.append( " (" ).append( getDxaFromTextRight() ).append( " )\n" );

        buffer.append( "    .dyaFromTextBottom    = " );
        buffer.append( " (" ).append( getDyaFromTextBottom() ).append( " )\n" );

        buffer.append( "    .fBiDi                = " );
        buffer.append( " (" ).append( getFBiDi() ).append( " )\n" );

        buffer.append( "    .fRTL                 = " );
        buffer.append( " (" ).append( getFRTL() ).append( " )\n" );

        buffer.append( "    .fNoAllowOverlap      = " );
        buffer.append( " (" ).append( getFNoAllowOverlap() ).append( " )\n" );

        buffer.append( "    .fSpare               = " );
        buffer.append( " (" ).append( getFSpare() ).append( " )\n" );

        buffer.append( "    .grpfTap              = " );
        buffer.append( " (" ).append( getGrpfTap() ).append( " )\n" );

        buffer.append( "    .internalFlags        = " );
        buffer.append( " (" ).append( getInternalFlags() ).append( " )\n" );
        buffer.append( "         .fFirstRow                = " )
                .append( isFFirstRow() ).append( '\n' );
        buffer.append( "         .fLastRow                 = " )
                .append( isFLastRow() ).append( '\n' );
        buffer.append( "         .fOutline                 = " )
                .append( isFOutline() ).append( '\n' );
        buffer.append( "         .fOrigWordTableRules      = " )
                .append( isFOrigWordTableRules() ).append( '\n' );
        buffer.append( "         .fCellSpacing             = " )
                .append( isFCellSpacing() ).append( '\n' );
        buffer.append( "         .grpfTap_unused           = " )
                .append( getGrpfTap_unused() ).append( '\n' );

        buffer.append( "    .itcMac               = " );
        buffer.append( " (" ).append( getItcMac() ).append( " )\n" );

        buffer.append( "    .dxaAdjust            = " );
        buffer.append( " (" ).append( getDxaAdjust() ).append( " )\n" );

        buffer.append( "    .dxaWebView           = " );
        buffer.append( " (" ).append( getDxaWebView() ).append( " )\n" );

        buffer.append( "    .dxaRTEWrapWidth      = " );
        buffer.append( " (" ).append( getDxaRTEWrapWidth() ).append( " )\n" );

        buffer.append( "    .dxaColWidthWwd       = " );
        buffer.append( " (" ).append( getDxaColWidthWwd() ).append( " )\n" );

        buffer.append( "    .pctWwd               = " );
        buffer.append( " (" ).append( getPctWwd() ).append( " )\n" );

        buffer.append( "    .viewFlags            = " );
        buffer.append( " (" ).append( getViewFlags() ).append( " )\n" );
        buffer.append( "         .fWrapToWwd               = " )
                .append( isFWrapToWwd() ).append( '\n' );
        buffer.append( "         .fNotPageView             = " )
                .append( isFNotPageView() ).append( '\n' );
        buffer.append( "         .viewFlags_unused1        = " )
                .append( isViewFlags_unused1() ).append( '\n' );
        buffer.append( "         .fWebView                 = " )
                .append( isFWebView() ).append( '\n' );
        buffer.append( "         .fAdjusted                = " )
                .append( isFAdjusted() ).append( '\n' );
        buffer.append( "         .viewFlags_unused2        = " )
                .append( getViewFlags_unused2() ).append( '\n' );

        buffer.append( "    .rgdxaCenter          = " );
        buffer.append( " (" ).append( getRgdxaCenter() ).append( " )\n" );

        buffer.append( "    .rgdxaCenterPrint     = " );
        buffer.append( " (" ).append( getRgdxaCenterPrint() ).append( " )\n" );

        buffer.append( "    .shdTable             = " );
        buffer.append( " (" ).append( getShdTable() ).append( " )\n" );

        buffer.append( "    .brcBottom            = " );
        buffer.append( " (" ).append( getBrcBottom() ).append( " )\n" );

        buffer.append( "    .brcTop               = " );
        buffer.append( " (" ).append( getBrcTop() ).append( " )\n" );

        buffer.append( "    .brcLeft              = " );
        buffer.append( " (" ).append( getBrcLeft() ).append( " )\n" );

        buffer.append( "    .brcRight             = " );
        buffer.append( " (" ).append( getBrcRight() ).append( " )\n" );

        buffer.append( "    .brcVertical          = " );
        buffer.append( " (" ).append( getBrcVertical() ).append( " )\n" );

        buffer.append( "    .brcHorizontal        = " );
        buffer.append( " (" ).append( getBrcHorizontal() ).append( " )\n" );

        buffer.append( "    .wCellPaddingDefaultTop = " );
        buffer.append( " (" ).append( getWCellPaddingDefaultTop() )
                .append( " )\n" );

        buffer.append( "    .wCellPaddingDefaultLeft = " );
        buffer.append( " (" ).append( getWCellPaddingDefaultLeft() )
                .append( " )\n" );

        buffer.append( "    .wCellPaddingDefaultBottom = " );
        buffer.append( " (" ).append( getWCellPaddingDefaultBottom() )
                .append( " )\n" );

        buffer.append( "    .wCellPaddingDefaultRight = " );
        buffer.append( " (" ).append( getWCellPaddingDefaultRight() )
                .append( " )\n" );

        buffer.append( "    .ftsCellPaddingDefaultTop = " );
        buffer.append( " (" ).append( getFtsCellPaddingDefaultTop() )
                .append( " )\n" );

        buffer.append( "    .ftsCellPaddingDefaultLeft = " );
        buffer.append( " (" ).append( getFtsCellPaddingDefaultLeft() )
                .append( " )\n" );

        buffer.append( "    .ftsCellPaddingDefaultBottom = " );
        buffer.append( " (" ).append( getFtsCellPaddingDefaultBottom() )
                .append( " )\n" );

        buffer.append( "    .ftsCellPaddingDefaultRight = " );
        buffer.append( " (" ).append( getFtsCellPaddingDefaultRight() )
                .append( " )\n" );

        buffer.append( "    .wCellSpacingDefaultTop = " );
        buffer.append( " (" ).append( getWCellSpacingDefaultTop() )
                .append( " )\n" );

        buffer.append( "    .wCellSpacingDefaultLeft = " );
        buffer.append( " (" ).append( getWCellSpacingDefaultLeft() )
                .append( " )\n" );

        buffer.append( "    .wCellSpacingDefaultBottom = " );
        buffer.append( " (" ).append( getWCellSpacingDefaultBottom() )
                .append( " )\n" );

        buffer.append( "    .wCellSpacingDefaultRight = " );
        buffer.append( " (" ).append( getWCellSpacingDefaultRight() )
                .append( " )\n" );

        buffer.append( "    .ftsCellSpacingDefaultTop = " );
        buffer.append( " (" ).append( getFtsCellSpacingDefaultTop() )
                .append( " )\n" );

        buffer.append( "    .ftsCellSpacingDefaultLeft = " );
        buffer.append( " (" ).append( getFtsCellSpacingDefaultLeft() )
                .append( " )\n" );

        buffer.append( "    .ftsCellSpacingDefaultBottom = " );
        buffer.append( " (" ).append( getFtsCellSpacingDefaultBottom() )
                .append( " )\n" );

        buffer.append( "    .ftsCellSpacingDefaultRight = " );
        buffer.append( " (" ).append( getFtsCellSpacingDefaultRight() )
                .append( " )\n" );

        buffer.append( "    .wCellPaddingOuterTop = " );
        buffer.append( " (" ).append( getWCellPaddingOuterTop() )
                .append( " )\n" );

        buffer.append( "    .wCellPaddingOuterLeft = " );
        buffer.append( " (" ).append( getWCellPaddingOuterLeft() )
                .append( " )\n" );

        buffer.append( "    .wCellPaddingOuterBottom = " );
        buffer.append( " (" ).append( getWCellPaddingOuterBottom() )
                .append( " )\n" );

        buffer.append( "    .wCellPaddingOuterRight = " );
        buffer.append( " (" ).append( getWCellPaddingOuterRight() )
                .append( " )\n" );

        buffer.append( "    .ftsCellPaddingOuterTop = " );
        buffer.append( " (" ).append( getFtsCellPaddingOuterTop() )
                .append( " )\n" );

        buffer.append( "    .ftsCellPaddingOuterLeft = " );
        buffer.append( " (" ).append( getFtsCellPaddingOuterLeft() )
                .append( " )\n" );

        buffer.append( "    .ftsCellPaddingOuterBottom = " );
        buffer.append( " (" ).append( getFtsCellPaddingOuterBottom() )
                .append( " )\n" );

        buffer.append( "    .ftsCellPaddingOuterRight = " );
        buffer.append( " (" ).append( getFtsCellPaddingOuterRight() )
                .append( " )\n" );

        buffer.append( "    .wCellSpacingOuterTop = " );
        buffer.append( " (" ).append( getWCellSpacingOuterTop() )
                .append( " )\n" );

        buffer.append( "    .wCellSpacingOuterLeft = " );
        buffer.append( " (" ).append( getWCellSpacingOuterLeft() )
                .append( " )\n" );

        buffer.append( "    .wCellSpacingOuterBottom = " );
        buffer.append( " (" ).append( getWCellSpacingOuterBottom() )
                .append( " )\n" );

        buffer.append( "    .wCellSpacingOuterRight = " );
        buffer.append( " (" ).append( getWCellSpacingOuterRight() )
                .append( " )\n" );

        buffer.append( "    .ftsCellSpacingOuterTop = " );
        buffer.append( " (" ).append( getFtsCellSpacingOuterTop() )
                .append( " )\n" );

        buffer.append( "    .ftsCellSpacingOuterLeft = " );
        buffer.append( " (" ).append( getFtsCellSpacingOuterLeft() )
                .append( " )\n" );

        buffer.append( "    .ftsCellSpacingOuterBottom = " );
        buffer.append( " (" ).append( getFtsCellSpacingOuterBottom() )
                .append( " )\n" );

        buffer.append( "    .ftsCellSpacingOuterRight = " );
        buffer.append( " (" ).append( getFtsCellSpacingOuterRight() )
                .append( " )\n" );

        buffer.append( "    .rgtc                 = " );
        buffer.append( " (" ).append( getRgtc() ).append( " )\n" );

        buffer.append( "    .rgshd                = " );
        buffer.append( " (" ).append( getRgshd() ).append( " )\n" );

        buffer.append( "    .fPropRMark           = " );
        buffer.append( " (" ).append( getFPropRMark() ).append( " )\n" );

        buffer.append( "    .fHasOldProps         = " );
        buffer.append( " (" ).append( getFHasOldProps() ).append( " )\n" );

        buffer.append( "    .cHorzBands           = " );
        buffer.append( " (" ).append( getCHorzBands() ).append( " )\n" );

        buffer.append( "    .cVertBands           = " );
        buffer.append( " (" ).append( getCVertBands() ).append( " )\n" );

        buffer.append( "    .rgbrcInsideDefault_0 = " );
        buffer.append( " (" ).append( getRgbrcInsideDefault_0() )
                .append( " )\n" );

        buffer.append( "    .rgbrcInsideDefault_1 = " );
        buffer.append( " (" ).append( getRgbrcInsideDefault_1() )
                .append( " )\n" );

        buffer.append( "[/TAP]\n" );
        return buffer.toString();
    }

