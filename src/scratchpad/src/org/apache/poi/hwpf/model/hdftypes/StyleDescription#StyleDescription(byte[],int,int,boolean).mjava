  public StyleDescription(byte[] std, int baseLength, int offset, boolean word9)
  {
     _baseLength = baseLength;
     int nameStart = offset + baseLength;
      _infoShort = LittleEndian.getShort(std, offset);
      offset += LittleEndian.SHORT_SIZE;
      _infoShort2 = LittleEndian.getShort(std, offset);
      offset += LittleEndian.SHORT_SIZE;
      _infoShort3 = LittleEndian.getShort(std, offset);
      offset += LittleEndian.SHORT_SIZE;
      _bchUpe = LittleEndian.getShort(std, offset);
      offset += LittleEndian.SHORT_SIZE;
      _infoShort4 = LittleEndian.getShort(std, offset);
      offset += LittleEndian.SHORT_SIZE;

      //first byte(s) of variable length section of std is the length of the
      //style name and aliases string
      int nameLength = 0;
      int multiplier = 1;
      if(word9)
      {
          nameLength = LittleEndian.getShort(std, nameStart);
          multiplier = 2;
          nameStart += LittleEndian.SHORT_SIZE;
      }
      else
      {
          nameLength = std[nameStart];
      }

      try
      {
        _name = new String(std, nameStart, nameLength * multiplier, "UTF-16LE");
      }
      catch (UnsupportedEncodingException ignore)
      {
        // ignore
      }

      //length then null terminator.
      int grupxStart = ((nameLength + 1) * multiplier) + nameStart;

      // the spec only refers to two possible upxs but it mentions
      // that more may be added in the future
      int add = 0;
      int numUPX = _numUPX.getValue(_infoShort3);
      for(int x = 0; x < numUPX; x++)
      {
          int upxSize = LittleEndian.getShort(std, grupxStart + add);
          if(_styleTypeCode.getValue(_infoShort2) == PARAGRAPH_STYLE)
          {
              if(x == 0)
              {
                  _istd = LittleEndian.getShort(std, grupxStart + add + 2);
                  int grrprlSize = upxSize - 2;
                  _papx = new byte[upxSize];
                  System.arraycopy(std, grupxStart + add + 4, _papx, 0, grrprlSize);
              }
              else if(x == 1)
              {
                  _chpx = new byte[upxSize];
                  System.arraycopy(std, grupxStart + add + 2, _chpx, 0, upxSize);
              }
          }
          else if(_styleTypeCode.getValue(_infoShort2) == CHARACTER_STYLE && x == 0)
          {
              _chpx = new byte[upxSize];
              System.arraycopy(std, grupxStart + add + 2, _chpx, 0, upxSize);
          }

          // the upx will always start on a word boundary.
          if(upxSize % 2 == 1)
          {
              ++upxSize;
          }
          add += 2 + upxSize;
      }


  }

