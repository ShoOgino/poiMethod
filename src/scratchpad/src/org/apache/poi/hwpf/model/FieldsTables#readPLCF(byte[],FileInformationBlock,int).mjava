  private ArrayList<PlexOfField> readPLCF(byte[] tableStream, FileInformationBlock fib, int type)
  {
    int start = 0;
    int length = 0;

    switch (type)
    {
    case PLCFFLDATN:
      start = fib.getFcPlcffldAtn();
      length = fib.getLcbPlcffldAtn();
      break;
    case PLCFFLDEDN:
      start = fib.getFcPlcffldEdn();
      length = fib.getLcbPlcffldEdn();
      break;
    case PLCFFLDFTN:
      start = fib.getFcPlcffldFtn();
      length = fib.getLcbPlcffldFtn();
      break;
    case PLCFFLDHDR:
      start = fib.getFcPlcffldHdr();
      length = fib.getLcbPlcffldHdr();
      break;
    case PLCFFLDHDRTXBX:
      start = fib.getFcPlcffldHdrtxbx();
      length = fib.getLcbPlcffldHdrtxbx();
      break;
    case PLCFFLDMOM:
      start = fib.getFcPlcffldMom();
      length = fib.getLcbPlcffldMom();
      break;
    case PLCFFLDTXBX:
      start = fib.getFcPlcffldTxbx();
      length = fib.getLcbPlcffldTxbx();
    default:
      break;
    }

    ArrayList<PlexOfField> fields = new ArrayList<PlexOfField>();

    if (start > 0 && length > 0)
    {
      PlexOfCps plcf = new PlexOfCps(tableStream, start, length, FLD_SIZE);
      fields.ensureCapacity(plcf.length());

      for ( int i = 0; i < plcf.length(); i ++ ) {
        GenericPropertyNode propNode = plcf.getProperty( i );
        PlexOfField plex = new PlexOfField( propNode.getStart(), propNode.getEnd(), propNode.getBytes() );
        fields.add( plex );
      }
    }

    return fields;
  }

