    protected byte[] toByteArray(int fcMin)
    {
      byte[] buf = new byte[512];
      int size = _papxList.size();
      int grpprlOffset = 0;
      int bxOffset = 0;
      int fcOffset = 0;

      // total size is currently the size of one FC
      int totalSize = FC_SIZE;

      int index = 0;
      for (; index < size; index++)
      {
        int grpprlLength = ((PAPX)_papxList.get(index)).getGrpprl().length;

        // check to see if we have enough room for an FC, a BX, and the grpprl
        // and the 1 byte size of the grpprl.
        totalSize += (FC_SIZE + BX_SIZE + grpprlLength + 1);
        // if size is uneven we will have to add one so the first grpprl falls
        // on a word boundary
        if (totalSize > 511 + (index % 2))
        {
          totalSize -= (FC_SIZE + BX_SIZE + grpprlLength);
          break;
        }

        // grpprls must fall on word boundaries
        if (grpprlLength % 2 > 0)
        {
          totalSize += 1;
        }
        else
        {
          totalSize += 2;
        }
      }

      // see if we couldn't fit some
      if (index != size)
      {
        _overFlow = new ArrayList();
        _overFlow.addAll(index, _papxList);
      }

      // index should equal number of papxs that will be in this fkp now.
      buf[511] = (byte)index;

      bxOffset = (FC_SIZE * index) + FC_SIZE;
      grpprlOffset =  511;

      PAPX papx = null;
      for (int x = 0; x < index; x++)
      {
        papx = (PAPX)_papxList.get(x);
        byte[] phe = papx.getParagraphHeight().toByteArray();
        byte[] grpprl = papx.getGrpprl();

        grpprlOffset -= (grpprl.length + (2 - grpprl.length % 2));
        grpprlOffset -= (grpprlOffset % 2);
        LittleEndian.putInt(buf, fcOffset, papx.getStart() + fcMin);
        buf[bxOffset] = (byte)(grpprlOffset/2);
        System.arraycopy(phe, 0, buf, bxOffset + 1, phe.length);

        // refer to the section on PAPX in the spec. Places a size on the front
        // of the PAPX. Has to do with how the grpprl stays on word
        // boundaries.
        int copyOffset = grpprlOffset;
        if ((grpprl.length % 2) > 0)
        {
          buf[copyOffset++] = (byte)((grpprl.length + 1)/2);
        }
        else
        {
          buf[++copyOffset] = (byte)((grpprl.length)/2);
          copyOffset++;
        }
        System.arraycopy(grpprl, 0, buf, copyOffset, grpprl.length);

        bxOffset += BX_SIZE;
        fcOffset += FC_SIZE;
      }
      // put the last papx's end in
      LittleEndian.putInt(buf, fcOffset, papx.getEnd() + fcMin);
      return buf;
    }

