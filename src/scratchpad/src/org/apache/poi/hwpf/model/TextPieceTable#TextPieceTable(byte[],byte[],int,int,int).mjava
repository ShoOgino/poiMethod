  public TextPieceTable(byte[] documentStream, byte[] tableStream, int offset,
                        int size, int fcMin)
    throws UnsupportedEncodingException
  {
    // get our plex of PieceDescriptors
    PlexOfCps pieceTable = new PlexOfCps(tableStream, offset, size, PieceDescriptor.getSizeInBytes());

    int length = pieceTable.length();
    PieceDescriptor[] pieces = new PieceDescriptor[length];

    // iterate through piece descriptors raw bytes and create
    // PieceDescriptor objects
    for (int x = 0; x < length; x++)
    {
      GenericPropertyNode node = pieceTable.getProperty(x);
      pieces[x] = new PieceDescriptor(node.getBytes(), 0);
    }

    int firstPieceFilePosition = pieces[0].getFilePosition();
    _cpMin = firstPieceFilePosition - fcMin;

    // using the PieceDescriptors, build our list of TextPieces.
    for (int x = 0; x < pieces.length; x++)
    {
      int start = pieces[x].getFilePosition();
      PropertyNode node = pieceTable.getProperty(x);
      
      // Grab the start and end, which are in characters
      int nodeStartChars = node.getStart();
      int nodeEndChars = node.getEnd();
      
      // What's the relationship between bytes and characters?
      boolean unicode = pieces[x].isUnicode();
      int multiple = 1;
      if (unicode) {
        multiple = 2;
      }
      
      // Figure out the length, in bytes and chars
      int textSizeChars = (nodeEndChars - nodeStartChars);
      int textSizeBytes = textSizeChars * multiple;

      // Grab the data that makes up the piece
      byte[] buf = new byte[textSizeBytes];
      System.arraycopy(documentStream, start, buf, 0, textSizeBytes);

      // And now build the piece
      _textPieces.add(new TextPiece(nodeStartChars, nodeEndChars, buf, pieces[x], node.getStart()));
    }
  }

