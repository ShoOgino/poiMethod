    private void assertCbRgFcLcb()
    {
        switch ( getNFib() )
        {
        case 0x00C1:
            assertCbRgFcLcb( "0x00C1", 0x005D, "0x005D", _cbRgFcLcb );
            break;
        case 0x00D9:
            assertCbRgFcLcb( "0x00D9", 0x006C, "0x006C", _cbRgFcLcb );
            break;
        case 0x0101:
            assertCbRgFcLcb( "0x0101", 0x0088, "0x0088", _cbRgFcLcb );
            break;
        case 0x010C:
            assertCbRgFcLcb( "0x010C", 0x00A4, "0x00A4", _cbRgFcLcb );
            break;
        case 0x0112:
            assertCbRgFcLcb( "0x0112", 0x00B7, "0x00B7", _cbRgFcLcb );
            break;
        default:
            /*
When running with the large CommonCrawl corpus we found the following ids in documents that are processed fine:
java.lang.IllegalStateException: Invalid file format version number: 113
java.lang.IllegalStateException: Invalid file format version number: 191
java.lang.IllegalStateException: Invalid file format version number: 192
java.lang.IllegalStateException: Invalid file format version number: 194
java.lang.IllegalStateException: Invalid file format version number: 195
java.lang.IllegalStateException: Invalid file format version number: 216
java.lang.IllegalStateException: Invalid file format version number: 265
java.lang.IllegalStateException: Invalid file format version number: 267
             */
            logger.log(POILogger.WARN, "Invalid file format version number: " + getNFib());
        }
    }

