    protected boolean processCharacters( HWPFDocument hwpfDocument,
            int currentTableLevel, Paragraph paragraph, final Element block,
            final int start, final int end )
    {
        boolean haveAnyText = false;

        for ( int c = start; c < end; c++ )
        {
            CharacterRun characterRun = paragraph.getCharacterRun( c );

            if ( hwpfDocument.getPicturesTable().hasPicture( characterRun ) )
            {
                Picture picture = hwpfDocument.getPicturesTable()
                        .extractPicture( characterRun, true );

                processImage( block, characterRun.text().charAt( 0 ) == 0x01,
                        picture );
                continue;
            }

            String text = characterRun.text();
            if ( text.getBytes().length == 0 )
                continue;

            if ( text.getBytes()[0] == FIELD_BEGIN_MARK )
            {
                int skipTo = tryField( hwpfDocument, paragraph,
                        currentTableLevel, c, block );

                if ( skipTo != c )
                {
                    c = skipTo;
                    continue;
                }

                continue;
            }
            if ( text.getBytes()[0] == FIELD_SEPARATOR_MARK )
            {
                // shall not appear without FIELD_BEGIN_MARK
                continue;
            }
            if ( text.getBytes()[0] == FIELD_END_MARK )
            {
                // shall not appear without FIELD_BEGIN_MARK
                continue;
            }

            if ( characterRun.isSpecialCharacter() || characterRun.isObj()
                    || characterRun.isOle2() )
            {
                continue;
            }

            BlockProperies blockProperies = this.blocksProperies.peek();
            Element inline = createInline();
            if ( characterRun.isBold() != blockProperies.pBold )
            {
                WordToFoUtils.setBold( inline, characterRun.isBold() );
            }
            if ( characterRun.isItalic() != blockProperies.pItalic )
            {
                WordToFoUtils.setItalic( inline, characterRun.isItalic() );
            }
            if ( !WordToFoUtils.equals( characterRun.getFontName(),
                    blockProperies.pFontName ) )
            {
                WordToFoUtils
                        .setFontFamily( inline, characterRun.getFontName() );
            }
            if ( characterRun.getFontSize() / 2 != blockProperies.pFontSize )
            {
                WordToFoUtils.setFontSize( inline,
                        characterRun.getFontSize() / 2 );
            }
            WordToFoUtils.setCharactersProperties( characterRun, inline );
            block.appendChild( inline );

            if ( text.endsWith( "\r" )
                    || (text.charAt( text.length() - 1 ) == BEL_MARK && currentTableLevel != 0) )
                text = text.substring( 0, text.length() - 1 );

            Text textNode = createText( text );
            inline.appendChild( textNode );

            haveAnyText |= text.trim().length() != 0;
        }

        return haveAnyText;
    }

