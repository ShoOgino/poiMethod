    protected void processField( HWPFDocument hwpfDocument,
            Element currentBlock, Paragraph paragraph, int currentTableLevel,
            int beginMark, int separatorMark, int endMark )
    {

        Pattern hyperlinkPattern = Pattern
                .compile( "[ \\t\\r\\n]*HYPERLINK \"(.*)\"[ \\t\\r\\n]*" );
        Pattern pagerefPattern = Pattern
                .compile( "[ \\t\\r\\n]*PAGEREF ([^ ]*)[ \\t\\r\\n]*\\\\h[ \\t\\r\\n]*" );

        if ( separatorMark - beginMark > 1 )
        {
            CharacterRun firstAfterBegin = paragraph
                    .getCharacterRun( beginMark + 1 );

            final Matcher hyperlinkMatcher = hyperlinkPattern
                    .matcher( firstAfterBegin.text() );
            if ( hyperlinkMatcher.matches() )
            {
                String hyperlink = hyperlinkMatcher.group( 1 );
                processHyperlink( hwpfDocument, currentBlock, paragraph,
                        currentTableLevel, hyperlink, separatorMark + 1,
                        endMark );
                return;
            }

            final Matcher pagerefMatcher = pagerefPattern
                    .matcher( firstAfterBegin.text() );
            if ( pagerefMatcher.matches() )
            {
                String pageref = pagerefMatcher.group( 1 );
                processPageref( hwpfDocument, currentBlock, paragraph,
                        currentTableLevel, pageref, separatorMark + 1, endMark );
                return;
            }
        }

        StringBuilder debug = new StringBuilder( "Unsupported field type: \n" );
        for ( int i = beginMark; i <= endMark; i++ )
        {
            debug.append( "\t" );
            debug.append( paragraph.getCharacterRun( i ) );
            debug.append( "\n" );
        }
        logger.log( POILogger.WARN, debug );

        // just output field value
        if ( separatorMark + 1 < endMark )
            processCharacters( hwpfDocument, currentTableLevel, paragraph,
                    currentBlock, separatorMark + 1, endMark );

        return;
    }

