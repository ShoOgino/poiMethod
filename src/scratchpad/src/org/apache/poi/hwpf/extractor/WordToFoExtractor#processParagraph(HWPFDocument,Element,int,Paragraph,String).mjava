    protected void processParagraph(HWPFDocument hwpfDocument,
            Element parentFopElement, int currentTableLevel,
            Paragraph paragraph, String bulletText) {
        final Element block = createBlock();
        parentFopElement.appendChild(block);

        WordToFoUtils.setParagraphProperties(paragraph, block);

        final int charRuns = paragraph.numCharacterRuns();

        if (charRuns == 0) {
            return;
        }

        final String pFontName;
        final int pFontSize;
        final boolean pBold;
        final boolean pItalic;
        {
            CharacterRun characterRun = paragraph.getCharacterRun(0);
            pFontSize = characterRun.getFontSize() / 2;
            pFontName = characterRun.getFontName();
            pBold = characterRun.isBold();
            pItalic = characterRun.isItalic();
        }
        WordToFoUtils.setFontFamily(block, pFontName);
        WordToFoUtils.setFontSize(block, pFontSize);
        WordToFoUtils.setBold(block, pBold);
        WordToFoUtils.setItalic(block, pItalic);

        StringBuilder lineText = new StringBuilder();

        if (WordToFoUtils.isNotEmpty(bulletText)) {
            Element inline = createInline();
            block.appendChild(inline);

            Text textNode = createText(bulletText);
            inline.appendChild(textNode);

            lineText.append(bulletText);
        }

        for (int c = 0; c < charRuns; c++) {
            CharacterRun characterRun = paragraph.getCharacterRun(c);

            if (hwpfDocument.getPicturesTable().hasPicture(characterRun)) {
                Picture picture = hwpfDocument.getPicturesTable()
                        .extractPicture(characterRun, true);

                processImage(block, characterRun.text().charAt(0) == 0x01,
                        picture);
                continue;
            }

	    String text = characterRun.text();
	    if (text.getBytes().length == 0)
		continue;

            if (text.getBytes()[0] == FIELD_BEGIN_MARK) {
                /*
                 * check if we have a field with calculated image as a result.
                 * MathType equation, for example.
                 */
                int skipTo = tryImageWithinField(hwpfDocument, paragraph, c,
                        block);

		if (skipTo != c) {
		    c = skipTo;
		    continue;
		}
		continue;
	    }
	    if (text.getBytes()[0] == FIELD_SEPARATOR_MARK) {
		continue;
	    }
	    if (text.getBytes()[0] == FIELD_END_MARK) {
		continue;
	    }

	    if (characterRun.isSpecialCharacter() || characterRun.isObj()
		    || characterRun.isOle2()) {
		continue;
	    }

	    Element inline = createInline();
	    if (characterRun.isBold() != pBold) {
		WordToFoUtils.setBold(inline, characterRun.isBold());
	    }
	    if (characterRun.isItalic() != pItalic) {
		WordToFoUtils.setItalic(inline, characterRun.isItalic());
	    }
	    if (!WordToFoUtils.equals(characterRun.getFontName(), pFontName)) {
		WordToFoUtils.setFontFamily(inline, characterRun.getFontName());
	    }
	    if (characterRun.getFontSize() / 2 != pFontSize) {
		WordToFoUtils.setFontSize(inline,
			characterRun.getFontSize() / 2);
	    }
	    WordToFoUtils.setCharactersProperties(characterRun, inline);
	    block.appendChild(inline);

	    if (text.endsWith("\r")
		    || (text.charAt(text.length() - 1) == BEL_MARK && currentTableLevel != 0))
		text = text.substring(0, text.length() - 1);

	    Text textNode = createText(text);
	    inline.appendChild(textNode);

	    lineText.append(text);
	}

	if (lineText.toString().trim().length() == 0) {
	    Element leader = createLeader();
	    block.appendChild(leader);
	}

	return;
    }

