  private static void handleTabs(ParagraphProperties pap, SprmOperation sprm)
  {
    byte[] grpprl = sprm.getGrpprl();
    int offset = sprm.getGrpprlOffset();
    int delSize = grpprl[offset++];
    int[] tabPositions = pap.getRgdxaTab();
    byte[] tabDescriptors = pap.getRgtbd();

    Map<Integer, Byte> tabMap = new HashMap<Integer, Byte>();
    for (int x = 0; x < tabPositions.length; x++)
    {
      tabMap.put(Integer.valueOf(tabPositions[x]), Byte.valueOf(tabDescriptors[x]));
    }

    for (int x = 0; x < delSize; x++)
    {
      tabMap.remove(Integer.valueOf(LittleEndian.getShort(grpprl, offset)));
      offset += LittleEndian.SHORT_SIZE;
    }

    int addSize = grpprl[offset++];
    int start = offset;
    for (int x = 0; x < addSize; x++)
    {
      Integer key = Integer.valueOf(LittleEndian.getShort(grpprl, offset));
      Byte val = Byte.valueOf(grpprl[start + ((LittleEndian.SHORT_SIZE * addSize) + x)]);
      tabMap.put(key, val);
      offset += LittleEndian.SHORT_SIZE;
    }

    tabPositions = new int[tabMap.size()];
    tabDescriptors = new byte[tabPositions.length];
    
    List<Integer> list = new ArrayList<Integer>(tabMap.keySet());
    Collections.sort(list);

    for (int x = 0; x < tabPositions.length; x++)
    {
      Integer key = list.get(x);
      tabPositions[x] = key.intValue();
      tabDescriptors[x] = tabMap.get(key).byteValue();
    }

    pap.setRgdxaTab(tabPositions);
    pap.setRgtbd(tabDescriptors);
  }

