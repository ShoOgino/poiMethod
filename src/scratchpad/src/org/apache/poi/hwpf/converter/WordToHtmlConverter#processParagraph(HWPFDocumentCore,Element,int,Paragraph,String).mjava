    protected void processParagraph( HWPFDocumentCore hwpfDocument,
            Element parentFopElement, int currentTableLevel,
            Paragraph paragraph, String bulletText )
    {
        final Element pElement = htmlDocumentFacade.createParagraph();
        parentFopElement.appendChild( pElement );

        StringBuilder style = new StringBuilder();
        WordToHtmlUtils.addParagraphProperties( paragraph, style );

        final int charRuns = paragraph.numCharacterRuns();

        if ( charRuns == 0 )
        {
            return;
        }

        {
            final String pFontName;
            final int pFontSize;
            final CharacterRun characterRun = paragraph.getCharacterRun( 0 );
            if ( characterRun != null )
            {
                Triplet triplet = getCharacterRunTriplet( characterRun );
                pFontSize = characterRun.getFontSize() / 2;
                pFontName = triplet.fontName;
                WordToHtmlUtils.addFontFamily( pFontName, style );
                WordToHtmlUtils.addFontSize( pFontSize, style );
            }
            else
            {
                pFontSize = -1;
                pFontName = WordToHtmlUtils.EMPTY;
            }
            blocksProperies.push( new BlockProperies( pFontName, pFontSize ) );
        }
        try
        {
            if ( WordToHtmlUtils.isNotEmpty( bulletText ) )
            {
                Text textNode = htmlDocumentFacade.createText( bulletText );
                pElement.appendChild( textNode );
            }

            processCharacters( hwpfDocument, currentTableLevel, paragraph,
                    pElement );
        }
        finally
        {
            blocksProperies.pop();
        }

        if ( style.length() > 0 )
            pElement.setAttribute(
                    "class",
                    htmlDocumentFacade.getOrCreateCssClass(
                            pElement.getTagName(), "p", style.toString() ) );

        {
            // compact spans
            NodeList childNodes = pElement.getChildNodes();
            for ( int i = 0; i < childNodes.getLength() - 1; i++ )
            {
                Node child1 = childNodes.item( i );
                Node child2 = childNodes.item( i + 1 );
                if ( child1.getNodeType() != Node.ELEMENT_NODE
                        || child2.getNodeType() != Node.ELEMENT_NODE
                        || !WordToHtmlUtils.equals( "span",
                                ( (Element) child1 ).getTagName() )
                        || !WordToHtmlUtils.equals( "span",
                                ( (Element) child2 ).getTagName() )
                        || !WordToHtmlUtils.equals(
                                ( (Element) child1 ).getAttribute( "class" ),
                                ( (Element) child2 ).getAttribute( "class" ) ) )
                    continue;

                // merge
                while ( child2.getChildNodes().getLength() > 0 )
                    child1.appendChild( child2.getFirstChild() );
                child2.getParentNode().removeChild( child2 );
                i--;
            }
        }

        return;
    }

