    private static String toLetters( int number )
    {
        final int base = 26;

        if ( number <= 0 )
            throw new IllegalArgumentException( "Unsupported number: " + number );

        if ( number < base + 1 )
            return ENGLISH_LETTERS[number - 1];

        long toProcess = number;

        StringBuilder stringBuilder = new StringBuilder();
        int maxPower = 0;
        {
            int boundary = 0;
            while ( toProcess > boundary )
            {
                maxPower++;
                boundary = boundary * base + base;

                if ( boundary > Integer.MAX_VALUE )
                    throw new IllegalArgumentException( "Unsupported number: "
                            + toProcess );
            }
        }
        maxPower--;

        for ( int p = maxPower; p > 0; p-- )
        {
            long boundary = 0;
            long shift = 1;
            for ( int i = 0; i < p; i++ )
            {
                shift *= base;
                boundary = boundary * base + base;
            }

            int count = 0;
            while ( toProcess > boundary )
            {
                count++;
                toProcess -= shift;
            }
            stringBuilder.append( ENGLISH_LETTERS[count - 1] );
        }
        stringBuilder.append( ENGLISH_LETTERS[(int) toProcess - 1] );
        return stringBuilder.toString();
    }

