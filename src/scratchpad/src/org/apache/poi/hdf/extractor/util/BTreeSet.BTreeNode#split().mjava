        /*
         * Splits a BTreeNode into two BTreeNodes, removing the splitNode from the
         * calling BTreeNode.
        */
        private BTreeNode split() {
            BTreeNode rightSibling = new BTreeNode(_parent);
            int index = _nrElements / 2;
            _entries[index++].element = null;

            for (int i = 0, nr = _nrElements; index <= nr; i++, index++) {
                rightSibling._entries[i] = _entries[index];
                if (rightSibling._entries[i] != null && rightSibling._entries[i].child != null)
                    rightSibling._entries[i].child._parent = rightSibling;
                _entries[index] = null;
                _nrElements--;
                rightSibling._nrElements++;
            }

            rightSibling._nrElements--; // Need to correct for copying the last Entry which has a null element and a child
            return rightSibling;
        }

