  static Object uncompressProperty(byte[] grpprl, Object parent, StyleSheet styleSheet, boolean doIstd)
  {
      Object newProperty = null;
      int offset = 0;
      int propertyType = PAP_TYPE;


      if(parent instanceof PAP)
      {
          try
          {
              newProperty = ((PAP)parent).clone();
          }
          catch(Exception e){}
          if(doIstd)
          {
            ((PAP)newProperty)._istd = Utils.convertBytesToShort(grpprl, 0);

            offset = 2;
          }
      }
      else if(parent instanceof CHP)
      {
          try
          {
              newProperty = ((CHP)parent).clone();
              ((CHP)newProperty)._baseIstd = ((CHP)parent)._istd;
          }
          catch(Exception e){}
          propertyType = CHP_TYPE;
      }
      else if(parent instanceof SEP)
      {
          newProperty = parent;
          propertyType = SEP_TYPE;
      }
      else if(parent instanceof TAP)
      {
          newProperty = parent;
          propertyType = TAP_TYPE;
          offset = 2;//because this is really just a papx
      }
      else
      {
          return null;
      }

      while(offset < grpprl.length)
      {
          short sprm = Utils.convertBytesToShort(grpprl, offset);
          offset += 2;

          byte spra = (byte)((sprm & 0xe000) >> 13);
          int opSize = 0;
          int param = 0;
          byte[] varParam = null;

          switch(spra)
          {
              case 0:
              case 1:
                   opSize = 1;
                   param = grpprl[offset];
                   break;
              case 2:
                   opSize = 2;
                   param = Utils.convertBytesToShort(grpprl, offset);
                   break;
              case 3:
                   opSize = 4;
                   param = Utils.convertBytesToInt(grpprl, offset);
                   break;
              case 4:
              case 5:
                   opSize = 2;
                   param = Utils.convertBytesToShort(grpprl, offset);
                   break;
              case 6://variable size

                   //there is one sprm that is a very special case
                   if(sprm != (short)0xd608)
                   {
                     opSize = Utils.convertUnsignedByteToInt(grpprl[offset]);
                     offset++;
                   }
                   else
                   {
                     opSize = Utils.convertBytesToShort(grpprl, offset) - 1;
                     offset += 2;
                   }
                   varParam = new byte[opSize];
                   System.arraycopy(grpprl, offset, varParam, 0, opSize);

                   break;
              case 7:
                   opSize = 3;
                   param = Utils.convertBytesToInt((byte)0, grpprl[offset + 2], grpprl[offset + 1], grpprl[offset]);
                   break;
              default:
                  throw new RuntimeException("unrecognized pap opcode");
          }

          offset += opSize;
          short operand = (short)(sprm & 0x1ff);
          byte type = (byte)((sprm & 0x1c00) >> 10);
          switch(propertyType)
          {
              case PAP_TYPE:
                   if(type == 1)//papx stores TAP sprms along with PAP sprms
                   {
                     doPAPOperation((PAP)newProperty, operand, param, varParam, grpprl,
                                    offset, spra);
                   }
                   break;
              case CHP_TYPE:

                   doCHPOperation((CHP)parent, (CHP)newProperty, operand, param, varParam,
                                  grpprl, offset, styleSheet);
                   break;
              case SEP_TYPE:

                   doSEPOperation((SEP)newProperty, operand, param, varParam);
                   break;
              case TAP_TYPE:
                   if(type == 5)
                   {
                     doTAPOperation((TAP)newProperty, operand, param, varParam);
                   }
                   break;
          }


      }
      return newProperty;

  }

