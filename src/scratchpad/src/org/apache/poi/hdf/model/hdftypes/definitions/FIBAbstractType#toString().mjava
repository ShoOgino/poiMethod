    public String toString()
    {
        StringBuffer buffer = new StringBuffer();

        buffer.append("[FIB]\n");

        buffer.append("    .wIdent               = ");
        buffer.append(HexDump.intToHex(getWIdent()));
        buffer.append(" (").append(getWIdent()).append(" )\n");

        buffer.append("    .nFib                 = ");
        buffer.append(HexDump.intToHex(getNFib()));
        buffer.append(" (").append(getNFib()).append(" )\n");

        buffer.append("    .nProduct             = ");
        buffer.append(HexDump.intToHex(getNProduct()));
        buffer.append(" (").append(getNProduct()).append(" )\n");

        buffer.append("    .lid                  = ");
        buffer.append(HexDump.intToHex(getLid()));
        buffer.append(" (").append(getLid()).append(" )\n");

        buffer.append("    .pnNext               = ");
        buffer.append(HexDump.intToHex(getPnNext()));
        buffer.append(" (").append(getPnNext()).append(" )\n");

        buffer.append("    .options              = ");
        buffer.append(HexDump.shortToHex(getOptions()));
        buffer.append(" (").append(getOptions()).append(" )\n");
        buffer.append("         .fDot                     = ").append(isFDot()).append('\n');
        buffer.append("         .fGlsy                    = ").append(isFGlsy()).append('\n');
        buffer.append("         .fComplex                 = ").append(isFComplex()).append('\n');
        buffer.append("         .fHasPic                  = ").append(isFHasPic()).append('\n');
        buffer.append("         .cQuickSaves              = ").append(getCQuickSaves()).append('\n');
        buffer.append("         .fEncrypted               = ").append(isFEncrypted()).append('\n');
        buffer.append("         .fWhichTblStm             = ").append(isFWhichTblStm()).append('\n');
        buffer.append("         .fReadOnlyRecommended     = ").append(isFReadOnlyRecommended()).append('\n');
        buffer.append("         .fWriteReservation        = ").append(isFWriteReservation()).append('\n');
        buffer.append("         .fExtChar                 = ").append(isFExtChar()).append('\n');
        buffer.append("         .fLoadOverride            = ").append(isFLoadOverride()).append('\n');
        buffer.append("         .fFarEast                 = ").append(isFFarEast()).append('\n');
        buffer.append("         .fCrypto                  = ").append(isFCrypto()).append('\n');

        buffer.append("    .nFibBack             = ");
        buffer.append(HexDump.intToHex(getNFibBack()));
        buffer.append(" (").append(getNFibBack()).append(" )\n");

        buffer.append("    .lKey                 = ");
        buffer.append(HexDump.intToHex(getLKey()));
        buffer.append(" (").append(getLKey()).append(" )\n");

        buffer.append("    .envr                 = ");
        buffer.append(HexDump.intToHex(getEnvr()));
        buffer.append(" (").append(getEnvr()).append(" )\n");

        buffer.append("    .history              = ");
        buffer.append(HexDump.shortToHex(getHistory()));
        buffer.append(" (").append(getHistory()).append(" )\n");
        buffer.append("         .fMac                     = ").append(isFMac()).append('\n');
        buffer.append("         .fEmptySpecial            = ").append(isFEmptySpecial()).append('\n');
        buffer.append("         .fLoadOverridePage        = ").append(isFLoadOverridePage()).append('\n');
        buffer.append("         .fFutureSavedUndo         = ").append(isFFutureSavedUndo()).append('\n');
        buffer.append("         .fWord97Saved             = ").append(isFWord97Saved()).append('\n');
        buffer.append("         .fSpare0                  = ").append(getFSpare0()).append('\n');

        buffer.append("    .chs                  = ");
        buffer.append(HexDump.intToHex(getChs()));
        buffer.append(" (").append(getChs()).append(" )\n");

        buffer.append("    .chsTables            = ");
        buffer.append(HexDump.intToHex(getChsTables()));
        buffer.append(" (").append(getChsTables()).append(" )\n");

        buffer.append("    .fcMin                = ");
        buffer.append(HexDump.intToHex(getFcMin()));
        buffer.append(" (").append(getFcMin()).append(" )\n");

        buffer.append("    .fcMac                = ");
        buffer.append(HexDump.intToHex(getFcMac()));
        buffer.append(" (").append(getFcMac()).append(" )\n");

        buffer.append("    .csw                  = ");
        buffer.append(HexDump.intToHex(getCsw()));
        buffer.append(" (").append(getCsw()).append(" )\n");

        buffer.append("    .wMagicCreated        = ");
        buffer.append(HexDump.intToHex(getWMagicCreated()));
        buffer.append(" (").append(getWMagicCreated()).append(" )\n");

        buffer.append("    .wMagicRevised        = ");
        buffer.append(HexDump.intToHex(getWMagicRevised()));
        buffer.append(" (").append(getWMagicRevised()).append(" )\n");

        buffer.append("    .wMagicCreatedPrivate = ");
        buffer.append(HexDump.intToHex(getWMagicCreatedPrivate()));
        buffer.append(" (").append(getWMagicCreatedPrivate()).append(" )\n");

        buffer.append("    .wMagicRevisedPrivate = ");
        buffer.append(HexDump.intToHex(getWMagicRevisedPrivate()));
        buffer.append(" (").append(getWMagicRevisedPrivate()).append(" )\n");

        buffer.append("    .pnFbpChpFirst_W6     = ");
        buffer.append(HexDump.intToHex(getPnFbpChpFirst_W6()));
        buffer.append(" (").append(getPnFbpChpFirst_W6()).append(" )\n");

        buffer.append("    .pnChpFirst_W6        = ");
        buffer.append(HexDump.intToHex(getPnChpFirst_W6()));
        buffer.append(" (").append(getPnChpFirst_W6()).append(" )\n");

        buffer.append("    .cpnBteChp_W6         = ");
        buffer.append(HexDump.intToHex(getCpnBteChp_W6()));
        buffer.append(" (").append(getCpnBteChp_W6()).append(" )\n");

        buffer.append("    .pnFbpPapFirst_W6     = ");
        buffer.append(HexDump.intToHex(getPnFbpPapFirst_W6()));
        buffer.append(" (").append(getPnFbpPapFirst_W6()).append(" )\n");

        buffer.append("    .pnPapFirst_W6        = ");
        buffer.append(HexDump.intToHex(getPnPapFirst_W6()));
        buffer.append(" (").append(getPnPapFirst_W6()).append(" )\n");

        buffer.append("    .cpnBtePap_W6         = ");
        buffer.append(HexDump.intToHex(getCpnBtePap_W6()));
        buffer.append(" (").append(getCpnBtePap_W6()).append(" )\n");

        buffer.append("    .pnFbpLvcFirst_W6     = ");
        buffer.append(HexDump.intToHex(getPnFbpLvcFirst_W6()));
        buffer.append(" (").append(getPnFbpLvcFirst_W6()).append(" )\n");

        buffer.append("    .pnLvcFirst_W6        = ");
        buffer.append(HexDump.intToHex(getPnLvcFirst_W6()));
        buffer.append(" (").append(getPnLvcFirst_W6()).append(" )\n");

        buffer.append("    .cpnBteLvc_W6         = ");
        buffer.append(HexDump.intToHex(getCpnBteLvc_W6()));
        buffer.append(" (").append(getCpnBteLvc_W6()).append(" )\n");

        buffer.append("    .lidFE                = ");
        buffer.append(HexDump.intToHex(getLidFE()));
        buffer.append(" (").append(getLidFE()).append(" )\n");

        buffer.append("    .clw                  = ");
        buffer.append(HexDump.intToHex(getClw()));
        buffer.append(" (").append(getClw()).append(" )\n");

        buffer.append("    .cbMac                = ");
        buffer.append(HexDump.intToHex(getCbMac()));
        buffer.append(" (").append(getCbMac()).append(" )\n");

        buffer.append("    .lProductCreated      = ");
        buffer.append(HexDump.intToHex(getLProductCreated()));
        buffer.append(" (").append(getLProductCreated()).append(" )\n");

        buffer.append("    .lProductRevised      = ");
        buffer.append(HexDump.intToHex(getLProductRevised()));
        buffer.append(" (").append(getLProductRevised()).append(" )\n");

        buffer.append("    .ccpText              = ");
        buffer.append(HexDump.intToHex(getCcpText()));
        buffer.append(" (").append(getCcpText()).append(" )\n");

        buffer.append("    .ccpFtn               = ");
        buffer.append(HexDump.intToHex(getCcpFtn()));
        buffer.append(" (").append(getCcpFtn()).append(" )\n");

        buffer.append("    .ccpHdd               = ");
        buffer.append(HexDump.intToHex(getCcpHdd()));
        buffer.append(" (").append(getCcpHdd()).append(" )\n");

        buffer.append("    .ccpMcr               = ");
        buffer.append(HexDump.intToHex(getCcpMcr()));
        buffer.append(" (").append(getCcpMcr()).append(" )\n");

        buffer.append("    .ccpAtn               = ");
        buffer.append(HexDump.intToHex(getCcpAtn()));
        buffer.append(" (").append(getCcpAtn()).append(" )\n");

        buffer.append("    .ccpEdn               = ");
        buffer.append(HexDump.intToHex(getCcpEdn()));
        buffer.append(" (").append(getCcpEdn()).append(" )\n");

        buffer.append("    .ccpTxbx              = ");
        buffer.append(HexDump.intToHex(getCcpTxbx()));
        buffer.append(" (").append(getCcpTxbx()).append(" )\n");

        buffer.append("    .ccpHdrTxbx           = ");
        buffer.append(HexDump.intToHex(getCcpHdrTxbx()));
        buffer.append(" (").append(getCcpHdrTxbx()).append(" )\n");

        buffer.append("    .pnFbpChpFirst        = ");
        buffer.append(HexDump.intToHex(getPnFbpChpFirst()));
        buffer.append(" (").append(getPnFbpChpFirst()).append(" )\n");

        buffer.append("    .pnChpFirst           = ");
        buffer.append(HexDump.intToHex(getPnChpFirst()));
        buffer.append(" (").append(getPnChpFirst()).append(" )\n");

        buffer.append("    .cpnBteChp            = ");
        buffer.append(HexDump.intToHex(getCpnBteChp()));
        buffer.append(" (").append(getCpnBteChp()).append(" )\n");

        buffer.append("    .pnFbpPapFirst        = ");
        buffer.append(HexDump.intToHex(getPnFbpPapFirst()));
        buffer.append(" (").append(getPnFbpPapFirst()).append(" )\n");

        buffer.append("    .pnPapFirst           = ");
        buffer.append(HexDump.intToHex(getPnPapFirst()));
        buffer.append(" (").append(getPnPapFirst()).append(" )\n");

        buffer.append("    .cpnBtePap            = ");
        buffer.append(HexDump.intToHex(getCpnBtePap()));
        buffer.append(" (").append(getCpnBtePap()).append(" )\n");

        buffer.append("    .pnFbpLvcFirst        = ");
        buffer.append(HexDump.intToHex(getPnFbpLvcFirst()));
        buffer.append(" (").append(getPnFbpLvcFirst()).append(" )\n");

        buffer.append("    .pnLvcFirst           = ");
        buffer.append(HexDump.intToHex(getPnLvcFirst()));
        buffer.append(" (").append(getPnLvcFirst()).append(" )\n");

        buffer.append("    .cpnBteLvc            = ");
        buffer.append(HexDump.intToHex(getCpnBteLvc()));
        buffer.append(" (").append(getCpnBteLvc()).append(" )\n");

        buffer.append("    .fcIslandFirst        = ");
        buffer.append(HexDump.intToHex(getFcIslandFirst()));
        buffer.append(" (").append(getFcIslandFirst()).append(" )\n");

        buffer.append("    .fcIslandLim          = ");
        buffer.append(HexDump.intToHex(getFcIslandLim()));
        buffer.append(" (").append(getFcIslandLim()).append(" )\n");

        buffer.append("    .cfclcb               = ");
        buffer.append(HexDump.intToHex(getCfclcb()));
        buffer.append(" (").append(getCfclcb()).append(" )\n");

        buffer.append("    .fcStshfOrig          = ");
        buffer.append(HexDump.intToHex(getFcStshfOrig()));
        buffer.append(" (").append(getFcStshfOrig()).append(" )\n");

        buffer.append("    .lcbStshfOrig         = ");
        buffer.append(HexDump.intToHex(getLcbStshfOrig()));
        buffer.append(" (").append(getLcbStshfOrig()).append(" )\n");

        buffer.append("    .fcStshf              = ");
        buffer.append(HexDump.intToHex(getFcStshf()));
        buffer.append(" (").append(getFcStshf()).append(" )\n");

        buffer.append("    .lcbStshf             = ");
        buffer.append(HexDump.intToHex(getLcbStshf()));
        buffer.append(" (").append(getLcbStshf()).append(" )\n");

        buffer.append("    .fcPlcffndRef         = ");
        buffer.append(HexDump.intToHex(getFcPlcffndRef()));
        buffer.append(" (").append(getFcPlcffndRef()).append(" )\n");

        buffer.append("    .lcbPlcffndRef        = ");
        buffer.append(HexDump.intToHex(getLcbPlcffndRef()));
        buffer.append(" (").append(getLcbPlcffndRef()).append(" )\n");

        buffer.append("    .fcPlcffndTxt         = ");
        buffer.append(HexDump.intToHex(getFcPlcffndTxt()));
        buffer.append(" (").append(getFcPlcffndTxt()).append(" )\n");

        buffer.append("    .lcbPlcffndTxt        = ");
        buffer.append(HexDump.intToHex(getLcbPlcffndTxt()));
        buffer.append(" (").append(getLcbPlcffndTxt()).append(" )\n");

        buffer.append("    .fcPlcfandRef         = ");
        buffer.append(HexDump.intToHex(getFcPlcfandRef()));
        buffer.append(" (").append(getFcPlcfandRef()).append(" )\n");

        buffer.append("    .lcbPlcfandRef        = ");
        buffer.append(HexDump.intToHex(getLcbPlcfandRef()));
        buffer.append(" (").append(getLcbPlcfandRef()).append(" )\n");

        buffer.append("    .fcPlcfandTxt         = ");
        buffer.append(HexDump.intToHex(getFcPlcfandTxt()));
        buffer.append(" (").append(getFcPlcfandTxt()).append(" )\n");

        buffer.append("    .lcbPlcfandTxt        = ");
        buffer.append(HexDump.intToHex(getLcbPlcfandTxt()));
        buffer.append(" (").append(getLcbPlcfandTxt()).append(" )\n");

        buffer.append("    .fcPlcfsed            = ");
        buffer.append(HexDump.intToHex(getFcPlcfsed()));
        buffer.append(" (").append(getFcPlcfsed()).append(" )\n");

        buffer.append("    .lcbPlcfsed           = ");
        buffer.append(HexDump.intToHex(getLcbPlcfsed()));
        buffer.append(" (").append(getLcbPlcfsed()).append(" )\n");

        buffer.append("    .fcPlcpad             = ");
        buffer.append(HexDump.intToHex(getFcPlcpad()));
        buffer.append(" (").append(getFcPlcpad()).append(" )\n");

        buffer.append("    .lcbPlcpad            = ");
        buffer.append(HexDump.intToHex(getLcbPlcpad()));
        buffer.append(" (").append(getLcbPlcpad()).append(" )\n");

        buffer.append("    .fcPlcfphe            = ");
        buffer.append(HexDump.intToHex(getFcPlcfphe()));
        buffer.append(" (").append(getFcPlcfphe()).append(" )\n");

        buffer.append("    .lcbPlcfphe           = ");
        buffer.append(HexDump.intToHex(getLcbPlcfphe()));
        buffer.append(" (").append(getLcbPlcfphe()).append(" )\n");

        buffer.append("    .fcSttbfglsy          = ");
        buffer.append(HexDump.intToHex(getFcSttbfglsy()));
        buffer.append(" (").append(getFcSttbfglsy()).append(" )\n");

        buffer.append("    .lcbSttbfglsy         = ");
        buffer.append(HexDump.intToHex(getLcbSttbfglsy()));
        buffer.append(" (").append(getLcbSttbfglsy()).append(" )\n");

        buffer.append("    .fcPlcfglsy           = ");
        buffer.append(HexDump.intToHex(getFcPlcfglsy()));
        buffer.append(" (").append(getFcPlcfglsy()).append(" )\n");

        buffer.append("    .lcbPlcfglsy          = ");
        buffer.append(HexDump.intToHex(getLcbPlcfglsy()));
        buffer.append(" (").append(getLcbPlcfglsy()).append(" )\n");

        buffer.append("    .fcPlcfhdd            = ");
        buffer.append(HexDump.intToHex(getFcPlcfhdd()));
        buffer.append(" (").append(getFcPlcfhdd()).append(" )\n");

        buffer.append("    .lcbPlcfhdd           = ");
        buffer.append(HexDump.intToHex(getLcbPlcfhdd()));
        buffer.append(" (").append(getLcbPlcfhdd()).append(" )\n");

        buffer.append("    .fcPlcfbteChpx        = ");
        buffer.append(HexDump.intToHex(getFcPlcfbteChpx()));
        buffer.append(" (").append(getFcPlcfbteChpx()).append(" )\n");

        buffer.append("    .lcbPlcfbteChpx       = ");
        buffer.append(HexDump.intToHex(getLcbPlcfbteChpx()));
        buffer.append(" (").append(getLcbPlcfbteChpx()).append(" )\n");

        buffer.append("    .fcPlcfbtePapx        = ");
        buffer.append(HexDump.intToHex(getFcPlcfbtePapx()));
        buffer.append(" (").append(getFcPlcfbtePapx()).append(" )\n");

        buffer.append("    .lcbPlcfbtePapx       = ");
        buffer.append(HexDump.intToHex(getLcbPlcfbtePapx()));
        buffer.append(" (").append(getLcbPlcfbtePapx()).append(" )\n");

        buffer.append("    .fcPlcfsea            = ");
        buffer.append(HexDump.intToHex(getFcPlcfsea()));
        buffer.append(" (").append(getFcPlcfsea()).append(" )\n");

        buffer.append("    .lcbPlcfsea           = ");
        buffer.append(HexDump.intToHex(getLcbPlcfsea()));
        buffer.append(" (").append(getLcbPlcfsea()).append(" )\n");

        buffer.append("    .fcSttbfffn           = ");
        buffer.append(HexDump.intToHex(getFcSttbfffn()));
        buffer.append(" (").append(getFcSttbfffn()).append(" )\n");

        buffer.append("    .lcbSttbfffn          = ");
        buffer.append(HexDump.intToHex(getLcbSttbfffn()));
        buffer.append(" (").append(getLcbSttbfffn()).append(" )\n");

        buffer.append("    .fcPlcffldMom         = ");
        buffer.append(HexDump.intToHex(getFcPlcffldMom()));
        buffer.append(" (").append(getFcPlcffldMom()).append(" )\n");

        buffer.append("    .lcbPlcffldMom        = ");
        buffer.append(HexDump.intToHex(getLcbPlcffldMom()));
        buffer.append(" (").append(getLcbPlcffldMom()).append(" )\n");

        buffer.append("    .fcPlcffldHdr         = ");
        buffer.append(HexDump.intToHex(getFcPlcffldHdr()));
        buffer.append(" (").append(getFcPlcffldHdr()).append(" )\n");

        buffer.append("    .lcbPlcffldHdr        = ");
        buffer.append(HexDump.intToHex(getLcbPlcffldHdr()));
        buffer.append(" (").append(getLcbPlcffldHdr()).append(" )\n");

        buffer.append("    .fcPlcffldFtn         = ");
        buffer.append(HexDump.intToHex(getFcPlcffldFtn()));
        buffer.append(" (").append(getFcPlcffldFtn()).append(" )\n");

        buffer.append("    .lcbPlcffldFtn        = ");
        buffer.append(HexDump.intToHex(getLcbPlcffldFtn()));
        buffer.append(" (").append(getLcbPlcffldFtn()).append(" )\n");

        buffer.append("    .fcPlcffldAtn         = ");
        buffer.append(HexDump.intToHex(getFcPlcffldAtn()));
        buffer.append(" (").append(getFcPlcffldAtn()).append(" )\n");

        buffer.append("    .lcbPlcffldAtn        = ");
        buffer.append(HexDump.intToHex(getLcbPlcffldAtn()));
        buffer.append(" (").append(getLcbPlcffldAtn()).append(" )\n");

        buffer.append("    .fcPlcffldMcr         = ");
        buffer.append(HexDump.intToHex(getFcPlcffldMcr()));
        buffer.append(" (").append(getFcPlcffldMcr()).append(" )\n");

        buffer.append("    .lcbPlcffldMcr        = ");
        buffer.append(HexDump.intToHex(getLcbPlcffldMcr()));
        buffer.append(" (").append(getLcbPlcffldMcr()).append(" )\n");

        buffer.append("    .fcSttbfbkmk          = ");
        buffer.append(HexDump.intToHex(getFcSttbfbkmk()));
        buffer.append(" (").append(getFcSttbfbkmk()).append(" )\n");

        buffer.append("    .lcbSttbfbkmk         = ");
        buffer.append(HexDump.intToHex(getLcbSttbfbkmk()));
        buffer.append(" (").append(getLcbSttbfbkmk()).append(" )\n");

        buffer.append("    .fcPlcfbkf            = ");
        buffer.append(HexDump.intToHex(getFcPlcfbkf()));
        buffer.append(" (").append(getFcPlcfbkf()).append(" )\n");

        buffer.append("    .lcbPlcfbkf           = ");
        buffer.append(HexDump.intToHex(getLcbPlcfbkf()));
        buffer.append(" (").append(getLcbPlcfbkf()).append(" )\n");

        buffer.append("    .fcPlcfbkl            = ");
        buffer.append(HexDump.intToHex(getFcPlcfbkl()));
        buffer.append(" (").append(getFcPlcfbkl()).append(" )\n");

        buffer.append("    .lcbPlcfbkl           = ");
        buffer.append(HexDump.intToHex(getLcbPlcfbkl()));
        buffer.append(" (").append(getLcbPlcfbkl()).append(" )\n");

        buffer.append("    .fcCmds               = ");
        buffer.append(HexDump.intToHex(getFcCmds()));
        buffer.append(" (").append(getFcCmds()).append(" )\n");

        buffer.append("    .lcbCmds              = ");
        buffer.append(HexDump.intToHex(getLcbCmds()));
        buffer.append(" (").append(getLcbCmds()).append(" )\n");

        buffer.append("    .fcPlcmcr             = ");
        buffer.append(HexDump.intToHex(getFcPlcmcr()));
        buffer.append(" (").append(getFcPlcmcr()).append(" )\n");

        buffer.append("    .lcbPlcmcr            = ");
        buffer.append(HexDump.intToHex(getLcbPlcmcr()));
        buffer.append(" (").append(getLcbPlcmcr()).append(" )\n");

        buffer.append("    .fcSttbfmcr           = ");
        buffer.append(HexDump.intToHex(getFcSttbfmcr()));
        buffer.append(" (").append(getFcSttbfmcr()).append(" )\n");

        buffer.append("    .lcbSttbfmcr          = ");
        buffer.append(HexDump.intToHex(getLcbSttbfmcr()));
        buffer.append(" (").append(getLcbSttbfmcr()).append(" )\n");

        buffer.append("    .fcPrDrvr             = ");
        buffer.append(HexDump.intToHex(getFcPrDrvr()));
        buffer.append(" (").append(getFcPrDrvr()).append(" )\n");

        buffer.append("    .lcbPrDrvr            = ");
        buffer.append(HexDump.intToHex(getLcbPrDrvr()));
        buffer.append(" (").append(getLcbPrDrvr()).append(" )\n");

        buffer.append("    .fcPrEnvPort          = ");
        buffer.append(HexDump.intToHex(getFcPrEnvPort()));
        buffer.append(" (").append(getFcPrEnvPort()).append(" )\n");

        buffer.append("    .lcbPrEnvPort         = ");
        buffer.append(HexDump.intToHex(getLcbPrEnvPort()));
        buffer.append(" (").append(getLcbPrEnvPort()).append(" )\n");

        buffer.append("    .fcPrEnvLand          = ");
        buffer.append(HexDump.intToHex(getFcPrEnvLand()));
        buffer.append(" (").append(getFcPrEnvLand()).append(" )\n");

        buffer.append("    .lcbPrEnvLand         = ");
        buffer.append(HexDump.intToHex(getLcbPrEnvLand()));
        buffer.append(" (").append(getLcbPrEnvLand()).append(" )\n");

        buffer.append("    .fcWss                = ");
        buffer.append(HexDump.intToHex(getFcWss()));
        buffer.append(" (").append(getFcWss()).append(" )\n");

        buffer.append("    .lcbWss               = ");
        buffer.append(HexDump.intToHex(getLcbWss()));
        buffer.append(" (").append(getLcbWss()).append(" )\n");

        buffer.append("    .fcDop                = ");
        buffer.append(HexDump.intToHex(getFcDop()));
        buffer.append(" (").append(getFcDop()).append(" )\n");

        buffer.append("    .lcbDop               = ");
        buffer.append(HexDump.intToHex(getLcbDop()));
        buffer.append(" (").append(getLcbDop()).append(" )\n");

        buffer.append("    .fcSttbfAssoc         = ");
        buffer.append(HexDump.intToHex(getFcSttbfAssoc()));
        buffer.append(" (").append(getFcSttbfAssoc()).append(" )\n");

        buffer.append("    .lcbSttbfAssoc        = ");
        buffer.append(HexDump.intToHex(getLcbSttbfAssoc()));
        buffer.append(" (").append(getLcbSttbfAssoc()).append(" )\n");

        buffer.append("    .fcClx                = ");
        buffer.append(HexDump.intToHex(getFcClx()));
        buffer.append(" (").append(getFcClx()).append(" )\n");

        buffer.append("    .lcbClx               = ");
        buffer.append(HexDump.intToHex(getLcbClx()));
        buffer.append(" (").append(getLcbClx()).append(" )\n");

        buffer.append("    .fcPlcfpgdFtn         = ");
        buffer.append(HexDump.intToHex(getFcPlcfpgdFtn()));
        buffer.append(" (").append(getFcPlcfpgdFtn()).append(" )\n");

        buffer.append("    .lcbPlcfpgdFtn        = ");
        buffer.append(HexDump.intToHex(getLcbPlcfpgdFtn()));
        buffer.append(" (").append(getLcbPlcfpgdFtn()).append(" )\n");

        buffer.append("    .fcAutosaveSource     = ");
        buffer.append(HexDump.intToHex(getFcAutosaveSource()));
        buffer.append(" (").append(getFcAutosaveSource()).append(" )\n");

        buffer.append("    .lcbAutosaveSource    = ");
        buffer.append(HexDump.intToHex(getLcbAutosaveSource()));
        buffer.append(" (").append(getLcbAutosaveSource()).append(" )\n");

        buffer.append("    .fcGrpXstAtnOwners    = ");
        buffer.append(HexDump.intToHex(getFcGrpXstAtnOwners()));
        buffer.append(" (").append(getFcGrpXstAtnOwners()).append(" )\n");

        buffer.append("    .lcbGrpXstAtnOwners   = ");
        buffer.append(HexDump.intToHex(getLcbGrpXstAtnOwners()));
        buffer.append(" (").append(getLcbGrpXstAtnOwners()).append(" )\n");

        buffer.append("    .fcSttbfAtnbkmk       = ");
        buffer.append(HexDump.intToHex(getFcSttbfAtnbkmk()));
        buffer.append(" (").append(getFcSttbfAtnbkmk()).append(" )\n");

        buffer.append("    .lcbSttbfAtnbkmk      = ");
        buffer.append(HexDump.intToHex(getLcbSttbfAtnbkmk()));
        buffer.append(" (").append(getLcbSttbfAtnbkmk()).append(" )\n");

        buffer.append("    .fcPlcdoaMom          = ");
        buffer.append(HexDump.intToHex(getFcPlcdoaMom()));
        buffer.append(" (").append(getFcPlcdoaMom()).append(" )\n");

        buffer.append("    .lcbPlcdoaMom         = ");
        buffer.append(HexDump.intToHex(getLcbPlcdoaMom()));
        buffer.append(" (").append(getLcbPlcdoaMom()).append(" )\n");

        buffer.append("    .fcPlcdoaHdr          = ");
        buffer.append(HexDump.intToHex(getFcPlcdoaHdr()));
        buffer.append(" (").append(getFcPlcdoaHdr()).append(" )\n");

        buffer.append("    .lcbPlcdoaHdr         = ");
        buffer.append(HexDump.intToHex(getLcbPlcdoaHdr()));
        buffer.append(" (").append(getLcbPlcdoaHdr()).append(" )\n");

        buffer.append("    .fcPlcspaMom          = ");
        buffer.append(HexDump.intToHex(getFcPlcspaMom()));
        buffer.append(" (").append(getFcPlcspaMom()).append(" )\n");

        buffer.append("    .lcbPlcspaMom         = ");
        buffer.append(HexDump.intToHex(getLcbPlcspaMom()));
        buffer.append(" (").append(getLcbPlcspaMom()).append(" )\n");

        buffer.append("    .fcPlcspaHdr          = ");
        buffer.append(HexDump.intToHex(getFcPlcspaHdr()));
        buffer.append(" (").append(getFcPlcspaHdr()).append(" )\n");

        buffer.append("    .lcbPlcspaHdr         = ");
        buffer.append(HexDump.intToHex(getLcbPlcspaHdr()));
        buffer.append(" (").append(getLcbPlcspaHdr()).append(" )\n");

        buffer.append("    .fcPlcfAtnbkf         = ");
        buffer.append(HexDump.intToHex(getFcPlcfAtnbkf()));
        buffer.append(" (").append(getFcPlcfAtnbkf()).append(" )\n");

        buffer.append("    .lcbPlcfAtnbkf        = ");
        buffer.append(HexDump.intToHex(getLcbPlcfAtnbkf()));
        buffer.append(" (").append(getLcbPlcfAtnbkf()).append(" )\n");

        buffer.append("    .fcPlcfAtnbkl         = ");
        buffer.append(HexDump.intToHex(getFcPlcfAtnbkl()));
        buffer.append(" (").append(getFcPlcfAtnbkl()).append(" )\n");

        buffer.append("    .lcbPlcfAtnbkl        = ");
        buffer.append(HexDump.intToHex(getLcbPlcfAtnbkl()));
        buffer.append(" (").append(getLcbPlcfAtnbkl()).append(" )\n");

        buffer.append("    .fcPms                = ");
        buffer.append(HexDump.intToHex(getFcPms()));
        buffer.append(" (").append(getFcPms()).append(" )\n");

        buffer.append("    .lcbPms               = ");
        buffer.append(HexDump.intToHex(getLcbPms()));
        buffer.append(" (").append(getLcbPms()).append(" )\n");

        buffer.append("    .fcFormFldSttbs       = ");
        buffer.append(HexDump.intToHex(getFcFormFldSttbs()));
        buffer.append(" (").append(getFcFormFldSttbs()).append(" )\n");

        buffer.append("    .lcbFormFldSttbs      = ");
        buffer.append(HexDump.intToHex(getLcbFormFldSttbs()));
        buffer.append(" (").append(getLcbFormFldSttbs()).append(" )\n");

        buffer.append("    .fcPlcfendRef         = ");
        buffer.append(HexDump.intToHex(getFcPlcfendRef()));
        buffer.append(" (").append(getFcPlcfendRef()).append(" )\n");

        buffer.append("    .lcbPlcfendRef        = ");
        buffer.append(HexDump.intToHex(getLcbPlcfendRef()));
        buffer.append(" (").append(getLcbPlcfendRef()).append(" )\n");

        buffer.append("    .fcPlcfendTxt         = ");
        buffer.append(HexDump.intToHex(getFcPlcfendTxt()));
        buffer.append(" (").append(getFcPlcfendTxt()).append(" )\n");

        buffer.append("    .lcbPlcfendTxt        = ");
        buffer.append(HexDump.intToHex(getLcbPlcfendTxt()));
        buffer.append(" (").append(getLcbPlcfendTxt()).append(" )\n");

        buffer.append("    .fcPlcffldEdn         = ");
        buffer.append(HexDump.intToHex(getFcPlcffldEdn()));
        buffer.append(" (").append(getFcPlcffldEdn()).append(" )\n");

        buffer.append("    .lcbPlcffldEdn        = ");
        buffer.append(HexDump.intToHex(getLcbPlcffldEdn()));
        buffer.append(" (").append(getLcbPlcffldEdn()).append(" )\n");

        buffer.append("    .fcPlcfpgdEdn         = ");
        buffer.append(HexDump.intToHex(getFcPlcfpgdEdn()));
        buffer.append(" (").append(getFcPlcfpgdEdn()).append(" )\n");

        buffer.append("    .lcbPlcfpgdEdn        = ");
        buffer.append(HexDump.intToHex(getLcbPlcfpgdEdn()));
        buffer.append(" (").append(getLcbPlcfpgdEdn()).append(" )\n");

        buffer.append("    .fcDggInfo            = ");
        buffer.append(HexDump.intToHex(getFcDggInfo()));
        buffer.append(" (").append(getFcDggInfo()).append(" )\n");

        buffer.append("    .lcbDggInfo           = ");
        buffer.append(HexDump.intToHex(getLcbDggInfo()));
        buffer.append(" (").append(getLcbDggInfo()).append(" )\n");

        buffer.append("    .fcSttbfRMark         = ");
        buffer.append(HexDump.intToHex(getFcSttbfRMark()));
        buffer.append(" (").append(getFcSttbfRMark()).append(" )\n");

        buffer.append("    .lcbSttbfRMark        = ");
        buffer.append(HexDump.intToHex(getLcbSttbfRMark()));
        buffer.append(" (").append(getLcbSttbfRMark()).append(" )\n");

        buffer.append("    .fcSttbCaption        = ");
        buffer.append(HexDump.intToHex(getFcSttbCaption()));
        buffer.append(" (").append(getFcSttbCaption()).append(" )\n");

        buffer.append("    .lcbSttbCaption       = ");
        buffer.append(HexDump.intToHex(getLcbSttbCaption()));
        buffer.append(" (").append(getLcbSttbCaption()).append(" )\n");

        buffer.append("    .fcSttbAutoCaption    = ");
        buffer.append(HexDump.intToHex(getFcSttbAutoCaption()));
        buffer.append(" (").append(getFcSttbAutoCaption()).append(" )\n");

        buffer.append("    .lcbSttbAutoCaption   = ");
        buffer.append(HexDump.intToHex(getLcbSttbAutoCaption()));
        buffer.append(" (").append(getLcbSttbAutoCaption()).append(" )\n");

        buffer.append("    .fcPlcfwkb            = ");
        buffer.append(HexDump.intToHex(getFcPlcfwkb()));
        buffer.append(" (").append(getFcPlcfwkb()).append(" )\n");

        buffer.append("    .lcbPlcfwkb           = ");
        buffer.append(HexDump.intToHex(getLcbPlcfwkb()));
        buffer.append(" (").append(getLcbPlcfwkb()).append(" )\n");

        buffer.append("    .fcPlcfspl            = ");
        buffer.append(HexDump.intToHex(getFcPlcfspl()));
        buffer.append(" (").append(getFcPlcfspl()).append(" )\n");

        buffer.append("    .lcbPlcfspl           = ");
        buffer.append(HexDump.intToHex(getLcbPlcfspl()));
        buffer.append(" (").append(getLcbPlcfspl()).append(" )\n");

        buffer.append("    .fcPlcftxbxTxt        = ");
        buffer.append(HexDump.intToHex(getFcPlcftxbxTxt()));
        buffer.append(" (").append(getFcPlcftxbxTxt()).append(" )\n");

        buffer.append("    .lcbPlcftxbxTxt       = ");
        buffer.append(HexDump.intToHex(getLcbPlcftxbxTxt()));
        buffer.append(" (").append(getLcbPlcftxbxTxt()).append(" )\n");

        buffer.append("    .fcPlcffldTxbx        = ");
        buffer.append(HexDump.intToHex(getFcPlcffldTxbx()));
        buffer.append(" (").append(getFcPlcffldTxbx()).append(" )\n");

        buffer.append("    .lcbPlcffldTxbx       = ");
        buffer.append(HexDump.intToHex(getLcbPlcffldTxbx()));
        buffer.append(" (").append(getLcbPlcffldTxbx()).append(" )\n");

        buffer.append("    .fcPlcfhdrtxbxTxt     = ");
        buffer.append(HexDump.intToHex(getFcPlcfhdrtxbxTxt()));
        buffer.append(" (").append(getFcPlcfhdrtxbxTxt()).append(" )\n");

        buffer.append("    .lcbPlcfhdrtxbxTxt    = ");
        buffer.append(HexDump.intToHex(getLcbPlcfhdrtxbxTxt()));
        buffer.append(" (").append(getLcbPlcfhdrtxbxTxt()).append(" )\n");

        buffer.append("    .fcPlcffldHdrTxbx     = ");
        buffer.append(HexDump.intToHex(getFcPlcffldHdrTxbx()));
        buffer.append(" (").append(getFcPlcffldHdrTxbx()).append(" )\n");

        buffer.append("    .lcbPlcffldHdrTxbx    = ");
        buffer.append(HexDump.intToHex(getLcbPlcffldHdrTxbx()));
        buffer.append(" (").append(getLcbPlcffldHdrTxbx()).append(" )\n");

        buffer.append("    .fcStwUser            = ");
        buffer.append(HexDump.intToHex(getFcStwUser()));
        buffer.append(" (").append(getFcStwUser()).append(" )\n");

        buffer.append("    .lcbStwUser           = ");
        buffer.append(HexDump.intToHex(getLcbStwUser()));
        buffer.append(" (").append(getLcbStwUser()).append(" )\n");

        buffer.append("    .fcSttbttmbd          = ");
        buffer.append(HexDump.intToHex(getFcSttbttmbd()));
        buffer.append(" (").append(getFcSttbttmbd()).append(" )\n");

        buffer.append("    .cbSttbttmbd          = ");
        buffer.append(HexDump.intToHex(getCbSttbttmbd()));
        buffer.append(" (").append(getCbSttbttmbd()).append(" )\n");

        buffer.append("    .fcUnused             = ");
        buffer.append(HexDump.intToHex(getFcUnused()));
        buffer.append(" (").append(getFcUnused()).append(" )\n");

        buffer.append("    .lcbUnused            = ");
        buffer.append(HexDump.intToHex(getLcbUnused()));
        buffer.append(" (").append(getLcbUnused()).append(" )\n");

        buffer.append("    .fcPgdMother          = ");
        buffer.append(HexDump.intToHex(getFcPgdMother()));
        buffer.append(" (").append(getFcPgdMother()).append(" )\n");

        buffer.append("    .lcbPgdMother         = ");
        buffer.append(HexDump.intToHex(getLcbPgdMother()));
        buffer.append(" (").append(getLcbPgdMother()).append(" )\n");

        buffer.append("    .fcBkdMother          = ");
        buffer.append(HexDump.intToHex(getFcBkdMother()));
        buffer.append(" (").append(getFcBkdMother()).append(" )\n");

        buffer.append("    .lcbBkdMother         = ");
        buffer.append(HexDump.intToHex(getLcbBkdMother()));
        buffer.append(" (").append(getLcbBkdMother()).append(" )\n");

        buffer.append("    .fcPgdFtn             = ");
        buffer.append(HexDump.intToHex(getFcPgdFtn()));
        buffer.append(" (").append(getFcPgdFtn()).append(" )\n");

        buffer.append("    .lcbPgdFtn            = ");
        buffer.append(HexDump.intToHex(getLcbPgdFtn()));
        buffer.append(" (").append(getLcbPgdFtn()).append(" )\n");

        buffer.append("    .fcBkdFtn             = ");
        buffer.append(HexDump.intToHex(getFcBkdFtn()));
        buffer.append(" (").append(getFcBkdFtn()).append(" )\n");

        buffer.append("    .lcbBkdFtn            = ");
        buffer.append(HexDump.intToHex(getLcbBkdFtn()));
        buffer.append(" (").append(getLcbBkdFtn()).append(" )\n");

        buffer.append("    .fcPgdEdn             = ");
        buffer.append(HexDump.intToHex(getFcPgdEdn()));
        buffer.append(" (").append(getFcPgdEdn()).append(" )\n");

        buffer.append("    .lcbPgdEdn            = ");
        buffer.append(HexDump.intToHex(getLcbPgdEdn()));
        buffer.append(" (").append(getLcbPgdEdn()).append(" )\n");

        buffer.append("    .fcBkdEdn             = ");
        buffer.append(HexDump.intToHex(getFcBkdEdn()));
        buffer.append(" (").append(getFcBkdEdn()).append(" )\n");

        buffer.append("    .lcbBkdEdn            = ");
        buffer.append(HexDump.intToHex(getLcbBkdEdn()));
        buffer.append(" (").append(getLcbBkdEdn()).append(" )\n");

        buffer.append("    .fcSttbfIntlFld       = ");
        buffer.append(HexDump.intToHex(getFcSttbfIntlFld()));
        buffer.append(" (").append(getFcSttbfIntlFld()).append(" )\n");

        buffer.append("    .lcbSttbfIntlFld      = ");
        buffer.append(HexDump.intToHex(getLcbSttbfIntlFld()));
        buffer.append(" (").append(getLcbSttbfIntlFld()).append(" )\n");

        buffer.append("    .fcRouteSlip          = ");
        buffer.append(HexDump.intToHex(getFcRouteSlip()));
        buffer.append(" (").append(getFcRouteSlip()).append(" )\n");

        buffer.append("    .lcbRouteSlip         = ");
        buffer.append(HexDump.intToHex(getLcbRouteSlip()));
        buffer.append(" (").append(getLcbRouteSlip()).append(" )\n");

        buffer.append("    .fcSttbSavedBy        = ");
        buffer.append(HexDump.intToHex(getFcSttbSavedBy()));
        buffer.append(" (").append(getFcSttbSavedBy()).append(" )\n");

        buffer.append("    .lcbSttbSavedBy       = ");
        buffer.append(HexDump.intToHex(getLcbSttbSavedBy()));
        buffer.append(" (").append(getLcbSttbSavedBy()).append(" )\n");

        buffer.append("    .fcSttbFnm            = ");
        buffer.append(HexDump.intToHex(getFcSttbFnm()));
        buffer.append(" (").append(getFcSttbFnm()).append(" )\n");

        buffer.append("    .lcbSttbFnm           = ");
        buffer.append(HexDump.intToHex(getLcbSttbFnm()));
        buffer.append(" (").append(getLcbSttbFnm()).append(" )\n");

        buffer.append("    .fcPlcfLst            = ");
        buffer.append(HexDump.intToHex(getFcPlcfLst()));
        buffer.append(" (").append(getFcPlcfLst()).append(" )\n");

        buffer.append("    .lcbPlcfLst           = ");
        buffer.append(HexDump.intToHex(getLcbPlcfLst()));
        buffer.append(" (").append(getLcbPlcfLst()).append(" )\n");

        buffer.append("    .fcPlfLfo             = ");
        buffer.append(HexDump.intToHex(getFcPlfLfo()));
        buffer.append(" (").append(getFcPlfLfo()).append(" )\n");

        buffer.append("    .lcbPlfLfo            = ");
        buffer.append(HexDump.intToHex(getLcbPlfLfo()));
        buffer.append(" (").append(getLcbPlfLfo()).append(" )\n");

        buffer.append("    .fcPlcftxbxBkd        = ");
        buffer.append(HexDump.intToHex(getFcPlcftxbxBkd()));
        buffer.append(" (").append(getFcPlcftxbxBkd()).append(" )\n");

        buffer.append("    .lcbPlcftxbxBkd       = ");
        buffer.append(HexDump.intToHex(getLcbPlcftxbxBkd()));
        buffer.append(" (").append(getLcbPlcftxbxBkd()).append(" )\n");

        buffer.append("    .fcPlcftxbxHdrBkd     = ");
        buffer.append(HexDump.intToHex(getFcPlcftxbxHdrBkd()));
        buffer.append(" (").append(getFcPlcftxbxHdrBkd()).append(" )\n");

        buffer.append("    .lcbPlcftxbxHdrBkd    = ");
        buffer.append(HexDump.intToHex(getLcbPlcftxbxHdrBkd()));
        buffer.append(" (").append(getLcbPlcftxbxHdrBkd()).append(" )\n");

        buffer.append("    .fcDocUndo            = ");
        buffer.append(HexDump.intToHex(getFcDocUndo()));
        buffer.append(" (").append(getFcDocUndo()).append(" )\n");

        buffer.append("    .lcbDocUndo           = ");
        buffer.append(HexDump.intToHex(getLcbDocUndo()));
        buffer.append(" (").append(getLcbDocUndo()).append(" )\n");

        buffer.append("    .fcRgbuse             = ");
        buffer.append(HexDump.intToHex(getFcRgbuse()));
        buffer.append(" (").append(getFcRgbuse()).append(" )\n");

        buffer.append("    .lcbRgbuse            = ");
        buffer.append(HexDump.intToHex(getLcbRgbuse()));
        buffer.append(" (").append(getLcbRgbuse()).append(" )\n");

        buffer.append("    .fcUsp                = ");
        buffer.append(HexDump.intToHex(getFcUsp()));
        buffer.append(" (").append(getFcUsp()).append(" )\n");

        buffer.append("    .lcbUsp               = ");
        buffer.append(HexDump.intToHex(getLcbUsp()));
        buffer.append(" (").append(getLcbUsp()).append(" )\n");

        buffer.append("    .fcUskf               = ");
        buffer.append(HexDump.intToHex(getFcUskf()));
        buffer.append(" (").append(getFcUskf()).append(" )\n");

        buffer.append("    .lcbUskf              = ");
        buffer.append(HexDump.intToHex(getLcbUskf()));
        buffer.append(" (").append(getLcbUskf()).append(" )\n");

        buffer.append("    .fcPlcupcRgbuse       = ");
        buffer.append(HexDump.intToHex(getFcPlcupcRgbuse()));
        buffer.append(" (").append(getFcPlcupcRgbuse()).append(" )\n");

        buffer.append("    .lcbPlcupcRgbuse      = ");
        buffer.append(HexDump.intToHex(getLcbPlcupcRgbuse()));
        buffer.append(" (").append(getLcbPlcupcRgbuse()).append(" )\n");

        buffer.append("    .fcPlcupcUsp          = ");
        buffer.append(HexDump.intToHex(getFcPlcupcUsp()));
        buffer.append(" (").append(getFcPlcupcUsp()).append(" )\n");

        buffer.append("    .lcbPlcupcUsp         = ");
        buffer.append(HexDump.intToHex(getLcbPlcupcUsp()));
        buffer.append(" (").append(getLcbPlcupcUsp()).append(" )\n");

        buffer.append("    .fcSttbGlsyStyle      = ");
        buffer.append(HexDump.intToHex(getFcSttbGlsyStyle()));
        buffer.append(" (").append(getFcSttbGlsyStyle()).append(" )\n");

        buffer.append("    .lcbSttbGlsyStyle     = ");
        buffer.append(HexDump.intToHex(getLcbSttbGlsyStyle()));
        buffer.append(" (").append(getLcbSttbGlsyStyle()).append(" )\n");

        buffer.append("    .fcPlgosl             = ");
        buffer.append(HexDump.intToHex(getFcPlgosl()));
        buffer.append(" (").append(getFcPlgosl()).append(" )\n");

        buffer.append("    .lcbPlgosl            = ");
        buffer.append(HexDump.intToHex(getLcbPlgosl()));
        buffer.append(" (").append(getLcbPlgosl()).append(" )\n");

        buffer.append("    .fcPlcocx             = ");
        buffer.append(HexDump.intToHex(getFcPlcocx()));
        buffer.append(" (").append(getFcPlcocx()).append(" )\n");

        buffer.append("    .lcbPlcocx            = ");
        buffer.append(HexDump.intToHex(getLcbPlcocx()));
        buffer.append(" (").append(getLcbPlcocx()).append(" )\n");

        buffer.append("    .fcPlcfbteLvc         = ");
        buffer.append(HexDump.intToHex(getFcPlcfbteLvc()));
        buffer.append(" (").append(getFcPlcfbteLvc()).append(" )\n");

        buffer.append("    .lcbPlcfbteLvc        = ");
        buffer.append(HexDump.intToHex(getLcbPlcfbteLvc()));
        buffer.append(" (").append(getLcbPlcfbteLvc()).append(" )\n");

        buffer.append("    .dwLowDateTime        = ");
        buffer.append(HexDump.intToHex(getDwLowDateTime()));
        buffer.append(" (").append(getDwLowDateTime()).append(" )\n");

        buffer.append("    .dwHighDateTime       = ");
        buffer.append(HexDump.intToHex(getDwHighDateTime()));
        buffer.append(" (").append(getDwHighDateTime()).append(" )\n");

        buffer.append("    .fcPlcflvc            = ");
        buffer.append(HexDump.intToHex(getFcPlcflvc()));
        buffer.append(" (").append(getFcPlcflvc()).append(" )\n");

        buffer.append("    .lcbPlcflvc           = ");
        buffer.append(HexDump.intToHex(getLcbPlcflvc()));
        buffer.append(" (").append(getLcbPlcflvc()).append(" )\n");

        buffer.append("    .fcPlcasumy           = ");
        buffer.append(HexDump.intToHex(getFcPlcasumy()));
        buffer.append(" (").append(getFcPlcasumy()).append(" )\n");

        buffer.append("    .lcbPlcasumy          = ");
        buffer.append(HexDump.intToHex(getLcbPlcasumy()));
        buffer.append(" (").append(getLcbPlcasumy()).append(" )\n");

        buffer.append("    .fcPlcfgram           = ");
        buffer.append(HexDump.intToHex(getFcPlcfgram()));
        buffer.append(" (").append(getFcPlcfgram()).append(" )\n");

        buffer.append("    .lcbPlcfgram          = ");
        buffer.append(HexDump.intToHex(getLcbPlcfgram()));
        buffer.append(" (").append(getLcbPlcfgram()).append(" )\n");

        buffer.append("    .fcSttbListNames      = ");
        buffer.append(HexDump.intToHex(getFcSttbListNames()));
        buffer.append(" (").append(getFcSttbListNames()).append(" )\n");

        buffer.append("    .lcbSttbListNames     = ");
        buffer.append(HexDump.intToHex(getLcbSttbListNames()));
        buffer.append(" (").append(getLcbSttbListNames()).append(" )\n");

        buffer.append("    .fcSttbfUssr          = ");
        buffer.append(HexDump.intToHex(getFcSttbfUssr()));
        buffer.append(" (").append(getFcSttbfUssr()).append(" )\n");

        buffer.append("    .lcbSttbfUssr         = ");
        buffer.append(HexDump.intToHex(getLcbSttbfUssr()));
        buffer.append(" (").append(getLcbSttbfUssr()).append(" )\n");

        buffer.append("[/FIB]\n");
        return buffer.toString();
    }

