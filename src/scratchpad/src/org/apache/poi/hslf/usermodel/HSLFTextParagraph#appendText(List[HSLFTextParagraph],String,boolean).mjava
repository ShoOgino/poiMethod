   /**
    * Adds the supplied text onto the end of the TextParagraphs,
    * creating a new RichTextRun for it to sit in.
    *
    * @param text the text string used by this object.
    */
   protected static HSLFTextRun appendText(List<HSLFTextParagraph> paragraphs, String text, boolean newParagraph) {
       text = toInternalString(text);

       // check paragraphs
       assert(!paragraphs.isEmpty() && !paragraphs.get(0).getTextRuns().isEmpty());

       HSLFTextParagraph htp = paragraphs.get(paragraphs.size()-1);
       HSLFTextRun htr = htp.getTextRuns().get(htp.getTextRuns().size()-1);

       boolean isFirst = !newParagraph;
       for (String rawText : text.split("(?<=\r)")) {
           if (!isFirst) {
               TextPropCollection tpc = htp.getParagraphStyle();
               HSLFTextParagraph prevHtp = htp;
               htp = new HSLFTextParagraph(htp._headerAtom, htp._byteAtom, htp._charAtom, htp._styleAtom);
               htp.getParagraphStyle().copy(tpc);
               htp.setParentShape(prevHtp.getParentShape());
               htp.setShapeId(prevHtp.getShapeId());
               htp.supplySheet(prevHtp.getSheet());
               paragraphs.add(htp);
           }
           isFirst = false;
           
           TextPropCollection tpc = htr.getCharacterStyle();
           // special case, last text run is empty, we will reuse it
           if (htr.getLength() > 0) {
               htr = new HSLFTextRun(htp);
               htr.getCharacterStyle().copy(tpc);
               htp.addTextRun(htr);
           }
           htr.setText(rawText);
       }
       
       storeText(paragraphs);

       return htr;
   }

