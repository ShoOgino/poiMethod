   /**
    * Scans through the supplied record array, looking for
    * a TextHeaderAtom followed by one of a TextBytesAtom or
    * a TextCharsAtom. Builds up TextRuns from these
    *
    * @param records the records to build from
    * @param styleTextProp9Atom an optional StyleTextProp9Atom with numbered lists info
    */
    protected static List<List<HSLFTextParagraph>> findTextParagraphs(Record[] records, StyleTextProp9Atom styleTextProp9Atom) {
        List<List<HSLFTextParagraph>> paragraphCollection = new ArrayList<List<HSLFTextParagraph>>();

        if (records == null) {
            throw new NullPointerException("records need to be filled.");
        }

        int recordIdx;
        for (recordIdx = 0; recordIdx < records.length; recordIdx++) {
            if (records[recordIdx] instanceof TextHeaderAtom) break;
        }

        if (recordIdx == records.length) {
            logger.log(POILogger.INFO, "No text records found.");
            return paragraphCollection;
        }

        for (int slwtIndex = 0; recordIdx < records.length; slwtIndex++) {
            List<HSLFTextParagraph> paragraphs = new ArrayList<HSLFTextParagraph>();
            paragraphCollection.add(paragraphs);

            TextHeaderAtom    header = (TextHeaderAtom)records[recordIdx++];
            TextBytesAtom     tbytes = null;
            TextCharsAtom     tchars = null;
            TextRulerAtom     ruler  = null;
            MasterTextPropAtom indents = null;

            List<Record> otherRecordList = new ArrayList<Record>();

            for (; recordIdx < records.length; recordIdx++) {
                Record r = records[recordIdx];
                long rt = r.getRecordType();
                if (RecordTypes.TextHeaderAtom.typeID == rt) break;
                else if (RecordTypes.TextBytesAtom.typeID == rt) tbytes = (TextBytesAtom)r;
                else if (RecordTypes.TextCharsAtom.typeID == rt) tchars = (TextCharsAtom)r;
                // don't search for RecordTypes.StyleTextPropAtom.typeID here ... see findStyleAtomPresent below
                else if (RecordTypes.TextRulerAtom.typeID == rt) ruler = (TextRulerAtom)r;
                else if (RecordTypes.MasterTextPropAtom.typeID == rt) {
                    indents = (MasterTextPropAtom)r;
                    otherRecordList.add(indents);
                } else {
                    otherRecordList.add(r);
                }
            }

            assert(header != null);
            if (header.getParentRecord() instanceof SlideListWithText) {
                // runs found in PPDrawing are not linked with SlideListWithTexts
                header.setIndex(slwtIndex);
            }

            Record otherRecords[] = otherRecordList.toArray(new Record[otherRecordList.size()]);

            if (tbytes == null && tchars == null) {
                tbytes = new TextBytesAtom();
                // header.getParentRecord().addChildAfter(tbytes, header);
                logger.log(POILogger.INFO, "bytes nor chars atom doesn't exist. Creating dummy record for later saving.");
            }

            String rawText = (tchars != null) ? tchars.getText() : tbytes.getText();
            StyleTextPropAtom styles = findStyleAtomPresent(header, rawText.length());

            // split, but keep delimiter
            for (String para : rawText.split("(?<=\r)")) {
                HSLFTextParagraph tpara = new HSLFTextParagraph(header, tbytes, tchars, styles);
                paragraphs.add(tpara);
                tpara.setStyleTextProp9Atom(styleTextProp9Atom);
                tpara._ruler = ruler;
                tpara._records = otherRecords;
                tpara.getParagraphStyle().updateTextSize(para.length());

                HSLFTextRun trun = new HSLFTextRun(tpara);
                tpara.addTextRun(trun);
                trun.setText(para);
            }

            applyCharacterStyles(paragraphs, styles.getCharacterStyles());
            applyParagraphStyles(paragraphs, styles.getParagraphStyles());
            if (indents != null) {
                applyParagraphIndents(paragraphs, indents.getIndents());
            }
        }

        return paragraphCollection;
    }

