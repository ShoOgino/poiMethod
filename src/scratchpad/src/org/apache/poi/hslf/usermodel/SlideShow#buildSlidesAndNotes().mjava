  /**
   * Build up model level Slide and Notes objects, from the underlying
   *  records.
   */
  private void buildSlidesAndNotes() {
	// Ensure we really found a Document record earlier
	// If we didn't, then the file is probably corrupt
	if(_documentRecord == null) {
		throw new CorruptPowerPointFileException("The PowerPoint file didn't contain a Document Record in its PersistPtr blocks. It is probably corrupt.");
	}


	// Fetch the SlideListWithTexts in the most up-to-date Document Record
	//
	// As far as we understand it:
	//  * The first SlideListWithText will contain a SlideAtomsSet
	//     for each of the master slides
	//  * The second SlideListWithText will contain a SlideAtomsSet
	//     for each of the slides, in their current order
	//    These SlideAtomsSets will normally contain text
	//  * The third SlideListWithText (if present), will contain a
	//     SlideAtomsSet for each Notes
	//    These SlideAtomsSets will not normally contain text
	//
	// Having indentified the masters, slides and notes + their orders,
	//  we have to go and find their matching records
	// We always use the latest versions of these records, and use the
	//  SlideAtom/NotesAtom to match them with the StyleAtomSet 

	SlideListWithText masterSLWT = _documentRecord.getMasterSlideListWithText();
	SlideListWithText slidesSLWT = _documentRecord.getSlideSlideListWithText();
	SlideListWithText notesSLWT  = _documentRecord.getNotesSlideListWithText();
	
	// Start by finding the notes records to go with the entries in
	//  notesSLWT
	org.apache.poi.hslf.record.Notes[] notesRecords;
	SlideAtomsSet[] notesSets = new SlideAtomsSet[0];
	Hashtable slideIdToNotes = new Hashtable();
	if(notesSLWT == null) {
		// None
		notesRecords = new org.apache.poi.hslf.record.Notes[0]; 
	} else {
		// Match up the records and the SlideAtomSets
		notesSets = notesSLWT.getSlideAtomsSets();
		notesRecords = new org.apache.poi.hslf.record.Notes[notesSets.length];
		for(int i=0; i<notesSets.length; i++) {
			// Get the right core record
			Record r = getCoreRecordForSAS(notesSets[i]);
			
			// Ensure it really is a notes record
			if(r instanceof org.apache.poi.hslf.record.Notes) {
				notesRecords[i] = (org.apache.poi.hslf.record.Notes)r;
			} else {
				System.err.println("A Notes SlideAtomSet at " + i + " said its record was at refID " + notesSets[i].getSlidePersistAtom().getRefID() + ", but that was actually a " + r);
			}
			
			// Record the match between slide id and these notes
			SlidePersistAtom spa = notesSets[i].getSlidePersistAtom();
			Integer slideId = new Integer(spa.getSlideIdentifier());
			slideIdToNotes.put(slideId, new Integer(i));
		}
	}
	
	// Now, do the same thing for our slides
	org.apache.poi.hslf.record.Slide[] slidesRecords;
	SlideAtomsSet[] slidesSets = new SlideAtomsSet[0];
	if(slidesSLWT == null) {
		// None
		slidesRecords = new org.apache.poi.hslf.record.Slide[0]; 
	} else {
		// Match up the records and the SlideAtomSets
		slidesSets = slidesSLWT.getSlideAtomsSets();
		slidesRecords = new org.apache.poi.hslf.record.Slide[slidesSets.length];
		for(int i=0; i<slidesSets.length; i++) {
			// Get the right core record
			Record r = getCoreRecordForSAS(slidesSets[i]);
			
			// Ensure it really is a slide record
			if(r instanceof org.apache.poi.hslf.record.Slide) {
				slidesRecords[i] = (org.apache.poi.hslf.record.Slide)r;
			} else {
				System.err.println("A Slide SlideAtomSet at " + i + " said its record was at refID " + slidesSets[i].getSlidePersistAtom().getRefID() + ", but that was actually a " + r);
			}
		}
	}
	
	// Finally, generate model objects for everything
	// Notes first
	_notes = new Notes[notesRecords.length];
	for(int i=0; i<_notes.length; i++) {
		_notes[i] = new Notes(notesRecords[i]);
		_notes[i].setSlideShow(this);
	}
	// Then slides
	_slides = new Slide[slidesRecords.length];
	for(int i=0; i<_slides.length; i++) {
		SlideAtomsSet sas = slidesSets[i];
		int slideIdentifier = sas.getSlidePersistAtom().getSlideIdentifier();
		Integer slideIdentifierI = new Integer(slideIdentifier);
		
		// Do we have a notes for this?
		Notes notes = null;
		if(slideIdToNotes.containsKey(slideIdentifierI)) {
			Integer notesPos = (Integer)slideIdToNotes.get(slideIdentifierI);
			notes = _notes[notesPos.intValue()];
		}
		
		// Now, build our slide
		_slides[i] = new Slide(slidesRecords[i], notes, sas, slideIdentifier, (i+1));
		_slides[i].setSlideShow(this);
	}
  }

