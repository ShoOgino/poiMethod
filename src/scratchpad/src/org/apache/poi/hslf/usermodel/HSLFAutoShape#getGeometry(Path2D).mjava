    CustomGeometry getGeometry(Path2D path2D) {
        final CTCustomGeometry2D cusGeo = OF.createCTCustomGeometry2D();
        cusGeo.setAvLst(OF.createCTGeomGuideList());
        cusGeo.setGdLst(OF.createCTGeomGuideList());
        cusGeo.setAhLst(OF.createCTAdjustHandleList());
        cusGeo.setCxnLst(OF.createCTConnectionSiteList());

        final AbstractEscherOptRecord opt = getEscherOptRecord();

        EscherArrayProperty verticesProp = getEscherProperty(opt, EscherPropertyTypes.GEOMETRY__VERTICES);
        EscherArrayProperty segmentsProp = getEscherProperty(opt, EscherPropertyTypes.GEOMETRY__SEGMENTINFO);

        // return empty path if either GEOMETRY__VERTICES or GEOMETRY__SEGMENTINFO is missing, see Bugzilla 54188

        //sanity check
        if(verticesProp == null) {
            LOG.log(POILogger.WARN, "Freeform is missing GEOMETRY__VERTICES ");
            return super.getGeometry();
        }
        if(segmentsProp == null) {
            LOG.log(POILogger.WARN, "Freeform is missing GEOMETRY__SEGMENTINFO ");
            return super.getGeometry();
        }

        final Iterator<byte[]> vertIter = verticesProp.iterator();
        final Iterator<byte[]> segIter = segmentsProp.iterator();
        final int[] xyPoints = new int[2];
        boolean isClosed = false;

        final CTPath2DList pathLst = OF.createCTPath2DList();
        final CTPath2D pathCT = OF.createCTPath2D();
        final List<Object> moveLst = pathCT.getCloseOrMoveToOrLnTo();
        pathLst.getPath().add(pathCT);
        cusGeo.setPathLst(pathLst);

        while (segIter.hasNext()) {
            byte[] segElem = segIter.next();
            HSLFAutoShape.PathInfo pi = getPathInfo(segElem);
            if (pi == null) {
                continue;
            }
            switch (pi) {
                case escape:
                    handleEscapeInfo(pathCT, path2D, segElem, vertIter);
                    break;
                case moveTo:
                    handleMoveTo(vertIter, xyPoints, moveLst, path2D);
                    break;
                case lineTo:
                    handleLineTo(vertIter, xyPoints, moveLst, path2D);
                    break;
                case curveTo:
                    handleCurveTo(vertIter, xyPoints, moveLst, path2D);
                    break;
                case close:
                    if (path2D.getCurrentPoint() != null) {
                        moveLst.add(OF.createCTPath2DClose());
                        path2D.closePath();
                    }
                    isClosed = true;
                    break;
                default:
                    break;
            }
        }

        if (!isClosed) {
            handleClosedShape(opt, moveLst, path2D);
        }

        final Rectangle2D bounds = getBounds(opt, path2D);

        pathCT.setW((int)Math.rint(bounds.getWidth()));
        pathCT.setH((int)Math.rint(bounds.getHeight()));

        return new CustomGeometry(cusGeo);
    }

