    @Override
    public Path2D.Double getPath(){
        AbstractEscherOptRecord opt = getEscherOptRecord();

        EscherArrayProperty verticesProp = getShapeProp(opt, EscherProperties.GEOMETRY__VERTICES);
        EscherArrayProperty segmentsProp = getShapeProp(opt, EscherProperties.GEOMETRY__SEGMENTINFO);

        // return empty path if either GEOMETRY__VERTICES or GEOMETRY__SEGMENTINFO is missing, see Bugzilla 54188
        Path2D.Double path = new Path2D.Double();

        //sanity check
        if(verticesProp == null) {
            logger.log(POILogger.WARN, "Freeform is missing GEOMETRY__VERTICES ");
            return path;
        }
        if(segmentsProp == null) {
            logger.log(POILogger.WARN, "Freeform is missing GEOMETRY__SEGMENTINFO ");
            return path;
        }

        Iterator<byte[]> vertIter = verticesProp.iterator();
        Iterator<byte[]> segIter = segmentsProp.iterator();
        
        while (vertIter.hasNext() && segIter.hasNext()) {
            byte[] segElem = segIter.next();
            PathInfo pi = getPathInfo(segElem);
            switch (pi) {
                case escape: {
                    handleEscapeInfo(path, segElem, vertIter);
                    break;
                }
                case moveTo: {
                    byte[] p = vertIter.next();
                    double x = Units.masterToPoints(LittleEndian.getShort(p, 0));
                    double y = Units.masterToPoints(LittleEndian.getShort(p, 2));
                    path.moveTo(x,y);
                    break;
                }
                case curveTo: {
                    byte[] p1 = vertIter.next();
                    double x1 = Units.masterToPoints(LittleEndian.getShort(p1, 0));
                    double y1 = Units.masterToPoints(LittleEndian.getShort(p1, 2));
                    byte[] p2 = vertIter.next();
                    double x2 = Units.masterToPoints(LittleEndian.getShort(p2, 0));
                    double y2 = Units.masterToPoints(LittleEndian.getShort(p2, 2));
                    byte[] p3 = vertIter.next();
                    double x3 = Units.masterToPoints(LittleEndian.getShort(p3, 0));
                    double y3 = Units.masterToPoints(LittleEndian.getShort(p3, 2));
                    path.curveTo(x1,y1,x2,y2,x3,y3);
                    break;
                }
                case lineTo:
                    if (vertIter.hasNext()) {
                        byte[] p = vertIter.next();
                        double x = Units.masterToPoints(LittleEndian.getShort(p, 0));
                        double y = Units.masterToPoints(LittleEndian.getShort(p, 2));
                        path.lineTo(x,y);
                    }
                    break;
                case close:
                    path.closePath();
                    break;
                default:
                    break;
            }
        }

        EscherSimpleProperty shapePath = getShapeProp(opt, EscherProperties.GEOMETRY__SHAPEPATH);
        ShapePath sp = ShapePath.valueOf(shapePath == null ? 1 : shapePath.getPropertyValue());
        if (sp == ShapePath.LINES_CLOSED || sp == ShapePath.CURVES_CLOSED) {
            path.closePath();
        }
        
        Rectangle2D anchor = getAnchor();
        Rectangle2D bounds = path.getBounds2D();
        AffineTransform at = new AffineTransform();
        at.translate(anchor.getX(), anchor.getY());
        at.scale(
                anchor.getWidth()/bounds.getWidth(),
                anchor.getHeight()/bounds.getHeight()
        );
        return new Path2D.Double(at.createTransformedShape(path));
    }

