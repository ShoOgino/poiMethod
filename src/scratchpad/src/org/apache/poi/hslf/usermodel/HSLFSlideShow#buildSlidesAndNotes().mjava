	/**
	 * Build up model level Slide and Notes objects, from the underlying
	 * records.
	 */
	private void buildSlidesAndNotes() {
		// Ensure we really found a Document record earlier
		// If we didn't, then the file is probably corrupt
		if (_documentRecord == null) {
			throw new CorruptPowerPointFileException(
					"The PowerPoint file didn't contain a Document Record in its PersistPtr blocks. It is probably corrupt.");
		}

		// Fetch the SlideListWithTexts in the most up-to-date Document Record
		//
		// As far as we understand it:
		// * The first SlideListWithText will contain a SlideAtomsSet
		// for each of the master slides
		// * The second SlideListWithText will contain a SlideAtomsSet
		// for each of the slides, in their current order
		// These SlideAtomsSets will normally contain text
		// * The third SlideListWithText (if present), will contain a
		// SlideAtomsSet for each Notes
		// These SlideAtomsSets will not normally contain text
		//
		// Having indentified the masters, slides and notes + their orders,
		// we have to go and find their matching records
		// We always use the latest versions of these records, and use the
		// SlideAtom/NotesAtom to match them with the StyleAtomSet

		SlideListWithText masterSLWT = _documentRecord.getMasterSlideListWithText();
		SlideListWithText slidesSLWT = _documentRecord.getSlideSlideListWithText();
		SlideListWithText notesSLWT = _documentRecord.getNotesSlideListWithText();

		// Find master slides
		// These can be MainMaster records, but oddly they can also be
		// Slides or Notes, and possibly even other odd stuff....
		// About the only thing you can say is that the master details are in
		// the first SLWT.
		SlideAtomsSet[] masterSets = new SlideAtomsSet[0];
		if (masterSLWT != null) {
			masterSets = masterSLWT.getSlideAtomsSets();

			ArrayList<SlideMaster> mmr = new ArrayList<SlideMaster>();
			ArrayList<TitleMaster> tmr = new ArrayList<TitleMaster>();

			for (SlideAtomsSet sas : masterSets) {
				Record r = getCoreRecordForSAS(sas);
				int sheetNo = sas.getSlidePersistAtom().getSlideIdentifier();
				if (r instanceof org.apache.poi.hslf.record.Slide) {
					TitleMaster master = new TitleMaster((org.apache.poi.hslf.record.Slide) r,
							sheetNo);
					master.setSlideShow(this);
					tmr.add(master);
				} else if (r instanceof org.apache.poi.hslf.record.MainMaster) {
					SlideMaster master = new SlideMaster((org.apache.poi.hslf.record.MainMaster) r,
							sheetNo);
					master.setSlideShow(this);
					mmr.add(master);
				}
			}

			_masters = mmr.toArray(new SlideMaster[mmr.size()]);
			_titleMasters = tmr.toArray(new TitleMaster[tmr.size()]);
		}

		// Having sorted out the masters, that leaves the notes and slides

		// Start by finding the notes records to go with the entries in
		// notesSLWT
		org.apache.poi.hslf.record.Notes[] notesRecords;
		SlideAtomsSet[] notesSets = new SlideAtomsSet[0];
		Map<Integer,Integer> slideIdToNotes = new HashMap<Integer,Integer>();
		if (notesSLWT == null) {
			// None
			notesRecords = new org.apache.poi.hslf.record.Notes[0];
		} else {
			// Match up the records and the SlideAtomSets
			notesSets = notesSLWT.getSlideAtomsSets();
			List<org.apache.poi.hslf.record.Notes> notesRecordsL = 
			   new ArrayList<org.apache.poi.hslf.record.Notes>();
			for (int i = 0; i < notesSets.length; i++) {
				// Get the right core record
				Record r = getCoreRecordForSAS(notesSets[i]);

				// Ensure it really is a notes record
				if (r == null || r instanceof org.apache.poi.hslf.record.Notes) {
				    if (r == null) {
	                    logger.log(POILogger.WARN, "A Notes SlideAtomSet at " + i
	                            + " said its record was at refID "
	                            + notesSets[i].getSlidePersistAtom().getRefID()
	                            + ", but that record didn't exist - record ignored.");
				    }
				    // we need to add also null-records, otherwise the index references to other existing
				    // don't work anymore
					org.apache.poi.hslf.record.Notes notesRecord = (org.apache.poi.hslf.record.Notes) r;
					notesRecordsL.add(notesRecord);

					// Record the match between slide id and these notes
					SlidePersistAtom spa = notesSets[i].getSlidePersistAtom();
					int slideId = spa.getSlideIdentifier();
					slideIdToNotes.put(slideId, i);
				} else {
					logger.log(POILogger.ERROR, "A Notes SlideAtomSet at " + i
							+ " said its record was at refID "
							+ notesSets[i].getSlidePersistAtom().getRefID()
							+ ", but that was actually a " + r);
				}
			}
			notesRecords = new org.apache.poi.hslf.record.Notes[notesRecordsL.size()];
			notesRecords = notesRecordsL.toArray(notesRecords);
		}

		// Now, do the same thing for our slides
		org.apache.poi.hslf.record.Slide[] slidesRecords;
		SlideAtomsSet[] slidesSets = new SlideAtomsSet[0];
		if (slidesSLWT == null) {
			// None
			slidesRecords = new org.apache.poi.hslf.record.Slide[0];
		} else {
			// Match up the records and the SlideAtomSets
			slidesSets = slidesSLWT.getSlideAtomsSets();
			slidesRecords = new org.apache.poi.hslf.record.Slide[slidesSets.length];
			for (int i = 0; i < slidesSets.length; i++) {
				// Get the right core record
				Record r = getCoreRecordForSAS(slidesSets[i]);

				// Ensure it really is a slide record
				if (r instanceof org.apache.poi.hslf.record.Slide) {
					slidesRecords[i] = (org.apache.poi.hslf.record.Slide) r;
				} else {
					logger.log(POILogger.ERROR, "A Slide SlideAtomSet at " + i
							+ " said its record was at refID "
							+ slidesSets[i].getSlidePersistAtom().getRefID()
							+ ", but that was actually a " + r);
				}
			}
		}

		// Finally, generate model objects for everything
		// Notes first
		_notes = new HSLFNotes[notesRecords.length];
		for (int i = 0; i < _notes.length; i++) {
		    if (notesRecords[i] != null) {
    		    _notes[i] = new HSLFNotes(notesRecords[i]);
    			_notes[i].setSlideShow(this);
		    }
		}
		// Then slides
		_slides = new HSLFSlide[slidesRecords.length];
		for (int i = 0; i < _slides.length; i++) {
			SlideAtomsSet sas = slidesSets[i];
			int slideIdentifier = sas.getSlidePersistAtom().getSlideIdentifier();

			// Do we have a notes for this?
			HSLFNotes notes = null;
			// Slide.SlideAtom.notesId references the corresponding notes slide.
			// 0 if slide has no notes.
			int noteId = slidesRecords[i].getSlideAtom().getNotesID();
			if (noteId != 0) {
				Integer notesPos = slideIdToNotes.get(noteId);
				if (notesPos != null) {
					notes = _notes[notesPos];
				} else {
					logger.log(POILogger.ERROR, "Notes not found for noteId=" + noteId);
				}
			}

			// Now, build our slide
			_slides[i] = new HSLFSlide(slidesRecords[i], notes, sas, slideIdentifier, (i + 1));
			_slides[i].setSlideShow(this);
		}
	}

