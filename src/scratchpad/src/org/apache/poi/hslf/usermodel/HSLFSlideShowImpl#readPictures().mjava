	/**
	 * Find and read in pictures contained in this presentation.
	 * This is lazily called as and when we want to touch pictures.
	 */
	private void readPictures() throws IOException {
        _pictures = new ArrayList<HSLFPictureData>();

        // if the presentation doesn't contain pictures - will use a null set instead
        if (!directory.hasEntry("Pictures")) return;

        HSLFSlideShowEncrypted decryptData = new HSLFSlideShowEncrypted(getDocumentEncryptionAtom());
        
		DocumentEntry entry = (DocumentEntry)directory.getEntry("Pictures");
		int len = entry.getSize();
		byte[] pictstream = new byte[len];
		DocumentInputStream is = directory.createDocumentInputStream(entry);
		int readLen = is.read(pictstream);
		is.close();

		if (len != readLen) {
		    throw new IOException("Picture stream ended prematurely - expected "+len+" bytes - received "+readLen+" bytes");
		}

		
        int pos = 0;
		// An empty picture record (length 0) will take up 8 bytes
        while (pos <= (pictstream.length-8)) {
            int offset = pos;

            decryptData.decryptPicture(pictstream, offset);
            
            // Image signature
            int signature = LittleEndian.getUShort(pictstream, pos);
            pos += LittleEndian.SHORT_SIZE;
            // Image type + 0xF018
            int type = LittleEndian.getUShort(pictstream, pos);
            pos += LittleEndian.SHORT_SIZE;
            // Image size (excluding the 8 byte header)
            int imgsize = LittleEndian.getInt(pictstream, pos);
            pos += LittleEndian.INT_SIZE;

            // When parsing the BStoreDelay stream, [MS-ODRAW] says that we
            //  should terminate if the type isn't 0xf007 or 0xf018->0xf117
            if (!((type == 0xf007) || (type >= 0xf018 && type <= 0xf117)))
                break;

			// The image size must be 0 or greater
			// (0 is allowed, but odd, since we do wind on by the header each
			//  time, so we won't get stuck)
			if(imgsize < 0) {
				throw new CorruptPowerPointFileException("The file contains a picture, at position " + _pictures.size() + ", which has a negatively sized data length, so we can't trust any of the picture data");
			}

			// If they type (including the bonus 0xF018) is 0, skip it
			PictureType pt = PictureType.forNativeID(type - 0xF018);
			if (pt == null) {
				logger.log(POILogger.ERROR, "Problem reading picture: Invalid image type 0, on picture with length " + imgsize + ".\nYou document will probably become corrupted if you save it!");
				logger.log(POILogger.ERROR, "" + pos);
			} else {
				// Build the PictureData object from the data
                try {
					HSLFPictureData pict = HSLFPictureData.create(pt);
					pict.setSignature(signature);

                    // Copy the data, ready to pass to PictureData
                    byte[] imgdata = new byte[imgsize];
                    System.arraycopy(pictstream, pos, imgdata, 0, imgdata.length);
                    pict.setRawData(imgdata);

                    pict.setOffset(offset);
                    pict.setIndex(_pictures.size());
					_pictures.add(pict);
				} catch(IllegalArgumentException e) {
					logger.log(POILogger.ERROR, "Problem reading picture: " + e + "\nYou document will probably become corrupted if you save it!");
				}
			}

            pos += imgsize;
        }
	}

