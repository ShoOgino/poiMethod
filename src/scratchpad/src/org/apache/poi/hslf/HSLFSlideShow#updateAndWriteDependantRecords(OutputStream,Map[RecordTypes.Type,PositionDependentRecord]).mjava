	/**
     * This is a helper functions, which is needed for adding new position dependent records
     * or finally write the slideshow to a file.
	 *
	 * @param os the stream to write to, if null only the references are updated
	 * @param interestingRecords a map of interesting records (PersistPtrHolder and UserEditAtom)
	 *        referenced by their RecordType. Only the very last of each type will be saved to the map.
	 *        May be null, if not needed. 
	 * @throws IOException
	 */
	public void updateAndWriteDependantRecords(OutputStream os, Map<RecordTypes.Type,PositionDependentRecord> interestingRecords)
	throws IOException {
        // For position dependent records, hold where they were and now are
        // As we go along, update, and hand over, to any Position Dependent
        //  records we happen across
        Hashtable<Integer,Integer> oldToNewPositions = new Hashtable<Integer,Integer>();

        // First pass - figure out where all the position dependent
        //   records are going to end up, in the new scheme
        // (Annoyingly, some powerpoint files have PersistPtrHolders
        //  that reference slides after the PersistPtrHolder)
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        for (Record record : _records) {
            if(record instanceof PositionDependentRecord) {
                PositionDependentRecord pdr = (PositionDependentRecord)record;
                int oldPos = pdr.getLastOnDiskOffset();
                int newPos = baos.size();
                pdr.setLastOnDiskOffset(newPos);
                if (oldPos != UNSET_OFFSET) {
                    // new records don't need a mapping, as they aren't in a relation yet
                    oldToNewPositions.put(Integer.valueOf(oldPos),Integer.valueOf(newPos));
                }
            }
            
            // Dummy write out, so the position winds on properly
            record.writeOut(baos);
        }
        baos = null;
        
        // For now, we're only handling PositionDependentRecord's that
        // happen at the top level.
        // In future, we'll need the handle them everywhere, but that's
        // a bit trickier
	    UserEditAtom usr = null;
        for (Record record : _records) {
            if (record instanceof PositionDependentRecord) {
                // We've already figured out their new location, and
                // told them that
                // Tell them of the positions of the other records though
                PositionDependentRecord pdr = (PositionDependentRecord)record;
                pdr.updateOtherRecordReferences(oldToNewPositions);
    
                // Grab interesting records as they come past
                // this will only save the very last record of each type
                RecordTypes.Type saveme = null;
                int recordType = (int)record.getRecordType();
                if (recordType == RecordTypes.PersistPtrIncrementalBlock.typeID) {
                    saveme = RecordTypes.PersistPtrIncrementalBlock;
                } else if (recordType == RecordTypes.UserEditAtom.typeID) {
                    saveme = RecordTypes.UserEditAtom;
                    usr = (UserEditAtom)pdr;
                }
                if (interestingRecords != null && saveme != null) {
                    interestingRecords.put(saveme,pdr);
                }
            }
            
            // Whatever happens, write out that record tree
            if (os != null) {
                record.writeOut(os);
            }
        }

        // Update and write out the Current User atom
        int oldLastUserEditAtomPos = (int)currentUser.getCurrentEditOffset();
        Integer newLastUserEditAtomPos = oldToNewPositions.get(oldLastUserEditAtomPos);
        if(usr == null || newLastUserEditAtomPos == null || usr.getLastOnDiskOffset() != newLastUserEditAtomPos) {
            throw new HSLFException("Couldn't find the new location of the last UserEditAtom that used to be at " + oldLastUserEditAtomPos);
        }
        currentUser.setCurrentEditOffset(usr.getLastOnDiskOffset());
	}

