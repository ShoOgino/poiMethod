	/**
	 * Changes the text, and sets it all to have the same styling
	 *  as the the first character has.
	 * If you care about styling, do setText on a RichTextRun instead
	 */
	public void setRawText(String s) {
		// Save the new text to the atoms
		storeText(s);
		RichTextRun fst = _rtRuns[0];

		// Finally, zap and re-do the RichTextRuns
		for(int i=0; i<_rtRuns.length; i++) { _rtRuns[i] = null; }
		_rtRuns = new RichTextRun[1];
        _rtRuns[0] = fst;

		// Now handle record stylings:
		// If there isn't styling
		//  no change, stays with no styling
		// If there is styling:
		//  everthing gets the same style that the first block has
        // Update the lengths +1 for since these will be the only runs
		if(_styleAtom != null) {
			LinkedList<TextPropCollection> pStyles = _styleAtom.getParagraphStyles();
			while(pStyles.size() > 1) { pStyles.removeLast(); }

            if (!pStyles.isEmpty()) {
                pStyles.getFirst().updateTextSize( s.length()+1 );
            }

			LinkedList<TextPropCollection> cStyles = _styleAtom.getCharacterStyles();
			while(cStyles.size() > 1) { cStyles.removeLast(); }
            
            if (!cStyles.isEmpty()) {
                cStyles.getFirst().updateTextSize( s.length()+1 );
            }
			
			_rtRuns[0].setText(s);
		} else {
			// Recreate rich text run with no styling
			_rtRuns[0] = new RichTextRun(this,0,s.length());
		}

	}

