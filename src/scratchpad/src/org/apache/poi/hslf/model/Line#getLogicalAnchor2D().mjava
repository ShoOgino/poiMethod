    /**
    *
    * @return 'absolute' anchor of this shape relative to the parent sheet
    * 
    * @deprecated TODO: remove the whole class, should work with preset geometries instead
    */
   public Rectangle2D getLogicalAnchor2D(){
       Rectangle2D anchor = getAnchor2D();

       //if it is a groupped shape see if we need to transform the coordinates
       if (getParent() != null){
           ArrayList<HSLFGroupShape> lst = new ArrayList<HSLFGroupShape>();
           for (ShapeContainer<HSLFShape> parent=this.getParent();
               parent instanceof HSLFGroupShape;
               parent = ((HSLFGroupShape)parent).getParent()) {
               lst.add(0, (HSLFGroupShape)parent);
           }
           
           AffineTransform tx = new AffineTransform();
           for(HSLFGroupShape prnt : lst) {
               Rectangle2D exterior = prnt.getAnchor2D();
               Rectangle2D interior = prnt.getInteriorAnchor();

               double scaleX =  exterior.getWidth() / interior.getWidth();
               double scaleY = exterior.getHeight() / interior.getHeight();

               tx.translate(exterior.getX(), exterior.getY());
               tx.scale(scaleX, scaleY);
               tx.translate(-interior.getX(), -interior.getY());
               
           }
           anchor = tx.createTransformedShape(anchor).getBounds2D();
       }

       double angle = getRotation();
       if(angle != 0.){
           double centerX = anchor.getX() + anchor.getWidth()/2;
           double centerY = anchor.getY() + anchor.getHeight()/2;

           AffineTransform trans = new AffineTransform();
           trans.translate(centerX, centerY);
           trans.rotate(Math.toRadians(angle));
           trans.translate(-centerX, -centerY);

           Rectangle2D rect = trans.createTransformedShape(anchor).getBounds2D();
           if((anchor.getWidth() < anchor.getHeight() && rect.getWidth() > rect.getHeight()) ||
               (anchor.getWidth() > anchor.getHeight() && rect.getWidth() < rect.getHeight())    ){
               trans = new AffineTransform();
               trans.translate(centerX, centerY);
               trans.rotate(Math.PI/2);
               trans.translate(-centerX, -centerY);
               anchor = trans.createTransformedShape(anchor).getBounds2D();
           }
       }
       return anchor;
   }

