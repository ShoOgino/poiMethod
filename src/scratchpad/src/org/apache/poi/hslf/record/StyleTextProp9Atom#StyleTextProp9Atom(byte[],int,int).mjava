    /**
     * Constructs the link related atom record from its
     *  source data.
     *
     * @param source the source data as a byte array.
     * @param start the start offset into the byte array.
     * @param len the length of the slice in the byte array.
     */
    protected StyleTextProp9Atom(byte[] source, int start, int len) {
        // Get the header.
    	final List<TextPFException9> schemes = new LinkedList<TextPFException9>();
        header = new byte[8];
        System.arraycopy(source,start, header,0,8);
        this.version  = LittleEndian.getShort(header, 0);
        this.recordId = LittleEndian.getShort(header, 2);
        this.length   = LittleEndian.getInt(header, 4);
        
        // Get the record data.
        data = new byte[len-8];
        System.arraycopy(source, start+8, data, 0, len-8);
        for (int i = 0; i < data.length; ) {
        	final TextPFException9 item = new TextPFException9(data, i);
        	schemes.add(item);
        	i += item.getRecordLength();
        	//int textCfException9 = LittleEndian.getInt(data, i );
        	//TODO analyze textCfException when have some test data
        	i += 4;
        	int textSiException = LittleEndian.getInt(data, i );
        	i +=  + 4;//TextCFException9 + SIException
        	if (0 != (textSiException & 0x40)) { 
        		i += 2; //skip fBidi 
        	}
        	if (i >= data.length) {
        		break;
        	}
        }
        this.autoNumberSchemes = (TextPFException9[]) schemes.toArray(new TextPFException9[schemes.size()]);
    }

