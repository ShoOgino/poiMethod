	/**
	 * For the given position, look if the record is a text record, and wind
	 *  on after.
	 * If it is a text record, grabs out the text. Whatever happens, returns
	 *  the position of the next record, or -1 if no more.
	 */
	public int findTextRecords(int startPos, Vector textV) {
		// Grab the length, and the first option byte
		// Note that the length doesn't include the 8 byte atom header
		int len = (int)LittleEndian.getUInt(pptContents,startPos+4);
		byte opt = pptContents[startPos];

		// If it's a container, step into it and return
		// (If it's a container, option byte 1 BINARY_AND 0x0f will be 0x0f)
		int container = (int)opt & 0x0f;
		if(container == 0x0f) {
			return (startPos+8);
		}

		// Otherwise, check the type to see if it's text
		long type = LittleEndian.getUShort(pptContents,startPos+2);
		TextRun trun = null;

		// TextBytesAtom
		if(type == 4008l) {
			TextBytesAtom tba = (TextBytesAtom)Record.createRecordForType(type, pptContents, startPos, len+8);
			trun = new TextRun((TextHeaderAtom)null,tba);
		}
		// TextCharsAtom
		if(type == 4000l) {
			TextCharsAtom tca = (TextCharsAtom)Record.createRecordForType(type, pptContents, startPos, len+8);
			trun = new TextRun((TextHeaderAtom)null,tca);
		}

		// If we found text, save it in the vector
		if(trun != null) {
			textV.add(trun.getText());
		}
		
		// Wind on by the atom length, and check we're not at the end
		int newPos = (startPos + 8 + len);
		if(newPos > (pptContents.length - 8)) { 
			newPos = -1;
		}
		return newPos;
	}

