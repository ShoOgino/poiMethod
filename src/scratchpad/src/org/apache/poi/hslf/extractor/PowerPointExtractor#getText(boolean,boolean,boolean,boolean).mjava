	public String getText(boolean getSlideText, boolean getNoteText, boolean getCommentText, boolean getMasterText) {
		StringBuffer ret = new StringBuffer();

		if (getSlideText) {
            if (getMasterText) {
                for (HSLFSlideMaster master : _show.getSlideMasters()) {
                    for(HSLFShape sh : master.getShapes()){
                        if(sh instanceof HSLFTextShape){
                            if(HSLFMasterSheet.isPlaceholder(sh)) {
                                // don't bother about boiler
                                // plate text on master
                                // sheets
                                continue;
                            }
                            HSLFTextShape tsh = (HSLFTextShape)sh;
                            String text = tsh.getText();
                            if (text != null){
                                ret.append(text);
                                if (!text.endsWith("\n")) {
                                    ret.append("\n");
                                }
                            }
                        }
                    }
                }
            }

            for (HSLFSlide slide : _slides) {
                String headerText = "";
                String footerText = "";
                HeadersFooters hf = slide.getHeadersFooters();
                if (hf != null) {
                    if (hf.isHeaderVisible()) {
                        headerText = safeLine(hf.getHeaderText());
                    }
                    if (hf.isFooterVisible()) {
                        footerText = safeLine(hf.getFooterText());
                    }
                }
                
                // Slide header, if set
				ret.append(headerText);

				// Slide text
                textRunsToText(ret, slide.getTextParagraphs());

                // Table text
                for (HSLFShape shape : slide.getShapes()){
                    if (shape instanceof HSLFTable){
                        extractTableText(ret, (HSLFTable)shape);
                    }
                }
                // Slide footer, if set
                ret.append(footerText);

				// Comments, if requested and present
				if (getCommentText) {
					Comment[] comments = slide.getComments();
					for (Comment comment : slide.getComments()) {
						ret.append(comment.getAuthor() + " - " + comment.getText() + "\n");
					}
				}
			}
			if (getNoteText) {
				ret.append("\n");
			}
		}

		if (getNoteText) {
			// Not currently using _notes, as that can have the notes of
			// master sheets in. Grab Slide list, then work from there,
			// but ensure no duplicates
			HashSet<Integer> seenNotes = new HashSet<Integer>();
            String headerText = "";
            String footerText = "";
			HeadersFooters hf = _show.getNotesHeadersFooters();
			if (hf != null) {
			    if (hf.isHeaderVisible()) {
			        headerText = safeLine(hf.getHeaderText());
			    }
			    if (hf.isFooterVisible()) {
                    footerText = safeLine(hf.getFooterText());
			    }
			}
			

			for (HSLFSlide slide : _slides) {
				HSLFNotes notes = slide.getNotes();
				if (notes == null) {
					continue;
				}
				Integer id = Integer.valueOf(notes._getSheetNumber());
				if (seenNotes.contains(id)) {
					continue;
				}
				seenNotes.add(id);

				// Repeat the Notes header, if set
				ret.append(headerText);

				// Notes text
				textRunsToText(ret, notes.getTextParagraphs());

				// Repeat the notes footer, if set
				ret.append(footerText);
			}
		}

		return ret.toString();
	}

