    @Test
    public void testTextRunHyperlinks() throws Exception {
        HSLFSlideShow ppt = new HSLFSlideShow(_slTests.openResourceAsStream("WithLinks.ppt"));

        HSLFSlide slide = ppt.getSlides().get(0);
        List<HSLFTextParagraph> para = slide.getTextParagraphs().get(1);
        
        String rawText = toExternalString(getRawText(para), para.get(0).getRunType());
        String expected =
            "This page has two links:\n"+
            "http://jakarta.apache.org/poi/\n"+
            "\n"+
            "http://slashdot.org/\n"+
            "\n"+
            "In addition, its notes has one link";
        assertEquals(expected, rawText);
        
        HSLFHyperlink[] links = HSLFHyperlink.find(para.get(1));
        assertNotNull(links);
        assertEquals(2, links.length);

        assertEquals("http://jakarta.apache.org/poi/", links[0].getTitle());
        assertEquals("http://jakarta.apache.org/poi/", links[0].getAddress());
        assertEquals("http://jakarta.apache.org/poi/", rawText.substring(links[0].getStartIndex(), links[0].getEndIndex()-1));

        assertEquals("http://slashdot.org/", links[1].getTitle());
        assertEquals("http://slashdot.org/", links[1].getAddress());
        assertEquals("http://slashdot.org/", rawText.substring(links[1].getStartIndex(), links[1].getEndIndex()-1));

        slide = ppt.getSlides().get(1);
        para = slide.getTextParagraphs().get(1);
        rawText = toExternalString(getRawText(para), para.get(0).getRunType());
        expected = 
            "I have the one link:\n" +
            "Jakarta HSSF";
        assertEquals(expected, rawText);

        links = HSLFHyperlink.find(para.get(1));
        assertNotNull(links);
        assertEquals(1, links.length);

        assertEquals("http://jakarta.apache.org/poi/hssf/", links[0].getTitle());
        assertEquals("http://jakarta.apache.org/poi/hssf/", links[0].getAddress());
        assertEquals("Jakarta HSSF", rawText.substring(links[0].getStartIndex(), links[0].getEndIndex()-1));
    }

