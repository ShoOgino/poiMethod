    /**
     * Verify we can get text from TextShape in the following cases:
     *  - placeholders
     *  - normal TextBox object
     *  - text in auto-shapes
     */
    @Test
    public void read() throws IOException {
        HSLFSlideShow ppt = new HSLFSlideShow(_slTests.openResourceAsStream("text_shapes.ppt"));

        List<String> lst1 = new ArrayList<String>();
        HSLFSlide slide = ppt.getSlides()[0];
        HSLFShape[] shape = slide.getShapes();
        for (int i = 0; i < shape.length; i++) {
            assertTrue("Expected TextShape but found " + shape[i].getClass().getName(), shape[i] instanceof HSLFTextShape);
            HSLFTextShape tx = (HSLFTextShape)shape[i];
            HSLFTextParagraph run = tx.getTextParagraphs();
            assertNotNull(run);
            int runType = run.getRunType();

            ShapeType type = shape[i].getShapeType();
            switch (type){
                case TEXT_BOX:
                    assertEquals("Text in a TextBox", run.getRawText());
                    break;
                case RECT:
                    if(runType == TextHeaderAtom.OTHER_TYPE)
                        assertEquals("Rectangle", run.getRawText());
                    else if(runType == TextHeaderAtom.TITLE_TYPE)
                        assertEquals("Title Placeholder", run.getRawText());
                    break;
                case OCTAGON:
                    assertEquals("Octagon", run.getRawText());
                    break;
                case ELLIPSE:
                    assertEquals("Ellipse", run.getRawText());
                    break;
                case ROUND_RECT:
                    assertEquals("RoundRectangle", run.getRawText());
                    break;
                default:
                    fail("Unexpected shape: " + shape[i].getShapeName());

            }
            lst1.add(run.getRawText());
        }

        List<String> lst2 = new ArrayList<String>();
        HSLFTextParagraph[] run = slide.getTextParagraphs();
        for (int i = 0; i < run.length; i++) {
            lst2.add(run[i].getRawText());
        }

        assertTrue(lst1.containsAll(lst2));
    }

