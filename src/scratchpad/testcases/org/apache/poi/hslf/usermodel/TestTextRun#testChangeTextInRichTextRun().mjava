	/**
	 * Tests to ensure changing the text within rich text runs works
	 *  correctly
	 */
	@Test
	public void testChangeTextInRichTextRun() {
		HSLFSlide slideOne = ssRich.getSlides().get(0);
		List<List<HSLFTextParagraph>> textParass = slideOne.getTextParagraphs();
		List<HSLFTextParagraph> trB = textParass.get(1);
		assertEquals(3, trB.size());

		// We start with 3 text runs, each with their own set of styles,
		//  but all sharing the same paragraph styles
		HSLFTextRun rtrB = trB.get(0).getTextRuns().get(0);
		HSLFTextRun rtrC = trB.get(1).getTextRuns().get(0);
		HSLFTextRun rtrD = trB.get(2).getTextRuns().get(0);
//		TextPropCollection tpBP = rtrB._getRawParagraphStyle();
//		TextPropCollection tpBC = rtrB._getRawCharacterStyle();
//		TextPropCollection tpCP = rtrC._getRawParagraphStyle();
//		TextPropCollection tpCC = rtrC._getRawCharacterStyle();
//		TextPropCollection tpDP = rtrD._getRawParagraphStyle();
//		TextPropCollection tpDC = rtrD._getRawCharacterStyle();

		// Check text and stylings
//		assertEquals(trB.getRawText().substring(0, 30), rtrB.getRawText());
//		assertNotNull(tpBP);
//		assertNotNull(tpBC);
//		assertNotNull(tpCP);
//		assertNotNull(tpCC);
//		assertNotNull(tpDP);
//		assertNotNull(tpDC);
//		assertTrue(tpBP.equals(tpCP));
//		assertTrue(tpBP.equals(tpDP));
//		assertTrue(tpCP.equals(tpDP));
//		assertFalse(tpBC.equals(tpCC));
//		assertFalse(tpBC.equals(tpDC));
//		assertFalse(tpCC.equals(tpDC));

		// Check text in the rich runs
		assertEquals("This is the subtitle, in bold\r", rtrB.getRawText());
		assertEquals("This bit is blue and italic\r", rtrC.getRawText());
		assertEquals("This bit is red (normal)", rtrD.getRawText());

		String newBText = "New Subtitle, will still be bold\n";
		String newCText = "New blue and italic text\n";
		String newDText = "Funky new normal red text";
		rtrB.setText(newBText);
		rtrC.setText(newCText);
		rtrD.setText(newDText);
		assertEquals(newBText, rtrB.getRawText());
		assertEquals(newCText, rtrC.getRawText());
		assertEquals(newDText, rtrD.getRawText());

//		assertEquals(newBText + newCText + newDText, trB.getRawText());

		// The styles should have been updated for the new sizes
//		assertEquals(newBText.length(), tpBC.getCharactersCovered());
//		assertEquals(newCText.length(), tpCC.getCharactersCovered());
//		assertEquals(newDText.length()+1, tpDC.getCharactersCovered()); // Last one is always one larger

//		assertEquals(
//				newBText.length() + newCText.length() + newDText.length(),
//				tpBP.getCharactersCovered()
//		);

		// Paragraph style should be sum of text length
//		assertEquals(newBText.length() + newCText.length() + newDText.length(), tpBP.getCharactersCovered());

		// Check stylings still as expected
//		TextPropCollection ntpBC = rtrB._getRawCharacterStyle();
//		TextPropCollection ntpCC = rtrC._getRawCharacterStyle();
//		TextPropCollection ntpDC = rtrD._getRawCharacterStyle();
//		assertEquals(tpBC.getTextPropList(), ntpBC.getTextPropList());
//		assertEquals(tpCC.getTextPropList(), ntpCC.getTextPropList());
//		assertEquals(tpDC.getTextPropList(), ntpDC.getTextPropList());
	}

