	private void checkSlide(final Slide s) {
		final StyleTextProp9Atom[] numberedListArray = s.getNumberedListInfo();
		assertNotNull(numberedListArray);
		assertEquals(1, numberedListArray.length);
		final StyleTextProp9Atom numberedListInfoForTextBox = numberedListArray[0];
		assertNotNull(numberedListInfoForTextBox);
		final TextPFException9[] autoNumbersOfTextBox0 = numberedListInfoForTextBox.getAutoNumberTypes();
		assertEquals(Short.valueOf((short)1), autoNumbersOfTextBox0[0].getfBulletHasAutoNumber());
		assertEquals(Short.valueOf((short)1), autoNumbersOfTextBox0[0].getAutoNumberStartNumber());//Default value = 1 will be used 
		assertTrue(TextAutoNumberSchemeEnum.ANM_ArabicPeriod == autoNumbersOfTextBox0[0].getAutoNumberScheme());
		
		final TextRun[] textRuns = s.getTextRuns();
		assertEquals(3, textRuns.length);
		assertEquals("Bulleted list\rMore bullets\rNo bullets here", textRuns[0].getRawText());
		assertEquals("Numbered list between two bulleted lists\rSecond numbered list item", textRuns[1].getRawText());
		assertEquals("Second bulleted list \u2013 should appear after numbered list\rMore bullets", textRuns[2].getRawText());
		assertEquals(2, textRuns[0].getRichTextRuns().length);
		assertEquals(1, textRuns[1].getRichTextRuns().length);
		assertEquals(1, textRuns[2].getRichTextRuns().length);
		assertNull(textRuns[0].getStyleTextProp9Atom());
		assertNotNull(textRuns[1].getStyleTextProp9Atom());
		assertNull(textRuns[2].getStyleTextProp9Atom());
		final TextPFException9[] autoNumbers = textRuns[1].getStyleTextProp9Atom().getAutoNumberTypes();
		assertEquals(1, autoNumbers.length);
		assertEquals(Short.valueOf((short)1), autoNumbers[0].getfBulletHasAutoNumber());
		assertEquals(Short.valueOf((short)1), autoNumbers[0].getAutoNumberStartNumber());//Default value = 1 will be used 
		assertTrue(TextAutoNumberSchemeEnum.ANM_ArabicPeriod == autoNumbersOfTextBox0[0].getAutoNumberScheme());
		
		final List<TextPropCollection> textProps = textRuns[1].getStyleTextPropAtom().getCharacterStyles();
		assertEquals(1, textProps.size());
		final TextPropCollection textProp = textProps.get(0);
		assertEquals(67, textProp.getCharactersCovered());
		
		
		RichTextRun textRun = textRuns[0].getRichTextRuns()[0];
		assertTrue(textRun.isBullet());

		
		final EscherTextboxWrapper[] styleAtoms = s.getTextboxWrappers();
		assertEquals(textRuns.length, styleAtoms.length);
		checkSingleRunWrapper(43, styleAtoms[0]);
		checkSingleRunWrapper(67, styleAtoms[1]);
	}

