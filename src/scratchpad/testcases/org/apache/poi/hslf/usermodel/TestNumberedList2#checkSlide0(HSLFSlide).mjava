	private void checkSlide0(final HSLFSlide s) {
		final StyleTextProp9Atom[] numberedListArray = s.getNumberedListInfo();
		assertNotNull(numberedListArray);
		assertEquals(2, numberedListArray.length);
		final StyleTextProp9Atom numberedListInfoForTextBox0 = numberedListArray[0];
		final StyleTextProp9Atom numberedListInfoForTextBox1 = numberedListArray[1];
		assertNotNull(numberedListInfoForTextBox0);
		assertNotNull(numberedListInfoForTextBox1);
		final TextPFException9[] autoNumbersOfTextBox0 = numberedListInfoForTextBox0.getAutoNumberTypes();
		assertEquals(Short.valueOf((short)1), autoNumbersOfTextBox0[0].getfBulletHasAutoNumber());
		assertEquals(Short.valueOf((short)1), autoNumbersOfTextBox0[0].getAutoNumberStartNumber());//Default value = 1 will be used 
		assertTrue(TextAutoNumberSchemeEnum.ANM_ArabicPeriod == autoNumbersOfTextBox0[0].getAutoNumberScheme());
		final TextPFException9[] autoNumbersOfTextBox1 = numberedListInfoForTextBox1.getAutoNumberTypes();
		assertEquals(Short.valueOf((short)1), autoNumbersOfTextBox1[0].getfBulletHasAutoNumber());
		assertEquals(Short.valueOf((short)6), autoNumbersOfTextBox1[0].getAutoNumberStartNumber());//Default value = 1 will be used 
		assertTrue(TextAutoNumberSchemeEnum.ANM_ArabicPeriod == autoNumbersOfTextBox1[0].getAutoNumberScheme());

		
		HSLFTextParagraph[] textRuns = s.getTextParagraphs();
		assertEquals(2, textRuns.length);

		HSLFTextRun textRun = textRuns[0].getTextRuns()[0];
		assertEquals("List Item One\rList Item Two\rList Item Three", textRun.getRawText());
		assertEquals(1, textRuns[0].getTextRuns().length);
		assertTrue(textRun.isBullet());

		assertEquals("A numbered list may start at any number \rThis would be used as a continuation list on another page\rThis list should start with #6", textRuns[1].getRawText());
		
		final EscherTextboxWrapper[] styleAtoms = s.getTextboxWrappers();
		assertEquals(textRuns.length, styleAtoms.length);
		checkSingleRunWrapper(44, styleAtoms[0]);
		checkSingleRunWrapper(130, styleAtoms[1]);
	}

