    private static void confirmExpectedResult(String msg, HSSFCell expected, HSSFFormulaEvaluator.CellValue actual) {
        if (expected == null) {
			throw new AssertionFailedError(msg + " - Bad setup data expected value is null");
		}
		if(actual == null) {
			throw new AssertionFailedError(msg + " - actual value was null");
		}
        
		if (expected.getCellType() == HSSFCell.CELL_TYPE_STRING) {
		    String value = expected.getRichStringCellValue().getString();
		    if (value.startsWith("#")) {
		    	// TODO - this code never called
		        expected.setCellType(HSSFCell.CELL_TYPE_ERROR);
		        // expected.setCellErrorValue(...?);
		    }
		}
		
		switch (expected.getCellType()) {
			case HSSFCell.CELL_TYPE_BLANK:
			    assertEquals(msg, HSSFCell.CELL_TYPE_BLANK, actual.getCellType());
			    break;
			case HSSFCell.CELL_TYPE_BOOLEAN:
			    assertEquals(msg, HSSFCell.CELL_TYPE_BOOLEAN, actual.getCellType());
			    assertEquals(msg, expected.getBooleanCellValue(), actual.getBooleanValue());
			    break;
			case HSSFCell.CELL_TYPE_ERROR:
			    assertEquals(msg, HSSFCell.CELL_TYPE_ERROR, actual.getCellType());
			    if(false) { // TODO: fix ~45 functions which are currently returning incorrect error values
			    	assertEquals(msg, expected.getErrorCellValue(), actual.getErrorValue());
			    }
			    break;
			case HSSFCell.CELL_TYPE_FORMULA: // will never be used, since we will call method after formula evaluation
			    throw new AssertionFailedError("Cannot expect formula as result of formula evaluation: " + msg);
			case HSSFCell.CELL_TYPE_NUMERIC:
			    assertEquals(msg, HSSFCell.CELL_TYPE_NUMERIC, actual.getCellType());
			    TestMathX.assertEquals(msg, expected.getNumericCellValue(), actual.getNumberValue(), TestMathX.POS_ZERO, TestMathX.DIFF_TOLERANCE_FACTOR);
//	            double delta = Math.abs(expected.getNumericCellValue()-actual.getNumberValue());
//	            double pctExpected = Math.abs(0.00001*expected.getNumericCellValue());
//	            assertTrue(msg, delta <= pctExpected);
			    break;
			case HSSFCell.CELL_TYPE_STRING:
			    assertEquals(msg, HSSFCell.CELL_TYPE_STRING, actual.getCellType());
			    assertEquals(msg, expected.getRichStringCellValue().getString(), actual.getRichTextStringValue().getString());
			    break;
		}
    }

