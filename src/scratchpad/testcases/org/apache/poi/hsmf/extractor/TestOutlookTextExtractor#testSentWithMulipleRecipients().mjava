   /**
    * Test that we correctly handle multiple To+CC+BCC
    *  recipients in an email we sent.
    */
   public void testSentWithMulipleRecipients() throws Exception {
      // To: 'Ashutosh Dandavate' <ashutosh.dandavate@alfresco.com>,
      //   'Paul Holmes-Higgin' <paul.hh@alfresco.com>,
      //   'Mike Farman' <mikef@alfresco.com>
      // Cc: nickb@alfresco.com, nick.burch@alfresco.com,
      //   'Roy Wetherall' <roy.wetherall@alfresco.com>
      // Bcc: 'David Caruana' <dave.caruana@alfresco.com>,
      //   'Vonka Jan' <roy.wetherall@alfresco.com>
      
      String[] files = new String[] {
            "example_sent_regular.msg", "example_sent_unicode.msg"
      };
      for(String file : files) {
         MAPIMessage msg = new MAPIMessage(new POIFSFileSystem(
               new FileInputStream(samples.getFile(file))
         ));
         
         OutlookTextExtactor ext = new OutlookTextExtactor(msg);
         String text = ext.getText();
         
         assertContains(text, "From: Mike Farman\n");
         assertContains(text, "To: 'Ashutosh Dandavate' <ashutosh.dandavate@alfresco.com>; " +
         		"'Paul Holmes-Higgin' <paul.hh@alfresco.com>; 'Mike Farman' <mikef@alfresco.com>\n");
         assertContains(text, "CC: 'nickb@alfresco.com' <nickb@alfresco.com>; " +
         		"'nick.burch@alfresco.com' <nick.burch@alfresco.com>; 'Roy Wetherall' <roy.wetherall@alfresco.com>\n");
         assertContains(text, "BCC: 'David Caruana' <dave.caruana@alfresco.com>; " +
         		"'Vonka Jan' <jan.vonka@alfresco.com>\n");
         assertContains(text, "Subject: This is a test message please ignore\n");
         assertContains(text, "Date:");
         assertContains(text, "The quick brown fox jumps over the lazy dog");
      }
   }

