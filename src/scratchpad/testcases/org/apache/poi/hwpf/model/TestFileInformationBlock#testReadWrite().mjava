    public void testReadWrite() throws Exception {
        int size = _fileInformationBlock.getSize();
        byte[] buf = new byte[size];

        _fileInformationBlock.getFibBase().serialize(buf, 0);

        FileInformationBlock newFileInformationBlock = new FileInformationBlock(
                buf);

        final Field[] fields;
        try {
            fields = AccessController.doPrivileged(new PrivilegedExceptionAction<Field[]>() {
                @Override
                @SuppressForbidden("Test only")
                public Field[] run() throws Exception {
                    final Field[] fields = FileInformationBlock.class.getSuperclass().getDeclaredFields();
                    AccessibleObject.setAccessible(fields, true);
                    return fields;
                }
            });
        } catch (PrivilegedActionException pae) {
            throw pae.getException();
        }

        for (int x = 0; x < fields.length; x++) {
            assertEquals(fields[x].get(_fileInformationBlock),
                    fields[x].get(newFileInformationBlock));
        }
        
        assertNotNull(_fileInformationBlock.toString());
    }

