  public void testReadWrite()
    throws Exception
  {
    int size = _documentProperties.getSize();
    byte[] buf = new byte[size];

    _documentProperties.serialize(buf, 0);

    DocumentProperties newDocProperties =
      new DocumentProperties(buf, 0, size);

    Field[] fields = DocumentProperties.class.getSuperclass().getDeclaredFields();
    AccessibleObject.setAccessible(fields, true);

    for (int x = 0; x < fields.length; x++)
    {
      // JaCoCo Code Coverage adds it's own field, don't look at this one here
      if(fields[x].getName().equals("$jacocoData")) {
    	  continue;
      }

      if (!fields[x].getType().isArray())
      {
        assertEquals(fields[x].get(_documentProperties),
                     fields[x].get(newDocProperties));
      }
      else
      {
    	// ensure that the class was not changed/enhanced, e.g. by code instrumentation like coverage tools
    	assertEquals("Invalid type for field: " + fields[x].getName(), 
    			"[B", fields[x].getType().getName());
    	
        byte[] buf1 = (byte[])fields[x].get(_documentProperties);
        byte[] buf2 = (byte[])fields[x].get(newDocProperties);
        Arrays.equals(buf1, buf2);
      }
    }

  }

