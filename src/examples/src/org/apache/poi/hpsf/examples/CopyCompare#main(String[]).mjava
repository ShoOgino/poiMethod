    /**
     * <p>Runs the example program. The application expects one or two
     * arguments:</p>
     * <p>
     * <ol>
     * <p>
     * <li><p>The first argument is the disk file name of the POI filesystem to
     * copy.</p></li>
     * <p>
     * <li><p>The second argument is optional. If it is given, it is the name of
     * a disk file the copy of the POI filesystem will be written to. If it is
     * not given, the copy will be written to a temporary file which will be
     * deleted at the end of the program.</p></li>
     * <p>
     * </ol>
     *
     * @param args Command-line arguments.
     * @throws MarkUnsupportedException     if a POI document stream does not
     *                                      support the mark() operation.
     * @throws NoPropertySetStreamException if the application tries to
     *                                      create a property set from a POI document stream that is not a property
     *                                      set stream.
     * @throws IOException                  if any I/O exception occurs.
     * @throws UnsupportedEncodingException if a character encoding is not
     *                                      supported.
     */
    public static void main(final String[] args)
            throws NoPropertySetStreamException, MarkUnsupportedException,
            UnsupportedEncodingException, IOException {
        String originalFileName = null;
        String copyFileName = null;

        /* Check the command-line arguments. */
        if (args.length == 1) {
            originalFileName = args[0];
            File f = TempFile.createTempFile("CopyOfPOIFileSystem-", ".ole2");
            f.deleteOnExit();
            copyFileName = f.getAbsolutePath();
        } else if (args.length == 2) {
            originalFileName = args[0];
            copyFileName = args[1];
        } else {
            System.err.println("Usage: " + CopyCompare.class.getName() +
                    "originPOIFS [copyPOIFS]");
            System.exit(1);
        }

        /* Read the origin POIFS using the eventing API. The real work is done
         * in the class CopyFile which is registered here as a POIFSReader. */
        final POIFSReader r = new POIFSReader();
        final CopyFile cf = new CopyFile(copyFileName);
        r.registerListener(cf);
        r.setNotifyEmptyDirectories(true);
        try (FileInputStream fis = new FileInputStream(originalFileName)) {
            r.read(fis);
        }
        
        /* Write the new POIFS to disk. */
        cf.close();

        /* Read all documents from the original POI file system and compare them
         * with the equivalent document from the copy. */
        try (POIFSFileSystem opfs = new POIFSFileSystem(new File(originalFileName));
             POIFSFileSystem cpfs = new POIFSFileSystem(new File(copyFileName))) {
            final DirectoryEntry oRoot = opfs.getRoot();
            final DirectoryEntry cRoot = cpfs.getRoot();
            final StringBuffer messages = new StringBuffer();
            if (equal(oRoot, cRoot, messages)) {
                System.out.println("Equal");
            } else {
                System.out.println("Not equal: " + messages);
            }
        }
    }

