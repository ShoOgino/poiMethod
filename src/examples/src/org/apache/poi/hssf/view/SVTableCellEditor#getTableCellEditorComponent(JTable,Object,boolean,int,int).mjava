    /**
     * Gets the tableCellEditorComponent attribute of the SVTableCellEditor object
     *
     * @return The tableCellEditorComponent value
     */
    @Override
    public Component getTableCellEditorComponent(JTable table, Object value,
                                                 boolean isSelected,
                                                 int row,
                                                 int column) {
        logger.log(POILogger.INFO, "GetTableCellEditorComponent");
        HSSFCell cell = (HSSFCell) value;
        if (cell != null) {
            HSSFCellStyle style = cell.getCellStyle();
            HSSFFont f = wb.getFontAt(style.getFontIndexAsInt());
            boolean isbold = f.getBold();
            boolean isitalics = f.getItalic();

            int fontstyle = Font.PLAIN;

            if (isbold) {
                fontstyle = Font.BOLD;
            }
            if (isitalics) {
                fontstyle = fontstyle | Font.ITALIC;
            }

            int fontheight = f.getFontHeightInPoints();
            if (fontheight == 9) {
                fontheight = 10; //fix for stupid ol Windows
            }

            Font font = new Font(f.getFontName(), fontstyle, fontheight);
            editor.setFont(font);

            if (style.getFillPattern() == FillPatternType.SOLID_FOREGROUND) {
                editor.setBackground(getAWTColor(style.getFillForegroundColor(), white));
            } else {
                editor.setBackground(white);
            }

            editor.setForeground(getAWTColor(f.getColor(), black));


            //Set the value that is rendered for the cell
            switch (cell.getCellType()) {
                case BLANK:
                    editor.setText("");
                    break;
                case BOOLEAN:
                    if (cell.getBooleanCellValue()) {
                        editor.setText("true");
                    } else {
                        editor.setText("false");
                    }
                    break;
                case NUMERIC:
                    editor.setText(Double.toString(cell.getNumericCellValue()));
                    break;
                case STRING:
                    editor.setText(cell.getRichStringCellValue().getString());
                    break;
                case FORMULA:
                default:
                    editor.setText("?");
            }
            switch (style.getAlignment()) {
                case LEFT:
                case JUSTIFY:
                case FILL:
                    editor.setHorizontalAlignment(SwingConstants.LEFT);
                    break;
                case CENTER:
                case CENTER_SELECTION:
                    editor.setHorizontalAlignment(SwingConstants.CENTER);
                    break;
                case GENERAL:
                case RIGHT:
                    editor.setHorizontalAlignment(SwingConstants.RIGHT);
                    break;
                default:
                    editor.setHorizontalAlignment(SwingConstants.LEFT);
                    break;
            }

        }
        return editor;
    }

