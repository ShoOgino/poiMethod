    /**
     * test the add method
     */

    public void testAdd()
    {
        ShortList list      = new ShortList();
        short[]   testArray =
        {
            0, 1, 2, 3, 5
        };

        for (int j = 0; j < testArray.length; j++)
        {
            list.add(testArray[ j ]);
        }
        for (int j = 0; j < testArray.length; j++)
        {
            assertEquals(testArray[ j ], list.get(j));
        }
        assertEquals(testArray.length, list.size());

        // add at the beginning
        list.add(0, ( short ) -1);
        assertEquals(( short ) -1, list.get(0));
        assertEquals(testArray.length + 1, list.size());
        for (int j = 0; j < testArray.length; j++)
        {
            assertEquals(testArray[ j ], list.get(j + 1));
        }

        // add in the middle
        list.add(5, ( short ) 4);
        assertEquals(( short ) 4, list.get(5));
        assertEquals(testArray.length + 2, list.size());
        for (int j = 0; j < list.size(); j++)
        {
            assertEquals(( short ) (j - 1), list.get(j));
        }

        // add at the end
        list.add(list.size(), ( short ) 6);
        assertEquals(testArray.length + 3, list.size());
        for (int j = 0; j < list.size(); j++)
        {
            assertEquals(( short ) (j - 1), list.get(j));
        }

        // add past end
        try
        {
            list.add(list.size() + 1, ( short ) 8);
            fail("should have thrown exception");
        }
        catch (IndexOutOfBoundsException e)
        {

            // as expected
        }

        // test growth
        list = new ShortList(0);
        for (short j = 0; j < 1000; j++)
        {
            list.add(j);
        }
        assertEquals(1000, list.size());
        for (short j = 0; j < 1000; j++)
        {
            assertEquals(j, list.get(j));
        }
        list = new ShortList(0);
        for (short j = 0; j < 1000; j++)
        {
            list.add(0, j);
        }
        assertEquals(1000, list.size());
        for (short j = 0; j < 1000; j++)
        {
            assertEquals(j, list.get(999 - j));
        }
    }

