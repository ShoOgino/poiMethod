    /**
     * Test mixed registration operations
     */
    public void testMixedRegistrationOperations() {
        POIFSReaderRegistry registry = new POIFSReaderRegistry();

        for (int j = 0; j < listeners.length; j++)
        {
            for (int k = 0; k < paths.length; k++)
            {
                for (int n = 0; n < names.length; n++)
                {
                    if ((j != k) && (k != n))
                    {
                        registry.registerListener(
                                listeners[ j ], paths[ k ], names[ n ]);
                    }
                }
            }
        }
        for (int k = 0; k < paths.length; k++)
        {
            for (int n = 0; n < names.length; n++)
            {
                Iterator<POIFSReaderListener> listeners =
                    registry.getListeners(paths[ k ], names[ n ]);

                if (k == n)
                {
                    assertTrue(!listeners.hasNext());
                }
                else
                {
                    Set<POIFSReaderListener> registeredListeners =
                            new HashSet<>();

                    while (listeners.hasNext())
                    {
                        registeredListeners.add(listeners.next());
                    }
                    assertEquals(this.listeners.length - 1,
                                 registeredListeners.size());
                    for (int j = 0; j < this.listeners.length; j++)
                    {
                        if (j == k)
                        {
                            assertTrue(!registeredListeners
                                .contains(this.listeners[ j ]));
                        }
                        else
                        {
                            assertTrue(registeredListeners
                                .contains(this.listeners[ j ]));
                        }
                    }
                }
            }
        }
        for (POIFSReaderListener listener : listeners) {
            registry.registerListener(listener);
        }
        for (POIFSDocumentPath path : paths) {
            for (String name : names) {
                Iterator<POIFSReaderListener> listeners =
                    registry.getListeners(path, name);
                Set<POIFSReaderListener> registeredListeners =
                        new HashSet<>();

                while (listeners.hasNext())
                {
                    registeredListeners.add(listeners.next());
                }
                assertEquals(this.listeners.length,
                             registeredListeners.size());
                for (POIFSReaderListener listener : this.listeners) {
                    assertTrue(registeredListeners
                        .contains(listener));
                }
            }
        }
    }

