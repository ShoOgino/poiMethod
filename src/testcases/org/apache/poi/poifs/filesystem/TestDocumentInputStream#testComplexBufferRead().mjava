    /**
     * Test complex buffered read
     */
    @SuppressWarnings("ResultOfMethodCallIgnored")
    @Test
    public void testComplexBufferRead() throws IOException {
        DocumentInputStream stream = new DocumentInputStream(_workbook_n);
        try {
            stream.read(null, 0, 1);
            fail("Should have caught NullPointerException");
        } catch (IllegalArgumentException ignored) {
            // as expected
        }

        // test illegal offsets and lengths
        try {
            stream.read(new byte[5], -4, 0);
            fail("Should have caught IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException ignored) {
            // as expected
        }
        try {
            stream.read(new byte[5], 0, -4);
            fail("Should have caught IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException ignored) {
            // as expected
        }
        try {
            stream.read(new byte[5], 0, 6);
            fail("Should have caught IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException ignored) {
            // as expected
        }

        // test reading zero
        assertEquals(0, stream.read(new byte[5], 0, 0));
        assertEquals(_workbook_size, available(stream));
        byte[] buffer = new byte[_workbook_size];
        int offset = 0;

        while (available(stream) >= _buffer_size) {
            Arrays.fill(buffer, (byte) 0);
            assertEquals(_buffer_size,
                    stream.read(buffer, offset, _buffer_size));
            for (int j = 0; j < offset; j++) {
                assertEquals("checking byte " + j, 0, buffer[j]);
            }
            for (int j = offset; j < (offset + _buffer_size); j++) {
                assertEquals("checking byte " + j, _workbook_data[j],
                        buffer[j]);
            }
            for (int j = offset + _buffer_size; j < buffer.length; j++) {
                assertEquals("checking byte " + j, 0, buffer[j]);
            }
            offset += _buffer_size;
            assertEquals("offset " + offset, _workbook_size - offset,
                    available(stream));
        }
        assertEquals(_workbook_size % _buffer_size, available(stream));
        Arrays.fill(buffer, (byte) 0);
        int count = stream.read(buffer, offset,
                _workbook_size % _buffer_size);

        assertEquals(_workbook_size % _buffer_size, count);
        for (int j = 0; j < offset; j++) {
            assertEquals("checking byte " + j, 0, buffer[j]);
        }
        for (int j = offset; j < buffer.length; j++) {
            assertEquals("checking byte " + j, _workbook_data[j],
                    buffer[j]);
        }
        assertEquals(_workbook_size, offset + count);
        for (int j = count; j < offset; j++) {
            assertEquals("byte " + j, 0, buffer[j]);
        }

        assertEquals(-1, stream.read(buffer, 0, 1));
        stream.close();
        try {
            stream.read(buffer, 0, 1);
            fail("Should have caught IOException");
        } catch (IOException ignored) {
            // as expected
        }
    }

