    public void testAreDirectoriesIdentical() throws Exception {
       POIFSFileSystem fs = new POIFSFileSystem();
       DirectoryEntry dirA = fs.createDirectory("DirA");
       DirectoryEntry dirB = fs.createDirectory("DirB");
       
       // Names must match
       assertEquals(false, EntryUtils.areDirectoriesIdentical(dirA, dirB));
       
       // Empty dirs are fine
       DirectoryEntry dirA1 = dirA.createDirectory("TheDir"); 
       DirectoryEntry dirB1 = dirB.createDirectory("TheDir");
       assertEquals(0, dirA1.getEntryCount());
       assertEquals(0, dirB1.getEntryCount());
       assertEquals(true, EntryUtils.areDirectoriesIdentical(dirA1, dirB1));
       
       // Otherwise children must match
       dirA1.createDocument("Entry1", new ByteArrayInputStream(dataSmallA));
       assertEquals(false, EntryUtils.areDirectoriesIdentical(dirA1, dirB1));
       
       dirB1.createDocument("Entry1", new ByteArrayInputStream(dataSmallA));
       assertEquals(true, EntryUtils.areDirectoriesIdentical(dirA1, dirB1));
       
       dirA1.createDirectory("DD");
       assertEquals(false, EntryUtils.areDirectoriesIdentical(dirA1, dirB1));
       dirB1.createDirectory("DD");
       assertEquals(true, EntryUtils.areDirectoriesIdentical(dirA1, dirB1));
       
       
       // Excludes support
       List<String> excl = Arrays.asList(new String[] {"Ignore1", "IgnDir/Ign2"});
       FilteringDirectoryNode fdA = new FilteringDirectoryNode(dirA1, excl);
       FilteringDirectoryNode fdB = new FilteringDirectoryNode(dirB1, excl);
       
       assertEquals(true, EntryUtils.areDirectoriesIdentical(fdA, fdB));
       
       // Add an ignored doc, no notice is taken
       fdA.createDocument("Ignore1", new ByteArrayInputStream(dataSmallA));
       assertEquals(true, EntryUtils.areDirectoriesIdentical(fdA, fdB));
       
       // Add a directory with filtered contents, not the same
       DirectoryEntry dirAI = dirA1.createDirectory("IgnDir");
       assertEquals(false, EntryUtils.areDirectoriesIdentical(fdA, fdB));
       
       DirectoryEntry dirBI = dirB1.createDirectory("IgnDir");
       assertEquals(true, EntryUtils.areDirectoriesIdentical(fdA, fdB));
       
       // Add something to the filtered subdir that gets ignored
       dirAI.createDocument("Ign2", new ByteArrayInputStream(dataSmallA));
       assertEquals(true, EntryUtils.areDirectoriesIdentical(fdA, fdB));
       
       // And something that doesn't
       dirAI.createDocument("IgnZZ", new ByteArrayInputStream(dataSmallA));
       assertEquals(false, EntryUtils.areDirectoriesIdentical(fdA, fdB));
       
       dirBI.createDocument("IgnZZ", new ByteArrayInputStream(dataSmallA));
       assertEquals(true, EntryUtils.areDirectoriesIdentical(fdA, fdB));
    }

