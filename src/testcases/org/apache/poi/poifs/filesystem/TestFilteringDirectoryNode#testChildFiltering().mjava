    public void testChildFiltering() throws Exception {
       List<String> excl = Arrays.asList(new String[] {"NotThere","AlsoNotThere", eRoot.getName()});
       FilteringDirectoryNode d = new FilteringDirectoryNode(fs.getRoot(), excl);
       
       assertEquals(2, d.getEntryCount());
       assertEquals(true, d.hasEntry(dirA.getName()));
       assertEquals(true, d.hasEntry(dirB.getName()));
       assertEquals(false, d.hasEntry(eRoot.getName()));
       
       assertEquals(dirA, d.getEntry(dirA.getName()));
       assertEquals(dirB, d.getEntry(dirB.getName()));
       try {
          d.getEntry(eRoot.getName());
          fail("Should be filtered");
       } catch(FileNotFoundException e) {}
       
       Iterator<Entry> i = d.getEntries();
       assertEquals(dirA, i.next());
       assertEquals(dirB, i.next());
       assertEquals(null, i.next());
       
       
       // Filter more
       excl = Arrays.asList(new String[] {"NotThere","AlsoNotThere", eRoot.getName(), dirA.getName()});
       d = new FilteringDirectoryNode(fs.getRoot(), excl);
       
       assertEquals(1, d.getEntryCount());
       assertEquals(false, d.hasEntry(dirA.getName()));
       assertEquals(true, d.hasEntry(dirB.getName()));
       assertEquals(false, d.hasEntry(eRoot.getName()));
       
       try {
          d.getEntry(dirA.getName());
          fail("Should be filtered");
       } catch(FileNotFoundException e) {}
       assertEquals(dirB, d.getEntry(dirB.getName()));
       try {
          d.getEntry(eRoot.getName());
          fail("Should be filtered");
       } catch(FileNotFoundException e) {}
       
       i = d.getEntries();
       assertEquals(dirB, i.next());
       assertEquals(null, i.next());
       
       
       // Filter everything
       excl = Arrays.asList(new String[] {"NotThere", eRoot.getName(), dirA.getName(), dirB.getName()});
       d = new FilteringDirectoryNode(fs.getRoot(), excl);
       
       assertEquals(0, d.getEntryCount());
       assertEquals(false, d.hasEntry(dirA.getName()));
       assertEquals(false, d.hasEntry(dirB.getName()));
       assertEquals(false, d.hasEntry(eRoot.getName()));
       
       try {
          d.getEntry(dirA.getName());
          fail("Should be filtered");
       } catch(FileNotFoundException e) {}
       try {
          d.getEntry(dirB.getName());
          fail("Should be filtered");
       } catch(FileNotFoundException e) {}
       try {
          d.getEntry(eRoot.getName());
          fail("Should be filtered");
       } catch(FileNotFoundException e) {}
       
       i = d.getEntries();
       assertEquals(null, i.next());
    }

