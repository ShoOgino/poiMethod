   /**
    * Create a new file, write it and read it again
    * Then, add some streams, write and read
    */
   @Test
   @SuppressWarnings("resource")
   public void createWriteRead() throws Exception {
      NPOIFSFileSystem fs = new NPOIFSFileSystem();
      DocumentEntry miniDoc;
      DocumentEntry normDoc;
      
      // Initially has Properties + BAT but not SBAT
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(0));
      assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(1));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(2));
      
      // Check that the SBAT is empty
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getRoot().getProperty().getStartBlock());
      
      // Check that properties table was given block 0
      assertEquals(0, fs._get_property_table().getStartBlock());

      // Write and read it
      fs = writeOutAndReadBack(fs);
      
      // No change, SBAT remains empty 
      assertEquals(POIFSConstants.END_OF_CHAIN,     fs.getNextBlock(0));
      assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(1));
      assertEquals(POIFSConstants.UNUSED_BLOCK,     fs.getNextBlock(2));
      assertEquals(POIFSConstants.UNUSED_BLOCK,     fs.getNextBlock(3));
      assertEquals(POIFSConstants.END_OF_CHAIN,     fs.getRoot().getProperty().getStartBlock());
      assertEquals(0, fs._get_property_table().getStartBlock());

      
      // Put everything within a new directory
      DirectoryEntry testDir = fs.createDirectory("Test Directory");
      
      // Add a new Normal Stream (Normal Streams minimum 4096 bytes)
      byte[] main4096 = new byte[4096];
      main4096[0] = -10;
      main4096[4095] = -11;
      testDir.createDocument("Normal4096", new ByteArrayInputStream(main4096));

      assertEquals(POIFSConstants.END_OF_CHAIN,     fs.getNextBlock(0));
      assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(1));
      assertEquals(3, fs.getNextBlock(2));
      assertEquals(4, fs.getNextBlock(3));
      assertEquals(5, fs.getNextBlock(4));
      assertEquals(6, fs.getNextBlock(5));
      assertEquals(7, fs.getNextBlock(6));
      assertEquals(8, fs.getNextBlock(7));
      assertEquals(9, fs.getNextBlock(8));
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(9));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(10));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(11));
      // SBAT still unused
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getRoot().getProperty().getStartBlock());

      
      // Add a bigger Normal Stream
      byte[] main5124 = new byte[5124];
      main5124[0] = -22;
      main5124[5123] = -33;
      testDir.createDocument("Normal5124", new ByteArrayInputStream(main5124));

      assertEquals(POIFSConstants.END_OF_CHAIN,     fs.getNextBlock(0));
      assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(1));
      assertEquals(3, fs.getNextBlock(2));
      assertEquals(4, fs.getNextBlock(3));
      assertEquals(5, fs.getNextBlock(4));
      assertEquals(6, fs.getNextBlock(5));
      assertEquals(7, fs.getNextBlock(6));
      assertEquals(8, fs.getNextBlock(7));
      assertEquals(9, fs.getNextBlock(8));
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(9));

      assertEquals(11, fs.getNextBlock(10));
      assertEquals(12, fs.getNextBlock(11));
      assertEquals(13, fs.getNextBlock(12));
      assertEquals(14, fs.getNextBlock(13));
      assertEquals(15, fs.getNextBlock(14));
      assertEquals(16, fs.getNextBlock(15));
      assertEquals(17, fs.getNextBlock(16));
      assertEquals(18, fs.getNextBlock(17));
      assertEquals(19, fs.getNextBlock(18));
      assertEquals(20, fs.getNextBlock(19));
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(20));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(21));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(22));

      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getRoot().getProperty().getStartBlock());
      
      
      // Now Add a mini stream
      byte[] mini = new byte[] { 42, 0, 1, 2, 3, 4, 42 };
      testDir.createDocument("Mini", new ByteArrayInputStream(mini));
      
      // Mini stream will get one block for fat + one block for data
      assertEquals(POIFSConstants.END_OF_CHAIN,     fs.getNextBlock(0));
      assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(1));
      assertEquals(3, fs.getNextBlock(2));
      assertEquals(4, fs.getNextBlock(3));
      assertEquals(5, fs.getNextBlock(4));
      assertEquals(6, fs.getNextBlock(5));
      assertEquals(7, fs.getNextBlock(6));
      assertEquals(8, fs.getNextBlock(7));
      assertEquals(9, fs.getNextBlock(8));
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(9));

      assertEquals(11, fs.getNextBlock(10));
      assertEquals(12, fs.getNextBlock(11));
      assertEquals(13, fs.getNextBlock(12));
      assertEquals(14, fs.getNextBlock(13));
      assertEquals(15, fs.getNextBlock(14));
      assertEquals(16, fs.getNextBlock(15));
      assertEquals(17, fs.getNextBlock(16));
      assertEquals(18, fs.getNextBlock(17));
      assertEquals(19, fs.getNextBlock(18));
      assertEquals(20, fs.getNextBlock(19));
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(20));
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(21));
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(22));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(23));

      // Check the mini stream location was set
      // (21 is mini fat, 22 is first mini stream block)
      assertEquals(22, fs.getRoot().getProperty().getStartBlock());
      
      
      // Write and read back
      fs = writeOutAndReadBack(fs);
      HeaderBlock header = writeOutAndReadHeader(fs);
      
      // Check the header has the right points in it
      assertEquals(1, header.getBATCount());
      assertEquals(1, header.getBATArray()[0]);
      assertEquals(0, header.getPropertyStart());
      assertEquals(1, header.getSBATCount());
      assertEquals(21, header.getSBATStart());
      assertEquals(22, fs._get_property_table().getRoot().getStartBlock());
      
      // Block use should be almost the same, except the properties
      //  stream will have grown out to cover 2 blocks
      // Check the block use is all unchanged
      assertEquals(23, fs.getNextBlock(0)); // Properties now extends over 2 blocks
      assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(1));
      
      assertEquals(3, fs.getNextBlock(2));
      assertEquals(4, fs.getNextBlock(3));
      assertEquals(5, fs.getNextBlock(4));
      assertEquals(6, fs.getNextBlock(5));
      assertEquals(7, fs.getNextBlock(6));
      assertEquals(8, fs.getNextBlock(7));
      assertEquals(9, fs.getNextBlock(8));
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(9)); // End of normal4096

      assertEquals(11, fs.getNextBlock(10));
      assertEquals(12, fs.getNextBlock(11));
      assertEquals(13, fs.getNextBlock(12));
      assertEquals(14, fs.getNextBlock(13));
      assertEquals(15, fs.getNextBlock(14));
      assertEquals(16, fs.getNextBlock(15));
      assertEquals(17, fs.getNextBlock(16));
      assertEquals(18, fs.getNextBlock(17));
      assertEquals(19, fs.getNextBlock(18));
      assertEquals(20, fs.getNextBlock(19));
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(20)); // End of normal5124 
      
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(21)); // Mini Stream FAT
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(22)); // Mini Stream data
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(23)); // Properties #2
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(24));

      
      // Check some data
      assertEquals(1, fs.getRoot().getEntryCount());
      testDir = (DirectoryEntry)fs.getRoot().getEntry("Test Directory");
      assertEquals(3, testDir.getEntryCount());

      miniDoc = (DocumentEntry)testDir.getEntry("Mini");
      assertContentsMatches(mini, miniDoc);
      
      normDoc = (DocumentEntry)testDir.getEntry("Normal4096");
      assertContentsMatches(main4096, normDoc);

      normDoc = (DocumentEntry)testDir.getEntry("Normal5124");
      assertContentsMatches(main5124, normDoc);
      
      
      // Delete a couple of streams
      miniDoc.delete();
      normDoc.delete();

      
      // Check - will have un-used sectors now
      fs = writeOutAndReadBack(fs);
      
      assertEquals(POIFSConstants.END_OF_CHAIN,     fs.getNextBlock(0)); // Props back in 1 block
      assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(1));
      
      assertEquals(3, fs.getNextBlock(2));
      assertEquals(4, fs.getNextBlock(3));
      assertEquals(5, fs.getNextBlock(4));
      assertEquals(6, fs.getNextBlock(5));
      assertEquals(7, fs.getNextBlock(6));
      assertEquals(8, fs.getNextBlock(7));
      assertEquals(9, fs.getNextBlock(8));
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(9)); // End of normal4096

      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(10));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(11));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(12));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(13));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(14));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(15));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(16));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(17));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(18));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(19));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(20));
      
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(21)); // Mini Stream FAT
      assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(22)); // Mini Stream data
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(23)); // Properties gone
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(24));
      assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(25));
      
      // All done
      fs.close();
   }

