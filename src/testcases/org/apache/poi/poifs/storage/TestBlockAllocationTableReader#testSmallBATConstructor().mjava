	/**
	 * Test small block allocation table constructor
	 */
	@Test
	public void testSmallBATConstructor() throws IOException {

		// need to create an array of raw blocks containing the SBAT,
		// and a small document block list
		final String sbat_data = "H4sIAAAAAAAAAPv/nzjwj4ZYiYGBAZfcKKAtAAC/sexrAAIAAA==";

		RawDataBlock[] sbats = { new RawDataBlock(new ByteArrayInputStream(RawDataUtil.decompress(sbat_data))) };

		final String sbt_data =
			"H4sIAAAAAAAAAONg0GDISsxNLdYNNTc3Mrc00tUwNNP1Ty7RNTIwMHQAsk0MdY2NNfWiXNwYsAB2MNmg/sgBmyxhQB395AMm" +
			"BkaK9HNQaD83hfqZKXY/E4OCIQcDK0NwYllqCgeDOEOwnkdocLCjp5+Co4KLa5iCv5tbkEKoNwfQrUhJA6TFVM9Yz4gy94OM" +
			"Aac/svVTaj8zg7tTAAX6ZRk0HDWRAkahJF8BiUtQPyMDITX4ABMFegeDfsrjjzLAxCBBoX7KwED7n/LwG2j7KSv/Bt79A2s/" +
			"NdzPQUWaVDDQ/h/o+meop5+hrx9ng4ku9jOhYVIBM4X2j4KhDQAtwD4rAA4AAA==";

		InputStream sbt_input = new ByteArrayInputStream(RawDataUtil.decompress(sbt_data));

		BlockListImpl small_blocks = new RawDataBlockList(sbt_input, POIFSConstants.SMALLER_BIG_BLOCK_SIZE_DETAILS);
		int blockCount = small_blocks.blockCount();
		ListManagedBlock[] lmb = new ListManagedBlock[7*blockCount];
		for (int i=0; i<lmb.length; i++) {
			lmb[i] = small_blocks.get(i % blockCount);
		}
		small_blocks.setBlocks(lmb);

		BlockAllocationTableReader sbat = new BlockAllocationTableReader(
		      POIFSConstants.SMALLER_BIG_BLOCK_SIZE_DETAILS, sbats, small_blocks);
		int[] nextIndex = {
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -2,
			-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
			-2, 34, -2, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
		};

		for (int j = 0; j < 128; j++) {
			final boolean isUsed = nextIndex[j] != -1;
			assertEquals("checking usage of block " + j, isUsed, sbat.isUsed(j));

			if (isUsed) {
				assertEquals("checking usage of block " + j, nextIndex[j], sbat.getNextBlockIndex(j));
				small_blocks.remove(j);
			} else {
				try {
					small_blocks.remove(j);
					fail("removing block " + j + " should have failed");
				} catch (IOException ignored) {
					// expected during successful test
				}
			}
		}
	}

