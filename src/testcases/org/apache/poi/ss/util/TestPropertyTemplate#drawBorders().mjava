    @Test
    public void drawBorders() throws IOException {
        CellRangeAddress a1c3 = new CellRangeAddress(0, 2, 0, 2);
        PropertyTemplate pt = new PropertyTemplate();
        
        pt.drawBorders(a1c3, CellStyle.BORDER_THIN, Extent.ALL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                assertEquals(4, pt.getNumBorders(i, j));
                assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_MEDIUM, Extent.OUTSIDE);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                assertEquals(4, pt.getNumBorders(i, j));
                if (i == 0) {
                    if (j == 0) {
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                    } else if (j == 2) {
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                    } else {
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                    }
                } else if (i == 2) {
                    if (j == 0) {
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                    } else if (j == 2) {
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                    } else {
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                    }
                } else {
                    if (j == 0) {
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                    } else if (j == 2) {
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                        assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                    } else {
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                        assertThin(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                    }
                }
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_NONE, Extent.NONE);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                assertEquals(0, pt.getNumBorders(i, j));
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_MEDIUM, Extent.TOP);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (i == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_NONE, Extent.NONE);
        pt.drawBorders(a1c3, CellStyle.BORDER_MEDIUM, Extent.BOTTOM);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (i == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_NONE, Extent.NONE);
        pt.drawBorders(a1c3, CellStyle.BORDER_MEDIUM, Extent.LEFT);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (j == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_NONE, Extent.NONE);
        pt.drawBorders(a1c3, CellStyle.BORDER_MEDIUM, Extent.RIGHT);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (j == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_NONE, Extent.NONE);
        pt.drawBorders(a1c3, CellStyle.BORDER_MEDIUM, Extent.HORIZONTAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                assertEquals(2, pt.getNumBorders(i, j));
                assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_NONE, Extent.NONE);
        pt.drawBorders(a1c3, CellStyle.BORDER_MEDIUM, Extent.INSIDE_HORIZONTAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (i == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                } else if (i == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                } else {
                    assertEquals(2, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                }
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_NONE, Extent.NONE);
        pt.drawBorders(a1c3, CellStyle.BORDER_MEDIUM, Extent.OUTSIDE_HORIZONTAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (i == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_TOP));
                } else if (i == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_BOTTOM));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_NONE, Extent.NONE);
        pt.drawBorders(a1c3, CellStyle.BORDER_MEDIUM, Extent.VERTICAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                assertEquals(2, pt.getNumBorders(i, j));
                assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_NONE, Extent.NONE);
        pt.drawBorders(a1c3, CellStyle.BORDER_MEDIUM, Extent.INSIDE_VERTICAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (j == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                } else if (j == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                } else {
                    assertEquals(2, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_RIGHT));
                }
            }
        }
        
        pt.drawBorders(a1c3, CellStyle.BORDER_NONE, Extent.NONE);
        pt.drawBorders(a1c3, CellStyle.BORDER_MEDIUM, Extent.OUTSIDE_VERTICAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (j == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i, j, CellUtil.BORDER_LEFT));
                } else if (j == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertMedium(pt.getTemplateProperty(i ,j, CellUtil.BORDER_RIGHT));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
    }

