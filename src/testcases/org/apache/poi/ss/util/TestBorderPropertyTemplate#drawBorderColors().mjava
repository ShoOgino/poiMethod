    @Test
    public void drawBorderColors() throws IOException {
        CellRangeAddress a1c3 = new CellRangeAddress(0, 2, 0, 2);
        BorderPropertyTemplate pt = new BorderPropertyTemplate();
        
        pt.drawBorderColors(a1c3, RED, BorderExtent.ALL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                String msg = addr.formatAsString();
                assertEquals(msg, 4, pt.getNumBorders(addr));
                assertEquals(msg, 4, pt.getNumBorderColors(addr));
                assertRed(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                assertRed(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                assertRed(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                assertRed(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
            }
        }
        
        pt.drawBorderColors(a1c3, BLUE, BorderExtent.OUTSIDE);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                assertEquals(4, pt.getNumBorders(addr));
                assertEquals(4, pt.getNumBorderColors(addr));
                if (i == 0) {
                    if (j == 0) {
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                    } else if (j == 2) {
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                    } else {
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                    }
                } else if (i == 2) {
                    if (j == 0) {
                        assertRed(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                    } else if (j == 2) {
                        assertRed(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                    } else {
                        assertRed(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                    }
                } else {
                    if (j == 0) {
                        assertRed(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                    } else if (j == 2) {
                        assertRed(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                        assertBlue(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                    } else {
                        assertRed(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                        assertRed(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                    }
                }
            }
        }
        
        pt.drawBorders(a1c3, BorderStyle.NONE, AUTOMATIC, BorderExtent.NONE);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                assertEquals(0, pt.getNumBorders(addr));
                assertEquals(0, pt.getNumBorderColors(addr));
            }
        }
        
        pt.drawBorderColors(a1c3, BLUE, BorderExtent.TOP);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                if (i == 0) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                } else {
                    assertEquals(0, pt.getNumBorders(addr));
                    assertEquals(0, pt.getNumBorderColors(addr));
                }
            }
        }
        
        pt.drawBorders(a1c3, BorderStyle.NONE, AUTOMATIC, BorderExtent.NONE);
        pt.drawBorderColors(a1c3, BLUE, BorderExtent.BOTTOM);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                if (i == 2) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                } else {
                    assertEquals(0, pt.getNumBorders(addr));
                    assertEquals(0, pt.getNumBorderColors(addr));
                }
            }
        }
        
        pt.drawBorders(a1c3, BorderStyle.NONE, AUTOMATIC, BorderExtent.NONE);
        pt.drawBorderColors(a1c3, BLUE, BorderExtent.LEFT);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                if (j == 0) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                } else {
                    assertEquals(0, pt.getNumBorders(addr));
                    assertEquals(0, pt.getNumBorderColors(addr));
                }
            }
        }
        
        pt.drawBorders(a1c3, BorderStyle.NONE, AUTOMATIC, BorderExtent.NONE);
        pt.drawBorderColors(a1c3, BLUE, BorderExtent.RIGHT);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                if (j == 2) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                } else {
                    assertEquals(0, pt.getNumBorders(addr));
                    assertEquals(0, pt.getNumBorderColors(addr));
                }
            }
        }
        
        pt.drawBorders(a1c3, BorderStyle.NONE, AUTOMATIC, BorderExtent.NONE);
        pt.drawBorderColors(a1c3, BLUE, BorderExtent.HORIZONTAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                assertEquals(2, pt.getNumBorders(addr));
                assertEquals(2, pt.getNumBorderColors(addr));
                assertBlue(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                assertBlue(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
            }
        }
        
        pt.drawBorders(a1c3, BorderStyle.NONE, AUTOMATIC, BorderExtent.NONE);
        pt.drawBorderColors(a1c3, BLUE, BorderExtent.INSIDE_HORIZONTAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                if (i == 0) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                } else if (i == 2) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                } else {
                    assertEquals(2, pt.getNumBorders(addr));
                    assertEquals(2, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                }
            }
        }
        
        pt.drawBorders(a1c3, BorderStyle.NONE, AUTOMATIC, BorderExtent.NONE);
        pt.drawBorderColors(a1c3, BLUE, BorderExtent.OUTSIDE_HORIZONTAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                if (i == 0) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.TOP_BORDER_COLOR));
                } else if (i == 2) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.BOTTOM_BORDER_COLOR));
                } else {
                    assertEquals(0, pt.getNumBorders(addr));
                    assertEquals(0, pt.getNumBorderColors(addr));
                }
            }
        }
        
        pt.drawBorders(a1c3, BorderStyle.NONE, AUTOMATIC, BorderExtent.NONE);
        pt.drawBorderColors(a1c3, BLUE, BorderExtent.VERTICAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                assertEquals(2, pt.getNumBorders(addr));
                assertEquals(2, pt.getNumBorderColors(addr));
                assertBlue(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                assertBlue(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
            }
        }
        
        pt.drawBorders(a1c3, BorderStyle.NONE, AUTOMATIC, BorderExtent.NONE);
        pt.drawBorderColors(a1c3, BLUE, BorderExtent.INSIDE_VERTICAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                if (j == 0) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                } else if (j == 2) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                } else {
                    assertEquals(2, pt.getNumBorders(addr));
                    assertEquals(2, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                }
            }
        }
        
        pt.drawBorders(a1c3, BorderStyle.NONE, AUTOMATIC, BorderExtent.NONE);
        pt.drawBorderColors(a1c3, BLUE, BorderExtent.OUTSIDE_VERTICAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                CellAddress addr = new CellAddress(i, j);
                if (j == 0) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.LEFT_BORDER_COLOR));
                } else if (j == 2) {
                    assertEquals(1, pt.getNumBorders(addr));
                    assertEquals(1, pt.getNumBorderColors(addr));
                    assertBlue(pt.getTemplateProperty(addr, CellUtil.RIGHT_BORDER_COLOR));
                } else {
                    assertEquals(0, pt.getNumBorders(addr));
                    assertEquals(0, pt.getNumBorderColors(addr));
                }
            }
        }
    }

