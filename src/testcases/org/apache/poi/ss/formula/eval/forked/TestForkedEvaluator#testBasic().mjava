	/**
	 * Shows a basic use-case for {@link ForkedEvaluator}
	 */
	public void testBasic() {
		HSSFWorkbook wb = createWorkbook();

		// The stability classifier is useful to reduce memory consumption of caching logic
		IStabilityClassifier stabilityClassifier = new IStabilityClassifier() {
			public boolean isCellFinal(int sheetIndex, int rowIndex, int columnIndex) {
				return sheetIndex == 1;
			}
		};

		ForkedEvaluator fe1 = ForkedEvaluator.create(wb, stabilityClassifier, null);
		ForkedEvaluator fe2 = ForkedEvaluator.create(wb, stabilityClassifier, null);

		// fe1 and fe2 can be used concurrently on separate threads

		fe1.updateCell("Inputs", 0, 0, new NumberEval(4.0));
		fe1.updateCell("Inputs", 0, 1, new NumberEval(1.1));

		fe2.updateCell("Inputs", 0, 0, new NumberEval(1.2));
		fe2.updateCell("Inputs", 0, 1, new NumberEval(2.0));

		assertEquals(18.9, ((NumberEval) fe1.evaluate("Calculations", 0, 0)).getNumberValue(), 0.0);
		assertEquals(4.0, ((NumberEval) fe2.evaluate("Calculations", 0, 0)).getNumberValue(), 0.0);
		fe1.updateCell("Inputs", 0, 0, new NumberEval(3.0));
		assertEquals(13.9, ((NumberEval) fe1.evaluate("Calculations", 0, 0)).getNumberValue(), 0.0);
	}

