    public void testUnimplemented(){
        Workbook wb = new HSSFWorkbook();

        FormulaEvaluator fe = wb.getCreationHelper().createFormulaEvaluator();

        Sheet sh = wb.createSheet();
        Cell a3 = sh.createRow(3).createCell(1);
        a3.setCellFormula("SUBTOTAL(8,B2:B3)");

        try {
            fe.evaluateAll();
            fail("Should catch an NotImplementedFunctionException here, adjust these tests if it was actually implemented");
        } catch (NotImplementedException e) {
            // expected here
        }

        a3.setCellFormula("SUBTOTAL(10,B2:B3)");

        try {
            fe.evaluateAll();
            fail("Should catch an NotImplementedFunctionException here, adjust these tests if it was actually implemented");
        } catch (NotImplementedException e) {
            // expected here
        }

        a3.setCellFormula("SUBTOTAL(11,B2:B3)");

        try {
            fe.evaluateAll();
            fail("Should catch an NotImplementedFunctionException here, adjust these tests if it was actually implemented");
        } catch (NotImplementedException e) {
            // expected here
        }

        a3.setCellFormula("SUBTOTAL(107,B2:B3)");

        try {
            fe.evaluateAll();
            fail("Should catch an NotImplementedFunctionException here, adjust these tests if it was actually implemented");
        } catch (NotImplementedException e) {
            // expected here
        }

        a3.setCellFormula("SUBTOTAL(0,B2:B3)");
        fe.evaluateAll();
        assertEquals(FormulaError.VALUE.getCode(), a3.getErrorCellValue());

        try {
            a3.setCellFormula("SUBTOTAL(9)");
            fail("Should catch an exception here");
        } catch (FormulaParseException e) {
            // expected here
        }

        try {
            a3.setCellFormula("SUBTOTAL()");
            fail("Should catch an exception here");
        } catch (FormulaParseException e) {
            // expected here
        }

        Subtotal subtotal = new Subtotal();
        assertEquals(ErrorEval.VALUE_INVALID, subtotal.evaluate(new ValueEval[] {}, 0, 0));
    }

