    private static void confirmAreaRowCopy(AreaPtg aptg,
                                           int firstRowCopied, int lastRowCopied, int rowOffset,
                                           int expectedFirstRow, int expectedLastRow, boolean expectedChanged) {

        final AreaPtg copyPtg = (AreaPtg) aptg.copy(); // clone so we can re-use aptg in calling method
        final Ptg[] ptgs = { copyPtg, };
        final FormulaShifter fs = FormulaShifter.createForRowCopy(0, null, firstRowCopied, lastRowCopied, rowOffset, SpreadsheetVersion.EXCEL2007);
        final boolean actualChanged = fs.adjustFormula(ptgs, 0);
        
        // DeletedAreaRef
        if (expectedFirstRow < 0 || expectedLastRow < 0) {
            assertEquals("Reference should have shifted off worksheet, producing #REF! error: " + ptgs[0],
                    AreaErrPtg.class, ptgs[0].getClass());
            return;
        }
        
        assertEquals("Should this AreaPtg change due to row copy?", expectedChanged, actualChanged);
        assertEquals("AreaPtgs should be modified in-place when a row containing the AreaPtg is copied", copyPtg, ptgs[0]);  // expected to change in place (although this is not a strict requirement)
        assertEquals("AreaPtg first row", expectedFirstRow, copyPtg.getFirstRow());
        assertEquals("AreaPtg last row", expectedLastRow, copyPtg.getLastRow());

    }

