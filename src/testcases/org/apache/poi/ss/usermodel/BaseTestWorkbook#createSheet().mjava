    @Test
    public void createSheet() throws IOException {
        try (Workbook wb = _testDataProvider.createWorkbook()) {
            assertEquals(0, wb.getNumberOfSheets());

            //getting a sheet by invalid index or non-existing name
            assertNull(wb.getSheet("Sheet1"));
            IllegalArgumentException ex = assertThrows(
                "should have thrown exception due to invalid sheet index",
                IllegalArgumentException.class,
                () -> wb.getSheetAt(0)
            );
            // expected during successful test no negative index in the range message
            assertFalse(ex.getMessage().contains("-1"));

            assertThrows(IllegalArgumentException.class, () -> wb.getSheetAt(0));

            Sheet sheet0 = wb.createSheet();
            Sheet sheet1 = wb.createSheet();
            assertEquals("Sheet0", sheet0.getSheetName());
            assertEquals("Sheet1", sheet1.getSheetName());
            assertEquals(2, wb.getNumberOfSheets());

            //fetching sheets by name is case-insensitive
            Sheet originalSheet = wb.createSheet("Sheet3");
            Sheet fetchedSheet = wb.getSheet("sheet3");
            if (fetchedSheet == null) {
                fail("Identified bug 44892");
            }
            assertEquals("Sheet3", fetchedSheet.getSheetName());
            assertEquals(3, wb.getNumberOfSheets());
            assertSame(originalSheet, fetchedSheet);
            ex = assertThrows(
                "should have thrown exception due to duplicate sheet name",
                IllegalArgumentException.class,
                () -> wb.createSheet("sHeeT3")
            );
            // expected during successful test
            assertEquals("The workbook already contains a sheet named 'sHeeT3'", ex.getMessage());

            //names cannot be blank or contain any of /\*?[]
            String[] invalidNames = {"", "Sheet/", "Sheet\\",
                    "Sheet?", "Sheet*", "Sheet[", "Sheet]", "'Sheet'",
                    "My:Sheet"};
            for (String sheetName : invalidNames) {
                assertThrows(
                    "should have thrown exception due to invalid sheet name: " + sheetName,
                    IllegalArgumentException.class,
                    () -> wb.createSheet(sheetName)
                );
            }
            //still have 3 sheets
            assertEquals(3, wb.getNumberOfSheets());

            //change the name of the 3rd sheet
            wb.setSheetName(2, "I changed!");

            //try to assign an invalid name to the 2nd sheet
            try {
                wb.setSheetName(1, "[I'm invalid]");
                fail("should have thrown exceptiuon due to invalid sheet name");
            } catch (IllegalArgumentException e) {
                // expected during successful test
            }

            //try to assign an invalid name to the 2nd sheet
            try {
                wb.createSheet(null);
                fail("should have thrown exceptiuon due to invalid sheet name");
            } catch (IllegalArgumentException e) {
                // expected during successful test
            }

            try {
                wb.setSheetName(2, null);

                fail("should have thrown exceptiuon due to invalid sheet name");
            } catch (IllegalArgumentException e) {
                // expected during successful test
            }

            //check
            assertEquals(0, wb.getSheetIndex("sheet0"));
            assertEquals(1, wb.getSheetIndex("sheet1"));
            assertEquals(2, wb.getSheetIndex("I changed!"));

            assertSame(sheet0, wb.getSheet("sheet0"));
            assertSame(sheet1, wb.getSheet("sheet1"));
            assertSame(originalSheet, wb.getSheet("I changed!"));
            assertNull(wb.getSheet("unknown"));

            //serialize and read again
            try (Workbook wb2 = _testDataProvider.writeOutAndReadBack(wb)) {
                assertEquals(3, wb2.getNumberOfSheets());
                assertEquals(0, wb2.getSheetIndex("sheet0"));
                assertEquals(1, wb2.getSheetIndex("sheet1"));
                assertEquals(2, wb2.getSheetIndex("I changed!"));
            }
        }
    }

