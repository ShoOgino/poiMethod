    /**
     * <p>Writes a simple property set with a SummaryInformation section to a
     * POIFS and reads it back in.</p>
     *
     * @exception IOException if an I/O exception occurs
     * @exception UnsupportedVariantTypeException if HPSF does not yet support
     * a variant type to be written
     */
    @Test
    public void writeSimplePropertySet()
    throws IOException, UnsupportedVariantTypeException {
        final String AUTHOR = "Rainer Klute";
        final String TITLE = "Test Document";
        final File dataDir = _samples.getFile("");
        final File filename = new File(dataDir, POI_FS);
        filename.deleteOnExit();
        final OutputStream out = new FileOutputStream(filename);
        final POIFSFileSystem poiFs = new POIFSFileSystem();

        final PropertySet ps = new PropertySet();
        final Section si = new Section();
        si.setFormatID(SectionIDMap.SUMMARY_INFORMATION_ID);
        ps.clearSections();
        ps.addSection(si);

        final Property p = new Property();
        p.setID(PropertyIDMap.PID_AUTHOR);
        p.setType(Variant.VT_LPWSTR);
        p.setValue(AUTHOR);
        si.setProperty(p);
        si.setProperty(PropertyIDMap.PID_TITLE, Variant.VT_LPSTR, TITLE);

        poiFs.createDocument(ps.toInputStream(),
                             SummaryInformation.DEFAULT_STREAM_NAME);
        poiFs.writeFilesystem(out);
        poiFs.close();
        out.close();

        /* Read the POIFS: */
        final PropertySet[] psa = new PropertySet[1];
        final POIFSReader r = new POIFSReader();
        r.registerListener(new POIFSReaderListener() {
            @Override
            public void processPOIFSReaderEvent(final POIFSReaderEvent event) {
                try {
                    psa[0] = PropertySetFactory.create(event.getStream());
                } catch (Exception ex) {
                    fail(ex.getMessage());
                }
            }},
            SummaryInformation.DEFAULT_STREAM_NAME
        );
        
        InputStream stream = new FileInputStream(filename);
        try {
            r.read(stream);
        } finally {
            stream.close();
        }
        assertNotNull(psa[0]);
        assertTrue(psa[0].isSummaryInformation());

        final Section s = (psa[0].getSections().get(0));
        Object p1 = s.getProperty(PropertyIDMap.PID_AUTHOR);
        Object p2 = s.getProperty(PropertyIDMap.PID_TITLE);
        assertEquals(AUTHOR, p1);
        assertEquals(TITLE, p2);
    }

