    /**
     * Serialize escher aggregate, read back and assert that the drawing data is preserved.
     *
     * @param agg the aggregate to test
     * @return verified aggregate (serialized and read back)
     */
    public static EscherAggregate assertWriteAndReadBack(EscherAggregate agg) {
        byte[] dgBytes = agg.serialize();


        List<Record> dgRecords = RecordFactory.createRecords(new ByteArrayInputStream(dgBytes));

        DrawingManager2 drawingManager = new DrawingManager2(new EscherDggRecord());

        // create a dummy sheet consisting of our test data
        InternalSheet sheet = InternalSheet.createSheet();
        List<RecordBase> records = sheet.getRecords();
        records.clear();
        records.addAll(dgRecords);
        records.add(EOFRecord.instance);


        sheet.aggregateDrawingRecords(drawingManager, false);
        assertEquals("drawing was not fully aggregated", 2, records.size());
        assertTrue("expected EscherAggregate", records.get(0) instanceof EscherAggregate);
        assertTrue("expected EOFRecord", records.get(1) instanceof EOFRecord);
        EscherAggregate agg2 = (EscherAggregate) records.get(0);

        assertEquals(agg.getEscherRecords().size(), agg2.getEscherRecords().size());

        // assert that both pre- and after- serialize aggregates have the same xml representation
        for (int i = 0; i < agg.getEscherRecords().size(); i++) {
            EscherRecord r1 = agg.getEscherRecords().get(i);
            EscherRecord r2 = agg2.getEscherRecords().get(i);

            assertEquals(r1.toXml(), r2.toXml());
        }

        return agg2;
    }

