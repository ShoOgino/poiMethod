    @SuppressWarnings("resource")
    @Test
    public void addPictures() throws IOException {
        HSSFWorkbook wb = new HSSFWorkbook();
        
        HSSFSheet sh = wb.createSheet("Pictures");
        HSSFPatriarch dr = sh.createDrawingPatriarch();
        assertEquals(0, dr.getChildren().size());
        HSSFClientAnchor anchor = wb.getCreationHelper().createClientAnchor();

        //register a picture
        byte[] data1 = new byte[]{1, 2, 3};
        int idx1 = wb.addPicture(data1, Workbook.PICTURE_TYPE_JPEG);
        assertEquals(1, idx1);
        HSSFPicture p1 = dr.createPicture(anchor, idx1);
        assertArrayEquals(data1, p1.getPictureData().getData());

        // register another one
        byte[] data2 = new byte[]{4, 5, 6};
        int idx2 = wb.addPicture(data2, Workbook.PICTURE_TYPE_JPEG);
        assertEquals(2, idx2);
        HSSFPicture p2 = dr.createPicture(anchor, idx2);
        assertEquals(2, dr.getChildren().size());
        assertArrayEquals(data2, p2.getPictureData().getData());

        // confirm that HSSFPatriarch.getChildren() returns two picture shapes 
        assertArrayEquals(data1, ((HSSFPicture)dr.getChildren().get(0)).getPictureData().getData());
        assertArrayEquals(data2, ((HSSFPicture)dr.getChildren().get(1)).getPictureData().getData());

        // write, read back and verify that our pictures are there
        wb = HSSFTestDataSamples.writeOutAndReadBack(wb);
        List<? extends PictureData> lst2 =  wb.getAllPictures();
        assertEquals(2, lst2.size());
        assertArrayEquals(data1, lst2.get(0).getData());
        assertArrayEquals(data2, lst2.get(1).getData());

        // confirm that the pictures are in the Sheet's drawing
        sh = wb.getSheet("Pictures");
        dr = sh.createDrawingPatriarch();
        assertEquals(2, dr.getChildren().size());
        assertArrayEquals(data1, ((HSSFPicture)dr.getChildren().get(0)).getPictureData().getData());
        assertArrayEquals(data2, ((HSSFPicture)dr.getChildren().get(1)).getPictureData().getData());

        // add a third picture
        byte[] data3 = new byte[]{7, 8, 9};
        // picture index must increment across write-read
        int idx3 = wb.addPicture(data3, Workbook.PICTURE_TYPE_JPEG);
        assertEquals(3, idx3);
        HSSFPicture p3 = dr.createPicture(anchor, idx3);
        assertArrayEquals(data3, p3.getPictureData().getData());
        assertEquals(3, dr.getChildren().size());
        assertArrayEquals(data1, ((HSSFPicture)dr.getChildren().get(0)).getPictureData().getData());
        assertArrayEquals(data2, ((HSSFPicture)dr.getChildren().get(1)).getPictureData().getData());
        assertArrayEquals(data3, ((HSSFPicture)dr.getChildren().get(2)).getPictureData().getData());

        // write and read again
        wb = HSSFTestDataSamples.writeOutAndReadBack(wb);
        List<? extends PictureData> lst3 =  wb.getAllPictures();
        // all three should be there
        assertEquals(3, lst3.size());
        assertArrayEquals(data1, lst3.get(0).getData());
        assertArrayEquals(data2, lst3.get(1).getData());
        assertArrayEquals(data3, lst3.get(2).getData());

        sh = wb.getSheet("Pictures");
        dr = sh.createDrawingPatriarch();
        assertEquals(3, dr.getChildren().size());

        // forth picture
        byte[] data4 = new byte[]{10, 11, 12};
        int idx4 = wb.addPicture(data4, Workbook.PICTURE_TYPE_JPEG);
        assertEquals(4, idx4);
        dr.createPicture(anchor, idx4);
        assertEquals(4, dr.getChildren().size());
        assertArrayEquals(data1, ((HSSFPicture)dr.getChildren().get(0)).getPictureData().getData());
        assertArrayEquals(data2, ((HSSFPicture)dr.getChildren().get(1)).getPictureData().getData());
        assertArrayEquals(data3, ((HSSFPicture)dr.getChildren().get(2)).getPictureData().getData());
        assertArrayEquals(data4, ((HSSFPicture)dr.getChildren().get(3)).getPictureData().getData());

        wb = HSSFTestDataSamples.writeOutAndReadBack(wb);
        List<? extends PictureData> lst4 =  wb.getAllPictures();
        assertEquals(4, lst4.size());
        assertArrayEquals(data1, lst4.get(0).getData());
        assertArrayEquals(data2, lst4.get(1).getData());
        assertArrayEquals(data3, lst4.get(2).getData());
        assertArrayEquals(data4, lst4.get(3).getData());
        sh = wb.getSheet("Pictures");
        dr = sh.createDrawingPatriarch();
        assertEquals(4, dr.getChildren().size());
        assertArrayEquals(data1, ((HSSFPicture)dr.getChildren().get(0)).getPictureData().getData());
        assertArrayEquals(data2, ((HSSFPicture)dr.getChildren().get(1)).getPictureData().getData());
        assertArrayEquals(data3, ((HSSFPicture)dr.getChildren().get(2)).getPictureData().getData());
        assertArrayEquals(data4, ((HSSFPicture)dr.getChildren().get(3)).getPictureData().getData());
        
        wb.close();
    }

