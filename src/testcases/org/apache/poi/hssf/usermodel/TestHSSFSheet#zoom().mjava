    @Test
    public void zoom() throws IOException {
        try (HSSFWorkbook wb = new HSSFWorkbook()) {
            HSSFSheet sheet = wb.createSheet();
            assertEquals(-1, sheet.getSheet().findFirstRecordLocBySid(SCLRecord.sid));
            sheet.setZoom(75);
            assertTrue(sheet.getSheet().findFirstRecordLocBySid(SCLRecord.sid) > 0);
            SCLRecord sclRecord = (SCLRecord) sheet.getSheet().findFirstRecordBySid(SCLRecord.sid);
            assertNotNull(sclRecord);
            short numerator = sclRecord.getNumerator();
            assertEquals(75, 100 * numerator / sclRecord.getDenominator());

            int sclLoc = sheet.getSheet().findFirstRecordLocBySid(SCLRecord.sid);
            int window2Loc = sheet.getSheet().findFirstRecordLocBySid(WindowTwoRecord.sid);
            assertEquals(sclLoc, window2Loc + 1);

            // verify limits
            try {
                sheet.setZoom(0);
                fail("Should catch Exception here");
            } catch (IllegalArgumentException e) {
                assertEquals("Numerator must be greater than 0 and less than 65536", e.getMessage());
            }
            try {
                sheet.setZoom(65536);
                fail("Should catch Exception here");
            } catch (IllegalArgumentException e) {
                assertEquals("Numerator must be greater than 0 and less than 65536", e.getMessage());
            }
            try {
                sheet.setZoom(2, 0);
                fail("Should catch Exception here");
            } catch (IllegalArgumentException e) {
                assertEquals("Denominator must be greater than 0 and less than 65536", e.getMessage());
            }
            try {
                sheet.setZoom(2, 65536);
                fail("Should catch Exception here");
            } catch (IllegalArgumentException e) {
                assertEquals("Denominator must be greater than 0 and less than 65536", e.getMessage());
            }
        }
    }

