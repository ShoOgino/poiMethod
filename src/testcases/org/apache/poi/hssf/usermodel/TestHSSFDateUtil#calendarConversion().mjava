    /**
     * Tests that we deal with time-zones properly
     */
    @Test
    public void calendarConversion() {
        GregorianCalendar date = new GregorianCalendar(2002, 0, 1, 12, 1, 1);
        Date expected = date.getTime();

        // Iterating over the hours exposes any rounding issues.
        for (int hour = -12; hour <= 12; hour++)
        {
            String id = "GMT" + (hour < 0 ? "" : "+") + hour + ":00";
            date.setTimeZone(TimeZone.getTimeZone(id));
            date.set(Calendar.HOUR_OF_DAY, 12);
            double excelDate = HSSFDateUtil.getExcelDate(date, false);
            Date javaDate = HSSFDateUtil.getJavaDate(excelDate);

            // Should match despite time-zone
            assertEquals("Checking timezone " + id, expected.getTime(), javaDate.getTime());
        }
        
        // Check that the timezone aware getter works correctly 
        TimeZone cet = TimeZone.getTimeZone("Europe/Copenhagen");
        TimeZone ldn = TimeZone.getTimeZone("Europe/London");
        TimeZone.setDefault(cet);
        
        // 12:45 on 27th April 2012
        double excelDate = 41026.53125;
        
        // Same, no change
        assertEquals(
              HSSFDateUtil.getJavaDate(excelDate, false).getTime(),
              HSSFDateUtil.getJavaDate(excelDate, false, cet).getTime()
        );
        
        // London vs Copenhagen, should differ by an hour
        Date cetDate = HSSFDateUtil.getJavaDate(excelDate, false);
        Date ldnDate = HSSFDateUtil.getJavaDate(excelDate, false, ldn);
        assertEquals(ldnDate.getTime() - cetDate.getTime(), 60*60*1000);
    }

