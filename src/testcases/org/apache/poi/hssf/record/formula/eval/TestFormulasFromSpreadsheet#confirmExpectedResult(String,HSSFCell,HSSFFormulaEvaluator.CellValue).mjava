	private static void confirmExpectedResult(String msg, HSSFCell expected, HSSFFormulaEvaluator.CellValue actual) {
		if (expected == null) {
			throw new AssertionFailedError(msg + " - Bad setup data expected value is null");
		}
		if(actual == null) {
			throw new AssertionFailedError(msg + " - actual value was null");
		}
		
		switch (expected.getCellType()) {
			case HSSFCell.CELL_TYPE_BLANK:
				assertEquals(msg, HSSFCell.CELL_TYPE_BLANK, actual.getCellType());
				break;
			case HSSFCell.CELL_TYPE_BOOLEAN:
				assertEquals(msg, HSSFCell.CELL_TYPE_BOOLEAN, actual.getCellType());
				assertEquals(msg, expected.getBooleanCellValue(), actual.getBooleanValue());
				break;
			case HSSFCell.CELL_TYPE_ERROR:
				assertEquals(msg, HSSFCell.CELL_TYPE_ERROR, actual.getCellType());
				assertEquals(msg, ErrorEval.getText(expected.getErrorCellValue()), ErrorEval.getText(actual.getErrorValue()));
				break;
			case HSSFCell.CELL_TYPE_FORMULA: // will never be used, since we will call method after formula evaluation
				throw new AssertionFailedError("Cannot expect formula as result of formula evaluation: " + msg);
			case HSSFCell.CELL_TYPE_NUMERIC:
				assertEquals(msg, HSSFCell.CELL_TYPE_NUMERIC, actual.getCellType());
				TestMathX.assertEquals(msg, expected.getNumericCellValue(), actual.getNumberValue(), TestMathX.POS_ZERO, TestMathX.DIFF_TOLERANCE_FACTOR);
				break;
			case HSSFCell.CELL_TYPE_STRING:
				assertEquals(msg, HSSFCell.CELL_TYPE_STRING, actual.getCellType());
				assertEquals(msg, expected.getRichStringCellValue().getString(), actual.getRichTextStringValue().getString());
				break;
		}
	}

