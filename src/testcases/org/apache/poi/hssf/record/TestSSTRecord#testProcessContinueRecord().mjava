    /**
     * test processContinueRecord
     */
    public void testProcessContinueRecord() {
//jmh        byte[] testdata = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord" );
//jmh        byte[] input = new byte[testdata.length - 4];
//jmh
//jmh        System.arraycopy( testdata, 4, input, 0, input.length );
//jmh        SSTRecord record =
//jmh                new SSTRecord( LittleEndian.getShort( testdata, 0 ),
//jmh                        LittleEndian.getShort( testdata, 2 ), input );
//jmh        byte[] continueRecord = HexRead.readData( _test_file_path + File.separator + "BigSSTRecordCR" );
//jmh
//jmh        input = new byte[continueRecord.length - 4];
//jmh        System.arraycopy( continueRecord, 4, input, 0, input.length );
//jmh        record.processContinueRecord( input );
//jmh        assertEquals( 1464, record.getNumStrings() );
//jmh        assertEquals( 688, record.getNumUniqueStrings() );
//jmh        assertEquals( 688, record.countStrings() );
//jmh        byte[] ser_output = record.serialize();
//jmh        int offset = 0;
//jmh        short type = LittleEndian.getShort( ser_output, offset );
//jmh
//jmh        offset += LittleEndianConsts.SHORT_SIZE;
//jmh        short length = LittleEndian.getShort( ser_output, offset );
//jmh
//jmh        offset += LittleEndianConsts.SHORT_SIZE;
//jmh        byte[] recordData = new byte[length];
//jmh
//jmh        System.arraycopy( ser_output, offset, recordData, 0, length );
//jmh        offset += length;
//jmh        SSTRecord testRecord = new SSTRecord( type, length, recordData );
//jmh
//jmh        assertEquals( ContinueRecord.sid,
//jmh                LittleEndian.getShort( ser_output, offset ) );
//jmh        offset += LittleEndianConsts.SHORT_SIZE;
//jmh        length = LittleEndian.getShort( ser_output, offset );
//jmh        offset += LittleEndianConsts.SHORT_SIZE;
//jmh        byte[] cr = new byte[length];
//jmh
//jmh        System.arraycopy( ser_output, offset, cr, 0, length );
//jmh        offset += length;
//jmh        assertEquals( offset, ser_output.length );
//jmh        testRecord.processContinueRecord( cr );
//jmh        assertEquals( record, testRecord );
//jmh
//jmh        // testing based on new bug report
//jmh        testdata = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2" );
//jmh        input = new byte[testdata.length - 4];
//jmh        System.arraycopy( testdata, 4, input, 0, input.length );
//jmh        record = new SSTRecord( LittleEndian.getShort( testdata, 0 ),
//jmh                LittleEndian.getShort( testdata, 2 ), input );
//jmh        byte[] continueRecord1 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR1" );
//jmh
//jmh        input = new byte[continueRecord1.length - 4];
//jmh        System.arraycopy( continueRecord1, 4, input, 0, input.length );
//jmh        record.processContinueRecord( input );
//jmh        byte[] continueRecord2 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR2" );
//jmh
//jmh        input = new byte[continueRecord2.length - 4];
//jmh        System.arraycopy( continueRecord2, 4, input, 0, input.length );
//jmh        record.processContinueRecord( input );
//jmh        byte[] continueRecord3 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR3" );
//jmh
//jmh        input = new byte[continueRecord3.length - 4];
//jmh        System.arraycopy( continueRecord3, 4, input, 0, input.length );
//jmh        record.processContinueRecord( input );
//jmh        byte[] continueRecord4 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR4" );
//jmh
//jmh        input = new byte[continueRecord4.length - 4];
//jmh        System.arraycopy( continueRecord4, 4, input, 0, input.length );
//jmh        record.processContinueRecord( input );
//jmh        byte[] continueRecord5 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR5" );
//jmh
//jmh        input = new byte[continueRecord5.length - 4];
//jmh        System.arraycopy( continueRecord5, 4, input, 0, input.length );
//jmh        record.processContinueRecord( input );
//jmh        byte[] continueRecord6 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR6" );
//jmh
//jmh        input = new byte[continueRecord6.length - 4];
//jmh        System.arraycopy( continueRecord6, 4, input, 0, input.length );
//jmh        record.processContinueRecord( input );
//jmh        byte[] continueRecord7 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR7" );
//jmh
//jmh        input = new byte[continueRecord7.length - 4];
//jmh        System.arraycopy( continueRecord7, 4, input, 0, input.length );
//jmh        record.processContinueRecord( input );
//jmh        assertEquals( 158642, record.getNumStrings() );
//jmh        assertEquals( 5249, record.getNumUniqueStrings() );
//jmh        assertEquals( 5249, record.countStrings() );
//jmh        ser_output = record.serialize();
//jmh        offset = 0;
//jmh        type = LittleEndian.getShort( ser_output, offset );
//jmh        offset += LittleEndianConsts.SHORT_SIZE;
//jmh        length = LittleEndian.getShort( ser_output, offset );
//jmh        offset += LittleEndianConsts.SHORT_SIZE;
//jmh        recordData = new byte[length];
//jmh        System.arraycopy( ser_output, offset, recordData, 0, length );
//jmh        offset += length;
//jmh        testRecord = new SSTRecord( type, length, recordData );
//jmh        for ( int count = 0; count < 7; count++ )
//jmh        {
//jmh            assertEquals( ContinueRecord.sid,
//jmh                    LittleEndian.getShort( ser_output, offset ) );
//jmh            offset += LittleEndianConsts.SHORT_SIZE;
//jmh            length = LittleEndian.getShort( ser_output, offset );
//jmh            offset += LittleEndianConsts.SHORT_SIZE;
//jmh            cr = new byte[length];
//jmh            System.arraycopy( ser_output, offset, cr, 0, length );
//jmh            testRecord.processContinueRecord( cr );
//jmh            offset += length;
//jmh        }
//jmh        assertEquals( offset, ser_output.length );
//jmh        assertEquals( record, testRecord );
//jmh        assertEquals( record.countStrings(), testRecord.countStrings() );
    }

