    /**
     * test processContinueRecord
     *
     * @exception IOException
     */

    public void testProcessContinueRecord()
            throws IOException
    {
        byte[] testdata = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord" );
        byte[] input = new byte[testdata.length - 4];

        System.arraycopy( testdata, 4, input, 0, input.length );
        SSTRecord record =
                new SSTRecord( LittleEndian.getShort( testdata, 0 ),
                        LittleEndian.getShort( testdata, 2 ), input );
        byte[] continueRecord = HexRead.readData( _test_file_path + File.separator + "BigSSTRecordCR" );

        input = new byte[continueRecord.length - 4];
        System.arraycopy( continueRecord, 4, input, 0, input.length );
        record.processContinueRecord( input );
        assertEquals( 1464, record.getNumStrings() );
        assertEquals( 688, record.getNumUniqueStrings() );
        assertEquals( 688, record.countStrings() );
        byte[] ser_output = record.serialize();
        int offset = 0;
        short type = LittleEndian.getShort( ser_output, offset );

        offset += LittleEndianConsts.SHORT_SIZE;
        short length = LittleEndian.getShort( ser_output, offset );

        offset += LittleEndianConsts.SHORT_SIZE;
        byte[] recordData = new byte[length];

        System.arraycopy( ser_output, offset, recordData, 0, length );
        offset += length;
        SSTRecord testRecord = new SSTRecord( type, length, recordData );

        assertEquals( ContinueRecord.sid,
                LittleEndian.getShort( ser_output, offset ) );
        offset += LittleEndianConsts.SHORT_SIZE;
        length = LittleEndian.getShort( ser_output, offset );
        offset += LittleEndianConsts.SHORT_SIZE;
        byte[] cr = new byte[length];

        System.arraycopy( ser_output, offset, cr, 0, length );
        offset += length;
        assertEquals( offset, ser_output.length );
        testRecord.processContinueRecord( cr );
        assertEquals( record, testRecord );

        // testing based on new bug report
        testdata = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2" );
        input = new byte[testdata.length - 4];
        System.arraycopy( testdata, 4, input, 0, input.length );
        record = new SSTRecord( LittleEndian.getShort( testdata, 0 ),
                LittleEndian.getShort( testdata, 2 ), input );
        byte[] continueRecord1 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR1" );

        input = new byte[continueRecord1.length - 4];
        System.arraycopy( continueRecord1, 4, input, 0, input.length );
        record.processContinueRecord( input );
        byte[] continueRecord2 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR2" );

        input = new byte[continueRecord2.length - 4];
        System.arraycopy( continueRecord2, 4, input, 0, input.length );
        record.processContinueRecord( input );
        byte[] continueRecord3 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR3" );

        input = new byte[continueRecord3.length - 4];
        System.arraycopy( continueRecord3, 4, input, 0, input.length );
        record.processContinueRecord( input );
        byte[] continueRecord4 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR4" );

        input = new byte[continueRecord4.length - 4];
        System.arraycopy( continueRecord4, 4, input, 0, input.length );
        record.processContinueRecord( input );
        byte[] continueRecord5 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR5" );

        input = new byte[continueRecord5.length - 4];
        System.arraycopy( continueRecord5, 4, input, 0, input.length );
        record.processContinueRecord( input );
        byte[] continueRecord6 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR6" );

        input = new byte[continueRecord6.length - 4];
        System.arraycopy( continueRecord6, 4, input, 0, input.length );
        record.processContinueRecord( input );
        byte[] continueRecord7 = HexRead.readData( _test_file_path + File.separator + "BigSSTRecord2CR7" );

        input = new byte[continueRecord7.length - 4];
        System.arraycopy( continueRecord7, 4, input, 0, input.length );
        record.processContinueRecord( input );
        assertEquals( 158642, record.getNumStrings() );
        assertEquals( 5249, record.getNumUniqueStrings() );
        assertEquals( 5249, record.countStrings() );
        ser_output = record.serialize();
        offset = 0;
        type = LittleEndian.getShort( ser_output, offset );
        offset += LittleEndianConsts.SHORT_SIZE;
        length = LittleEndian.getShort( ser_output, offset );
        offset += LittleEndianConsts.SHORT_SIZE;
        recordData = new byte[length];
        System.arraycopy( ser_output, offset, recordData, 0, length );
        offset += length;
        testRecord = new SSTRecord( type, length, recordData );
        for ( int count = 0; count < 7; count++ )
        {
            assertEquals( ContinueRecord.sid,
                    LittleEndian.getShort( ser_output, offset ) );
            offset += LittleEndianConsts.SHORT_SIZE;
            length = LittleEndian.getShort( ser_output, offset );
            offset += LittleEndianConsts.SHORT_SIZE;
            cr = new byte[length];
            System.arraycopy( ser_output, offset, cr, 0, length );
            testRecord.processContinueRecord( cr );
            offset += length;
        }
        assertEquals( offset, ser_output.length );
        assertEquals( record, testRecord );
        assertEquals( record.countStrings(), testRecord.countStrings() );
    }

