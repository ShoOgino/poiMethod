	public void testWithConcat()  throws Exception {
		// =CHOOSE(2,A2,A3,A4)
		byte[] data = {
				6, 0, 68, 0,
				1, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 57,
				64, 0, 0, 12, 0, 12, -4, 46, 0, 
				30, 2, 0,	// Int - 2
				25, 4, 3, 0, // Attr
					8, 0, 17, 0, 26, 0, // jumpTable
					35, 0, // chooseOffset
				36, 1, 0, 0, -64, // Ref - A2
				25, 8, 21, 0, // Attr
				36, 2, 0, 0, -64, // Ref - A3
				25,	8, 12, 0, // Attr
				36, 3, 0, 0, -64, // Ref - A4
				25, 8, 3, 0,  // Attr 
				66, 4, 100, 0 // CHOOSE
		};
		RecordInputStream inp = new RecordInputStream( new ByteArrayInputStream(data));
		inp.nextRecord();
		
		FormulaRecord fr = new FormulaRecord(inp);
		
		List ptgs = fr.getParsedExpression();
		assertEquals(9, ptgs.size());
		assertEquals(IntPtg.class,	   ptgs.get(0).getClass());
		assertEquals(AttrPtg.class,	  ptgs.get(1).getClass());
		assertEquals(RefPtg.class, ptgs.get(2).getClass());
		assertEquals(AttrPtg.class,	  ptgs.get(3).getClass());
		assertEquals(RefPtg.class, ptgs.get(4).getClass());
		assertEquals(AttrPtg.class,	  ptgs.get(5).getClass());
		assertEquals(RefPtg.class, ptgs.get(6).getClass());
		assertEquals(AttrPtg.class,	  ptgs.get(7).getClass());
		assertEquals(FuncVarPtg.class,   ptgs.get(8).getClass());
		
		FuncVarPtg choose = (FuncVarPtg)ptgs.get(8);
		assertEquals("CHOOSE", choose.getName());
	}

