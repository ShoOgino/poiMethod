    public void testWithConcat()  throws Exception {
    	// =CHOOSE(2,A2,A3,A4)
    	byte[] data = new byte[] {
    			6, 0, 68, 0,
    			1, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 57,
				64, 0, 0, 12, 0, 12, -4, 46, 0, 
				30, 2, 0,    // Int - 2
				25, 4, 3, 0, // Attr
				8, 0,        // Concat 
				17, 0,       // Range 
				26, 0, 35, 0, // Bit like an attr
				36, 1, 0, 0, -64, // Ref - A2
				25, 8, 21, 0, // Attr
				36, 2, 0, 0, -64, // Ref - A3
				25,	8, 12, 0, // Attr
				36, 3, 0, 0, -64, // Ref - A4
				25, 8, 3, 0,  // Attr 
				66, 4, 100, 0 // CHOOSE
    	};
    	RecordInputStream inp = new RecordInputStream(
    			new ByteArrayInputStream(data)
    	);
    	inp.nextRecord();
    	
    	FormulaRecord fr = new FormulaRecord(inp);
    	
    	assertEquals(14, fr.getNumberOfExpressionTokens());
    	assertEquals(IntPtg.class,       fr.getParsedExpression().get(0).getClass());
    	assertEquals(AttrPtg.class,      fr.getParsedExpression().get(1).getClass());
    	assertEquals(ConcatPtg.class,    fr.getParsedExpression().get(2).getClass());
    	assertEquals(UnknownPtg.class,   fr.getParsedExpression().get(3).getClass());
    	assertEquals(RangePtg.class,     fr.getParsedExpression().get(4).getClass());
    	assertEquals(UnknownPtg.class,   fr.getParsedExpression().get(5).getClass());
    	assertEquals(AttrPtg.class,      fr.getParsedExpression().get(6).getClass());
    	assertEquals(ReferencePtg.class, fr.getParsedExpression().get(7).getClass());
    	assertEquals(AttrPtg.class,      fr.getParsedExpression().get(8).getClass());
    	assertEquals(ReferencePtg.class, fr.getParsedExpression().get(9).getClass());
    	assertEquals(AttrPtg.class,      fr.getParsedExpression().get(10).getClass());
    	assertEquals(ReferencePtg.class, fr.getParsedExpression().get(11).getClass());
    	assertEquals(AttrPtg.class,      fr.getParsedExpression().get(12).getClass());
    	assertEquals(FuncVarPtg.class,   fr.getParsedExpression().get(13).getClass());
    	
    	FuncVarPtg choose = (FuncVarPtg)fr.getParsedExpression().get(13);
    	assertEquals("CHOOSE", choose.getName());
    }

