    /**
     * If ZipPackage is passed an invalid file, a call to close
     *  (eg from the OPCPackage open method) should tidy up the
     *  stream / file the broken file is being read from.
     * See bug #60128 for more
     */
    @Test
    public void testTidyStreamOnInvalidFile() throws Exception {
        // Spreadsheet has a good mix of alternate file types
        POIDataSamples files = POIDataSamples.getSpreadSheetInstance();
        
        File[] notValidF = new File[] {
                files.getFile("SampleSS.ods"), files.getFile("SampleSS.txt")
        };
        InputStream[] notValidS = new InputStream[] {
                files.openResourceAsStream("SampleSS.ods"), files.openResourceAsStream("SampleSS.txt")
        };

        for (File notValid : notValidF) {
            ZipPackage pkg = new ZipPackage(notValid, PackageAccess.READ);
            assertNotNull(pkg.getZipArchive());
            assertFalse(pkg.getZipArchive().isClosed());
            try {
                pkg.getParts();
                fail("Shouldn't work");
            } catch (NotOfficeXmlFileException e) {
                // expected here
            }
            pkg.close();
            
            assertNotNull(pkg.getZipArchive());
            assertTrue(pkg.getZipArchive().isClosed());
        }
        for (InputStream notValid : notValidS) {
            ZipPackage pkg = new ZipPackage(notValid, PackageAccess.READ);
            assertNotNull(pkg.getZipArchive());
            assertFalse(pkg.getZipArchive().isClosed());
            try {
                pkg.getParts();
                fail("Shouldn't work");
            } catch (NotOfficeXmlFileException e) {
                // expected here
            }
            pkg.close();
            
            assertNotNull(pkg.getZipArchive());
            assertTrue(pkg.getZipArchive().isClosed());
        }
    }

