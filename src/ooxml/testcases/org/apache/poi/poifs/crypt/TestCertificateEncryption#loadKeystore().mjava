    /** 
     * Create a self-signed X.509 Certificate
     * 
     * The keystore generation / loading is split, because normally the keystore would
     * already exist.
     */ 
    /* @BeforeClass
    public static void initKeystore() throws GeneralSecurityException, IOException {
        CertData certData = new CertData();
        
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
        keyGen.initialize(1024);
        certData.keypair = keyGen.generateKeyPair();
        PrivateKey privkey = certData.keypair.getPrivate();
        PublicKey publkey = certData.keypair.getPublic();
    
        X509CertInfo info = new X509CertInfo();
        Date from = new Date();
        Date to = new Date(from.getTime() + days * 86400000l);
        CertificateValidity interval = new CertificateValidity(from, to);
        BigInteger sn = new BigInteger(64, new SecureRandom());
        X500Name owner = new X500Name(certDN);
        
        info.set(X509CertInfo.VALIDITY, interval);
        info.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(sn));
        info.set(X509CertInfo.SUBJECT, new CertificateSubjectName(owner));
        info.set(X509CertInfo.ISSUER, new CertificateIssuerName(owner));
        info.set(X509CertInfo.KEY, new CertificateX509Key(publkey));
        info.set(X509CertInfo.VERSION, new CertificateVersion(CertificateVersion.V3));
        AlgorithmId algo = new AlgorithmId(AlgorithmId.md5WithRSAEncryption_oid);
        info.set(X509CertInfo.ALGORITHM_ID, new CertificateAlgorithmId(algo));
        
        // Sign the cert to identify the algorithm that's used.
        X509CertImpl cert = new X509CertImpl(info);
        cert.sign(privkey, algorithm);
        
        // Update the algorith, and resign.
        algo = (AlgorithmId)cert.get(X509CertImpl.SIG_ALG);
        info.set(CertificateAlgorithmId.NAME + "." + CertificateAlgorithmId.ALGORITHM, algo);
        cert = new X509CertImpl(info);
        cert.sign(privkey, algorithm);
        certData.x509 = cert;
        
        KeyStore keystore = KeyStore.getInstance("PKCS12");
        keystore.load(null, password.toCharArray());
        keystore.setKeyEntry(certAlias, certData.keypair.getPrivate(), password.toCharArray(), new Certificate[]{certData.x509});
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        keystore.store(bos, password.toCharArray());
        pfxFileBytes = bos.toByteArray();
    } */

    public CertData loadKeystore()
    throws GeneralSecurityException, IOException {
        KeyStore keystore = KeyStore.getInstance("PKCS12");
        
        // InputStream fis = new ByteArrayInputStream(pfxFileBytes);
        InputStream fis = POIDataSamples.getPOIFSInstance().openResourceAsStream("poitest.pfx");
        keystore.load(fis, password.toCharArray());
        fis.close();
        
        X509Certificate x509 = (X509Certificate)keystore.getCertificate(certAlias);
        PrivateKey privateKey = (PrivateKey)keystore.getKey(certAlias, password.toCharArray());
        PublicKey publicKey = x509.getPublicKey();

        CertData certData = new CertData();
        certData.keypair = new KeyPair(publicKey, privateKey);
        certData.x509 = x509;
        
        return certData;
    }

