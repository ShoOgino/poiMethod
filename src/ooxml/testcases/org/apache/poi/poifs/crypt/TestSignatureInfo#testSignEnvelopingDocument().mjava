    @Test
    public void testSignEnvelopingDocument() throws Exception {
        String testFile = "hello-world-unsigned.xlsx";
        OPCPackage pkg = OPCPackage.open(copy(testdata.getFile(testFile)), PackageAccess.READ_WRITE);

        // setup
        EnvelopedSignatureFacet envelopedSignatureFacet = new EnvelopedSignatureFacet();
        KeyInfoSignatureFacet keyInfoSignatureFacet = new KeyInfoSignatureFacet(true, false, false);
        SignaturePolicyService signaturePolicyService = null;
        XAdESSignatureFacet xadesSignatureFacet = new XAdESSignatureFacet(null, null, signaturePolicyService);

        
        TimeStampService mockTimeStampService = mock(TimeStampService.class);
        RevocationDataService mockRevocationDataService = mock(RevocationDataService.class);

        XAdESXLSignatureFacet xadesXLSignatureFacet = new XAdESXLSignatureFacet(
                mockTimeStampService, mockRevocationDataService);
        XmlSignatureService testedInstance = new XmlSignatureService(HashAlgorithm.sha1, pkg);
        testedInstance.addSignatureFacet(envelopedSignatureFacet, keyInfoSignatureFacet,
                xadesSignatureFacet, xadesXLSignatureFacet);
        
        initKeyPair("Test", "CN=Test");
        List<X509Certificate> certificateChain = new ArrayList<X509Certificate>();
        /*
         * We need at least 2 certificates for the XAdES-C complete certificate
         * refs construction.
         */
        certificateChain.add(x509);
        certificateChain.add(x509);
        
        RevocationData revocationData = new RevocationData();
        final X509CRL crl = PkiTestUtils.generateCrl(x509, keyPair.getPrivate());
        revocationData.addCRL(crl);
        OCSPRespIf ocspResp = PkiTestUtils.createOcspResp(x509, false,
                x509, x509, keyPair.getPrivate(), "SHA1withRSA");
        revocationData.addOCSP(ocspResp.getEncoded());
        
        when(mockTimeStampService.timeStamp(any(byte[].class), any(RevocationData.class)))
        .thenAnswer(new Answer<byte[]>(){
            public byte[] answer(InvocationOnMock invocation) throws Throwable {
                Object[] arguments = invocation.getArguments();
                RevocationData revocationData = (RevocationData) arguments[1];
                revocationData.addCRL(crl);
                return "time-stamp-token".getBytes();
            }            
        });
        
        when(mockRevocationDataService.getRevocationData(eq(certificateChain)))
        .thenReturn(revocationData);
        
        // operate
        DigestInfo digestInfo = testedInstance.preSign(null, certificateChain, null, null, null);

        // verify
        assertNotNull(digestInfo);
        assertEquals(HashAlgorithm.sha1, digestInfo.hashAlgo);
        assertNotNull(digestInfo.digestValue);
        
        SignatureDocument sigDoc = testedInstance.getSignatureDocument();
        String certDigestXQuery =
                "declare namespace xades='http://uri.etsi.org/01903/v1.3.2#'; "
              + "declare namespace ds='http://www.w3.org/2000/09/xmldsig#'; "
              + "$this/ds:Signature/ds:Object/xades:QualifyingProperties/xades:SignedProperties/xades:SignedSignatureProperties/xades:SigningCertificate/xades:Cert/xades:CertDigest";
        XmlObject xoList[] = sigDoc.selectPath(certDigestXQuery);
        assertEquals(xoList.length, 1);
        DigestAlgAndValueType certDigest = (DigestAlgAndValueType)xoList[0];
        assertNotNull(certDigest.getDigestValue());

        // Sign the received XML signature digest value.
        byte[] signatureValue = SignatureInfo.signDigest(keyPair.getPrivate(), HashAlgorithm.sha1, digestInfo.digestValue);

        // Operate: postSign
        testedInstance.postSign(signatureValue, certificateChain);
        
        // verify
        verify(mockTimeStampService, times(2)).timeStamp(any(byte[].class), any(RevocationData.class));
        verify(mockRevocationDataService).getRevocationData(certificateChain);
        
        DOMValidateContext domValidateContext = new DOMValidateContext(
                KeySelector.singletonKeySelector(keyPair.getPublic()),
                testedInstance.getSignatureDocument().getDomNode());
        XMLSignatureFactory xmlSignatureFactory = SignatureInfo.getSignatureFactory();
        XMLSignature xmlSignature = xmlSignatureFactory
                .unmarshalXMLSignature(domValidateContext);
        boolean validity = xmlSignature.validate(domValidateContext);
        assertTrue(validity);

        xoList = sigDoc.selectPath(certDigestXQuery);
        assertEquals(xoList.length, 1);
        certDigest = (DigestAlgAndValueType)xoList[0];
        assertNotNull(certDigest.getDigestValue());
        
        String qualPropXQuery =
                "declare namespace xades='http://uri.etsi.org/01903/v1.3.2#'; "
              + "declare namespace ds='http://www.w3.org/2000/09/xmldsig#'; "
              + "$this/ds:Signature/ds:Object/xades:QualifyingProperties";
        xoList = sigDoc.selectPath(qualPropXQuery);
        assertEquals(xoList.length, 1);
        QualifyingPropertiesType qualProp = (QualifyingPropertiesType)xoList[0];
        boolean qualPropXsdOk = qualProp.validate();
        assertTrue(qualPropXsdOk);
        
        pkg.close();
    }

