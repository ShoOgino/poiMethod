    @SuppressWarnings("unused")
    @Test
    public void testSignEnvelopingDocument() throws Exception {
        String testFile = "hello-world-unsigned.xlsx";
        OPCPackage pkg = OPCPackage.open(copy(testdata.getFile(testFile)), PackageAccess.READ_WRITE);

        initKeyPair("Test", "CN=Test");
        
        // setup
        EnvelopedSignatureFacet envelopedSignatureFacet = new EnvelopedSignatureFacet();
        KeyInfoSignatureFacet keyInfoSignatureFacet = new KeyInfoSignatureFacet(true, false, false);
        SignaturePolicyService signaturePolicyService = null;
        XAdESSignatureFacet xadesSignatureFacet = new XAdESSignatureFacet(null, null, signaturePolicyService);
        final X509CRL crl = PkiTestUtils.generateCrl(x509, keyPair.getPrivate());

        // http://timestamping.edelweb.fr/service/tsp
        // http://tsa.belgium.be/connect
        String tspServiceUrl = "http://timestamping.edelweb.fr/service/tsp";

        TimeStampService timeStampService;
        if (tspServiceUrl == null) {
            timeStampService = new TimeStampService(){
                public byte[] timeStamp(byte[] data, RevocationData revocationData) throws Exception {
                    revocationData.addCRL(crl);
                    return "time-stamp-token".getBytes();                
                }
            };
        } else {
            TimeStampServiceValidator tspValidator = new TimeStampServiceValidator() {
                @Override
                public void validate(List<X509Certificate> certificateChain,
                RevocationData revocationData) throws Exception {
                    for (X509Certificate certificate : certificateChain) {
                        LOG.log(POILogger.DEBUG, "certificate: " + certificate.getSubjectX500Principal());
                        LOG.log(POILogger.DEBUG, "validity: " + certificate.getNotBefore() + " - " + certificate.getNotAfter());
                    }
                }
            };
            
            TSPTimeStampService tspService = new TSPTimeStampService(tspServiceUrl, tspValidator);
            if (tspServiceUrl.contains("edelweb")) {
                tspService.setRequestContentType("application/timestamp-request");
                tspService.setResponseContentType("application/timestamp-response");
            }
            timeStampService = tspService;
        }
        
        List<X509Certificate> certificateChain = new ArrayList<X509Certificate>();
        /*
         * We need at least 2 certificates for the XAdES-C complete certificate
         * refs construction.
         */
        certificateChain.add(x509);
        certificateChain.add(x509);
        
        final RevocationData revocationData = new RevocationData();
        revocationData.addCRL(crl);
        OCSPResp ocspResp = PkiTestUtils.createOcspResp(x509, false,
                x509, x509, keyPair.getPrivate(), "SHA1withRSA", cal.getTimeInMillis());
        revocationData.addOCSP(ocspResp.getEncoded());

        RevocationDataService revocationDataService = new RevocationDataService(){
            public RevocationData getRevocationData(List<X509Certificate> certificateChain) {
                return revocationData;
            }
        };

        XAdESXLSignatureFacet xadesXLSignatureFacet = new XAdESXLSignatureFacet(
                timeStampService, revocationDataService);
        XmlSignatureService testedInstance = new XmlSignatureService(HashAlgorithm.sha1, pkg);
        testedInstance.addSignatureFacet(envelopedSignatureFacet, keyInfoSignatureFacet,
                xadesSignatureFacet, xadesXLSignatureFacet);
        
        
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        Document document = dbf.newDocumentBuilder().newDocument();
        
        // operate
        DigestInfo digestInfo = testedInstance.preSign(document, null, keyPair.getPrivate(), certificateChain, null, null, null);

        // verify
        assertNotNull(digestInfo);
        assertEquals(HashAlgorithm.sha1, digestInfo.hashAlgo);
        assertNotNull(digestInfo.digestValue);
        
        SignatureDocument sigDoc = SignatureDocument.Factory.parse(document);
        String certDigestXQuery =
                "declare namespace xades='http://uri.etsi.org/01903/v1.3.2#'; "
              + "declare namespace ds='http://www.w3.org/2000/09/xmldsig#'; "
              + "$this/ds:Signature/ds:Object/xades:QualifyingProperties/xades:SignedProperties/xades:SignedSignatureProperties/xades:SigningCertificate/xades:Cert/xades:CertDigest";
        XmlObject xoList[] = sigDoc.selectPath(certDigestXQuery);
        assertEquals(xoList.length, 1);
        DigestAlgAndValueType certDigest = (DigestAlgAndValueType)xoList[0];
        assertNotNull(certDigest.getDigestValue());

        // Sign the received XML signature digest value.
        byte[] signatureValue = SignatureInfo.signDigest(keyPair.getPrivate(), HashAlgorithm.sha1, digestInfo.digestValue);

        // Operate: postSign
        testedInstance.postSign(document, signatureValue, certificateChain);
        
        DOMValidateContext domValidateContext = new DOMValidateContext(
                KeySelector.singletonKeySelector(keyPair.getPublic()),
                document);
        XMLSignatureFactory xmlSignatureFactory = SignatureInfo.getSignatureFactory();
        XMLSignature xmlSignature = xmlSignatureFactory
                .unmarshalXMLSignature(domValidateContext);
        boolean validity = xmlSignature.validate(domValidateContext);
        assertTrue(validity);

        sigDoc = SignatureDocument.Factory.parse(document);
        xoList = sigDoc.selectPath(certDigestXQuery);
        assertEquals(xoList.length, 1);
        certDigest = (DigestAlgAndValueType)xoList[0];
        assertNotNull(certDigest.getDigestValue());
        
        String qualPropXQuery =
                "declare namespace xades='http://uri.etsi.org/01903/v1.3.2#'; "
              + "declare namespace ds='http://www.w3.org/2000/09/xmldsig#'; "
              + "$this/ds:Signature/ds:Object/xades:QualifyingProperties";
        xoList = sigDoc.selectPath(qualPropXQuery);
        assertEquals(xoList.length, 1);
        QualifyingPropertiesType qualProp = (QualifyingPropertiesType)xoList[0];
        boolean qualPropXsdOk = qualProp.validate();
        assertTrue(qualPropXsdOk);
        
        pkg.close();
    }

