    void build() throws IOException {
        List<Class<?>> lst = new ArrayList<>();
        //collect unit tests
        String exclude = StringUtil.join("|",
                "BaseTestXWorkbook",
                "BaseTestXSheet",
                "BaseTestXRow",
                "BaseTestXCell",
                "BaseTestXSSFPivotTable",
                "TestSXSSFWorkbook\\$\\d",
                "TestUnfixedBugs",
                "MemoryUsage",
                "TestDataProvider",
                "TestDataSamples",
                "All.+Tests",
                "ZipFileAssert",
                "AesZipFileZipEntrySource",
                "TempFileRecordingSXSSFWorkbookWithCustomZipEntrySource",
                "PkiTestUtils",
                "TestCellFormatPart\\$\\d",
                "TestSignatureInfo\\$\\d",
                "TestCertificateEncryption\\$CertData",
                "TestPOIXMLDocument\\$OPCParser",
                "TestPOIXMLDocument\\$TestFactory",
                "TestXSLFTextParagraph\\$DrawTextParagraphProxy",
                "TestXSSFExportToXML\\$\\d",
                "TestXSSFExportToXML\\$DummyEntityResolver",
                "TestFormulaEvaluatorOnXSSF\\$Result",
                "TestFormulaEvaluatorOnXSSF\\$SS",
                "TestMultiSheetFormulaEvaluatorOnXSSF\\$Result",
                "TestMultiSheetFormulaEvaluatorOnXSSF\\$SS",
                "TestXSSFBugs\\$\\d",
                "AddImageBench",
                "AddImageBench_jmhType_B\\d",
                "AddImageBench_benchCreatePicture_jmhTest",
                "TestEvilUnclosedBRFixingInputStream\\$EvilUnclosedBRFixingInputStream",
                "TempFileRecordingSXSSFWorkbookWithCustomZipEntrySource\\$TempFileRecordingSheetDataWriterWithDecorator",
                "TestXSSFBReader\\$1",
                "TestXSSFBReader\\$TestSheetHandler",
                "TestFormulaEvaluatorOnXSSF\\$1",
                "TestMultiSheetFormulaEvaluatorOnXSSF\\$1",
                "TestZipPackagePropertiesMarshaller\\$1",
                "SLCommonUtils",
                "TestPPTX2PNG\\$1",
                "TestMatrixFormulasFromXMLSpreadsheet\\$1",
                "TestMatrixFormulasFromXMLSpreadsheet\\$Navigator",
                "TestPOIXMLDocument\\$UncaughtHandler",
                "TestOleShape\\$Api",
                "TestOleShape\\$1",
                "TestPOIXMLDocument\\$1",
                "TestXMLSlideShow\\$1",
                "TestXMLSlideShow\\$BufAccessBAOS",
                "TestXDDFChart\\$1",
                "TestOOXMLLister\\$1",
                "TestOOXMLPrettyPrint\\$1"
        );
        System.out.println("Collecting unit tests from " + _testDir);
        collectTests(_testDir, _testDir, lst, ".+.class$", ".+(" + exclude + ").class");
        System.out.println("Found " + lst.size() + " classes");

        //run tests
        JUnitCore jUnitCore = new JUnitCore();
        jUnitCore.addListener(new TextListener(System.out) {
            private final Set<String> classes = new HashSet<>();
            private int count;

            @Override
            public void testStarted(Description description) {
                // count how many test-classes we already saw
                classes.add(description.getClassName());
                count++;
                if(count % 100 == 0) {
                    System.out.println();
                    System.out.println(classes.size() + "/" + lst.size() + ": " + description.getDisplayName());
                }

                super.testStarted(description);
            }
        });
        Result result = jUnitCore.run(lst.toArray(new Class<?>[0]));
        if (!result.wasSuccessful()) {
            throw new RuntimeException("Tests did not succeed, cannot build ooxml-lite jar");
        }

        //see what classes from the ooxml-schemas.jar are loaded
        System.out.println("Copying classes to " + _destDest);
        Set<Class<?>> classes = getLoadedClasses(_ooxmlJar.getName());
        Set<String> packages = new HashSet<>();
        for (Class<?> cls : classes) {
            copyFile(cls);
            packages.add(cls.getPackage().getName());

            if (cls.isInterface()) {
                /// Copy classes and interfaces declared as members of this class
                for (Class<?> fc : cls.getDeclaredClasses()) {
                    copyFile(fc);
                }
            }
        }
        for (String pkg : packages) {
            Reflections reflections = new Reflections(pkg);
            Set<Class<? extends List>> listClasses = reflections.getSubTypesOf(List.class);
            listClasses.removeAll(classes);
            for (Class listClass : listClasses) {
                for (Class<?> compare : classes) {
                    if (listClass.getName().startsWith(compare.getName())) {
                        copyFile(listClass);
                    }
                }
            }
            Set<Class<? extends StringEnumAbstractBase>> enumClasses = reflections.getSubTypesOf(StringEnumAbstractBase.class);
            listClasses.removeAll(classes);
            for (Class enumClass : enumClasses) {
                for (Class<?> compare : classes) {
                    if (enumClass.getName().startsWith(compare.getName())) {
                        copyFile(enumClass);
                    }
                }
            }
        }

        //finally copy the compiled .xsb files
        System.out.println("Copying .xsb resources");
        try (JarFile jar = new JarFile(_ooxmlJar)) {
            for (Enumeration<JarEntry> e = jar.entries(); e.hasMoreElements(); ) {
                JarEntry je = e.nextElement();
                if (SCHEMA_PATTERN.matcher(je.getName()).matches()) {
                    File destFile = new File(_destDest, je.getName());
                    IOUtils.copy(jar.getInputStream(je), destFile);
                }
            }
        }
    }

