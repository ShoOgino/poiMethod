    @Test
    public void removeNumberFormat() throws IOException {
        XSSFWorkbook wb = new XSSFWorkbook();
        try {
            final String fmt = customDataFormat;
            final short fmtIdx = (short) wb.getStylesSource().putNumberFormat(fmt);
            
            Cell cell = wb.createSheet("test").createRow(0).createCell(0);
            cell.setCellValue(5.25);
            CellStyle style = wb.createCellStyle();
            style.setDataFormat(fmtIdx);
            cell.setCellStyle(style);
            
            assertEquals(fmt, cell.getCellStyle().getDataFormatString());
            assertEquals(fmt, wb.getStylesSource().getNumberFormatAt(fmtIdx));
            
            // remove the number format from the workbook
            wb.getStylesSource().removeNumberFormat(fmt);
            
            // number format in CellStyles should be restored to default number format
            final short defaultFmtIdx = 0;
            final String defaultFmt = BuiltinFormats.getBuiltinFormat(0);
            assertEquals(defaultFmtIdx, style.getDataFormat());
            assertEquals(defaultFmt, style.getDataFormatString());
            
            // The custom number format should be entirely removed from the workbook
            Map<Short,String> numberFormats = wb.getStylesSource().getNumberFormats();
            assertNotContainsKey(numberFormats, fmtIdx);
            assertNotContainsValue(numberFormats, fmt);
            
            // The default style shouldn't be added back to the styles source because it's built-in
            assertEquals(0, wb.getStylesSource().getNumDataFormats());
            
            cell = null; style = null; numberFormats = null;
            wb = XSSFTestDataSamples.writeOutCloseAndReadBack(wb);
            
            cell = wb.getSheet("test").getRow(0).getCell(0);
            style = cell.getCellStyle();
            
            // number format in CellStyles should be restored to default number format
            assertEquals(defaultFmtIdx, style.getDataFormat());
            assertEquals(defaultFmt, style.getDataFormatString());
            
            // The custom number format should be entirely removed from the workbook
            numberFormats = wb.getStylesSource().getNumberFormats();
            assertNotContainsKey(numberFormats, fmtIdx);
            assertNotContainsValue(numberFormats, fmt);
            
            // The default style shouldn't be added back to the styles source because it's built-in
            assertEquals(0, wb.getStylesSource().getNumDataFormats());
            
        } finally {
            wb.close();
        }
    }

