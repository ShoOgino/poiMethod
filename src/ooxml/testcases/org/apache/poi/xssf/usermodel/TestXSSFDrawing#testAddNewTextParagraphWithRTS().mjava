    /**
     * Test addNewTextParagraph using RichTextString
     */
    public void testAddNewTextParagraphWithRTS() {
    
    	XSSFWorkbook wb = new XSSFWorkbook();
        XSSFSheet sheet = wb.createSheet();
        XSSFDrawing drawing = sheet.createDrawingPatriarch();

        XSSFTextBox shape = drawing.createTextbox(new XSSFClientAnchor(0, 0, 0, 0, 2, 2, 3, 4));
        XSSFRichTextString rt = new XSSFRichTextString("Test Rich Text String");

        XSSFFont font = wb.createFont();        
        font.setColor(new XSSFColor(new Color(0, 255, 255)));
        font.setFontName("Arial");
        rt.applyFont(font);
        
        XSSFFont midfont = wb.createFont();
        midfont.setColor(new XSSFColor(new Color(0, 255, 0)));
        rt.applyFont(5, 14, midfont);	// set the text "Rich Text" to be green and the default font
        
        XSSFTextParagraph para = shape.addNewTextParagraph(rt);
        
        // Save and re-load it
        wb = XSSFTestDataSamples.writeOutAndReadBack(wb);
        sheet = wb.getSheetAt(0);

        // Check
        drawing = sheet.createDrawingPatriarch();
        
        List<XSSFShape> shapes = drawing.getShapes();
        assertEquals(1, shapes.size());
        assertTrue(shapes.get(0) instanceof XSSFSimpleShape); 
        
        XSSFSimpleShape sshape = (XSSFSimpleShape) shapes.get(0);
        
        List<XSSFTextParagraph> paras = sshape.getTextParagraphs();
        assertEquals(2, paras.size());	// this should be 2 as XSSFSimpleShape creates a default paragraph (no text), and then we add a string to that.  
        
        List<XSSFTextRun> runs = para.getTextRuns();
        assertEquals(3, runs.size());
        
        // first run properties
        assertEquals("Test ", runs.get(0).getText());
        assertEquals("Arial", runs.get(0).getFontFamily());

        Color clr = runs.get(0).getFontColor(); 
        assertTrue(Arrays.equals(
                new int[] { 0, 255, 255 } ,
                new int[] { clr.getRed(), clr.getGreen(), clr.getBlue() }));

        // second run properties        
        assertEquals("Rich Text", runs.get(1).getText());
        assertEquals(XSSFFont.DEFAULT_FONT_NAME, runs.get(1).getFontFamily());

        clr = runs.get(1).getFontColor(); 
        assertTrue(Arrays.equals(
                new int[] { 0, 255, 0 } ,
                new int[] { clr.getRed(), clr.getGreen(), clr.getBlue() }));        
        
        // third run properties
        assertEquals(" String", runs.get(2).getText());
        assertEquals("Arial", runs.get(2).getFontFamily());
        clr = runs.get(2).getFontColor(); 
        assertTrue(Arrays.equals(
                new int[] { 0, 255, 255 } ,
                new int[] { clr.getRed(), clr.getGreen(), clr.getBlue() }));
    }    

