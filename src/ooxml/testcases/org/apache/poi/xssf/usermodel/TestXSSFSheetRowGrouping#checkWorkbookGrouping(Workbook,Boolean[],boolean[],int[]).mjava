    private void checkWorkbookGrouping(Workbook wb, Boolean[] collapsed, boolean[] hidden, int[] outlineLevel) {
        printWorkbook(wb);
        Sheet sheet = wb.getSheetAt(0);
        
        assertEquals(collapsed.length, hidden.length);
        assertEquals(collapsed.length, outlineLevel.length);
        assertEquals("Expected " + collapsed.length + " rows with collapsed state, but had " + (sheet.getLastRowNum()-sheet.getFirstRowNum()+1) + " rows ("
                + sheet.getFirstRowNum() + "-" + sheet.getLastRowNum() + ")",  
                collapsed.length, sheet.getLastRowNum()-sheet.getFirstRowNum()+1);
        for(int i = sheet.getFirstRowNum(); i < sheet.getLastRowNum();i++) {
            if(collapsed[i-sheet.getFirstRowNum()] == null) {
                continue;
            }
            XSSFRow row = (XSSFRow) sheet.getRow(i);
            assertNotNull("Could not read row " + i, row);
            assertNotNull("Could not read row " + i, row.getCTRow());
            assertEquals("Row: " + i + ": collapsed", collapsed[i-sheet.getFirstRowNum()].booleanValue(), row.getCTRow().getCollapsed());
            assertEquals("Row: " + i + ": hidden", hidden[i-sheet.getFirstRowNum()], row.getCTRow().getHidden());
            
            assertEquals("Row: " + i + ": level", outlineLevel[i-sheet.getFirstRowNum()], row.getCTRow().getOutlineLevel());
        }
        
        writeToFile(wb);
    }

