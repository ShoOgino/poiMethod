    /**
    *
    * @return a constant from the local Result class denoting whether there were any evaluation
    * cases, and whether they all succeeded.
    */
    @Test
    public void processFunctionRow() {
        Row r = sheet.getRow(formulasRowIdx);

        Cell expValue = r.getCell(SS.COLUMN_INDEX_EXPECTED_VALUE);
        assertNotNull("Missing expected values cell for function '"
            + targetFunctionName + ", test" + targetTestName + " (row " +
            formulasRowIdx + 1 + ")", expValue);

        Cell c = r.getCell(SS.COLUMN_INDEX_ACTUAL_VALUE);
        assumeNotNull(c);
        assumeTrue(c.getCellTypeEnum() == CellType.FORMULA);

        CellValue actValue = evaluator.evaluate(c);

        String msg = String.format(Locale.ROOT, "Function '%s': Test: '%s': Formula: %s @ %d:%d",
            targetFunctionName, targetTestName, c.getCellFormula(), formulasRowIdx, SS.COLUMN_INDEX_ACTUAL_VALUE);

        assertNotNull(msg + " - actual value was null", actValue);

        final CellType expectedCellType = expValue.getCellTypeEnum();
        switch (expectedCellType) {
            case BLANK:
                assertEquals(msg, CellType.BLANK, actValue.getCellTypeEnum());
                break;
            case BOOLEAN:
                assertEquals(msg, CellType.BOOLEAN, actValue.getCellTypeEnum());
                assertEquals(msg, expValue.getBooleanCellValue(), actValue.getBooleanValue());
                break;
            case ERROR:
                assertEquals(msg, CellType.ERROR, actValue.getCellTypeEnum());
//              if(false) { // TODO: fix ~45 functions which are currently returning incorrect error values
//                  assertEquals(msg, expected.getErrorCellValue(), actual.getErrorValue());
//              }
                break;
            case FORMULA: // will never be used, since we will call method after formula evaluation
                fail("Cannot expect formula as result of formula evaluation: " + msg);
            case NUMERIC:
                assertEquals(msg, CellType.NUMERIC, actValue.getCellTypeEnum());
                TestMathX.assertEquals(msg, expValue.getNumericCellValue(), actValue.getNumberValue(), TestMathX.POS_ZERO, TestMathX.DIFF_TOLERANCE_FACTOR);
//              double delta = Math.abs(expected.getNumericCellValue()-actual.getNumberValue());
//              double pctExpected = Math.abs(0.00001*expected.getNumericCellValue());
//              assertTrue(msg, delta <= pctExpected);
                break;
            case STRING:
                assertEquals(msg, CellType.STRING, actValue.getCellTypeEnum());
                assertEquals(msg, expValue.getRichStringCellValue().getString(), actValue.getStringValue());
                break;
            default:
                fail("Unexpected cell type: " + expectedCellType);
        }
    }

