	@Test
	public void processFunctionRow() {
	    Row formulasRow = sheet.getRow(formulasRowIdx);
	    Row expectedValuesRow = sheet.getRow(expectedValuesRowIdx);
	    
		short endcolnum = formulasRow.getLastCellNum();

		// iterate across the row for all the evaluation cases
		for (short colnum=SS.COLUMN_INDEX_FIRST_TEST_VALUE; colnum < endcolnum; colnum++) {
			Cell c = formulasRow.getCell(colnum);
			assumeNotNull(c);
			assumeTrue(c.getCellType() == CellType.FORMULA);
			ignoredFormulaTestCase(c.getCellFormula());

			CellValue actValue = evaluator.evaluate(c);
			Cell expValue = (expectedValuesRow == null) ? null : expectedValuesRow.getCell(colnum);

			String msg = String.format(Locale.ROOT, "Function '%s': Formula: %s @ %d:%d"
		        , targetFunctionName, c.getCellFormula(), formulasRow.getRowNum(), colnum);
			
			assertNotNull(msg + " - Bad setup data expected value is null", expValue);
			assertNotNull(msg + " - actual value was null", actValue);
	        
	        final CellType expectedCellType = expValue.getCellType();
	        switch (expectedCellType) {
	            case BLANK:
	                assertEquals(msg, CellType.BLANK, actValue.getCellType());
	                break;
	            case BOOLEAN:
	                assertEquals(msg, CellType.BOOLEAN, actValue.getCellType());
	                assertEquals(msg, expValue.getBooleanCellValue(), actValue.getBooleanValue());
	                break;
	            case ERROR:
	                assertEquals(msg, CellType.ERROR, actValue.getCellType());
//	              if(false) { // TODO: fix ~45 functions which are currently returning incorrect error values
//	                  assertEquals(msg, expValue.getErrorCellValue(), actValue.getErrorValue());
//	              }
	                break;
	            case FORMULA: // will never be used, since we will call method after formula evaluation
	                fail("Cannot expect formula as result of formula evaluation: " + msg);
	            case NUMERIC:
	                assertEquals(msg, CellType.NUMERIC, actValue.getCellType());
	                TestMathX.assertEquals(msg, expValue.getNumericCellValue(), actValue.getNumberValue(), TestMathX.POS_ZERO, TestMathX.DIFF_TOLERANCE_FACTOR);
//	              double delta = Math.abs(expValue.getNumericCellValue()-actValue.getNumberValue());
//	              double pctExpValue = Math.abs(0.00001*expValue.getNumericCellValue());
//	              assertTrue(msg, delta <= pctExpValue);
	                break;
	            case STRING:
	                assertEquals(msg, CellType.STRING, actValue.getCellType());
	                assertEquals(msg, expValue.getRichStringCellValue().getString(), actValue.getStringValue());
	                break;
	            default:
	                fail("Unexpected cell type: " + expectedCellType);
	        }
		}
	}

