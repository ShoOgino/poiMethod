    /**
     * Test the cols element is correct in case of NumericRanges.OVERLAPS_1_MINOR
     */
    public void testMergingOverlappingCols_OVERLAPS_1_MINOR() {
		XSSFWorkbook wb = new XSSFWorkbook();
		XSSFSheet sheet = wb.createSheet("test");

        CTCols cols = sheet.getCTWorksheet().getColsArray(0);
        CTCol col = cols.addNewCol();
        col.setMin(2 + 1);
        col.setMax(4 + 1);
        col.setWidth(20);
        col.setCustomWidth(true);

        sheet.groupColumn((short) 3, (short) 5);
        
        cols = sheet.getCTWorksheet().getColsArray(0);
        logger.log(POILogger.DEBUG, "testMergingOverlappingCols_OVERLAPS_1_MINOR/cols:" + cols);

        assertEquals(0, cols.getColArray(0).getOutlineLevel());
        assertEquals(3, cols.getColArray(0).getMin()); // 1 based
        assertEquals(3, cols.getColArray(0).getMax()); // 1 based
        assertEquals(true, cols.getColArray(0).getCustomWidth());

        assertEquals(1, cols.getColArray(1).getOutlineLevel());
        assertEquals(4, cols.getColArray(1).getMin()); // 1 based
        assertEquals(5, cols.getColArray(1).getMax()); // 1 based        
        assertEquals(true, cols.getColArray(1).getCustomWidth());

        assertEquals(1, cols.getColArray(2).getOutlineLevel());
        assertEquals(6, cols.getColArray(2).getMin()); // 1 based
        assertEquals(6, cols.getColArray(2).getMax()); // 1 based
        assertEquals(false, cols.getColArray(2).getCustomWidth());
        
        assertEquals(3, cols.sizeOfColArray());
        
        wb = XSSFTestDataSamples.writeOutAndReadBack(wb, "testMergingOverlappingCols_OVERLAPS_1_MINOR");
        sheet = wb.getSheet("test");
        
        for (int i = 2; i <= 4; i++) {
        	assertEquals("Unexpected width of column "+ i, 20 * 256, sheet.getColumnWidth(i));
        }
    	assertEquals("Unexpected width of column "+ 5, sheet.getDefaultColumnWidth() * 256, sheet.getColumnWidth(5));
    }

