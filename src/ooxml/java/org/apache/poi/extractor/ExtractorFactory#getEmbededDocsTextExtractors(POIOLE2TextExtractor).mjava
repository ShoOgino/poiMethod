	/**
	 * Returns an array of text extractors, one for each of
	 *  the embedded documents in the file (if there are any).
	 * If there are no embedded documents, you'll get back an
	 *  empty array. Otherwise, you'll get one open
	 *  {@link POITextExtractor} for each embedded file.
	 */
	public static POITextExtractor[] getEmbededDocsTextExtractors(POIOLE2TextExtractor ext) throws IOException, OpenXML4JException, XmlException {
	   // All the embedded directories we spotted
		ArrayList<Entry> dirs = new ArrayList<Entry>();
		// For anything else not directly held in as a POIFS directory
		ArrayList<InputStream> nonPOIFS = new ArrayList<InputStream>();

      // Find all the embedded directories
		DirectoryEntry root = ext.getRoot();
		if(root == null) {
			throw new IllegalStateException("The extractor didn't know which POIFS it came from!");
		}

		if(ext instanceof ExcelExtractor) {
			// These are in MBD... under the root
			Iterator<Entry> it = root.getEntries();
			while(it.hasNext()) {
				Entry entry = it.next();
				if(entry.getName().startsWith("MBD")) {
					dirs.add(entry);
				}
			}
		} else if(ext instanceof WordExtractor) {
			// These are in ObjectPool -> _... under the root
			try {
				DirectoryEntry op = (DirectoryEntry)
				        root.getEntry("ObjectPool");
				Iterator<Entry> it = op.getEntries();
				while(it.hasNext()) {
					Entry entry = it.next();
					if(entry.getName().startsWith("_")) {
						dirs.add(entry);
					}
				}
			} catch(FileNotFoundException e) {
                // ignored here
            }
		//} else if(ext instanceof PowerPointExtractor) {
			// Tricky, not stored directly in poifs
			// TODO
		} else if(ext instanceof OutlookTextExtactor) {
		   // Stored in the Attachment blocks
		   MAPIMessage msg = ((OutlookTextExtactor)ext).getMAPIMessage();
		   for(AttachmentChunks attachment : msg.getAttachmentFiles()) {
		      if(attachment.attachData != null) {
   		         byte[] data = attachment.attachData.getValue();
   		         nonPOIFS.add( new ByteArrayInputStream(data) );
		      } else if(attachment.attachmentDirectory != null) {
		          dirs.add(attachment.attachmentDirectory.getDirectory());
		      }
		   }
		}

		// Create the extractors
		if(dirs.size() == 0 && nonPOIFS.size() == 0){
			return new POITextExtractor[0];
		}

		ArrayList<POITextExtractor> e = new ArrayList<POITextExtractor>();
        for (Entry dir : dirs) {
            e.add(createExtractor(
                    (DirectoryNode) dir
            ));
        }
        for (InputStream nonPOIF : nonPOIFS) {
            try {
                e.add(createExtractor(nonPOIF));
            } catch (IllegalArgumentException ie) {
                // Ignore, just means it didn't contain
                //  a format we support as yet
            } catch (XmlException xe) {
                throw new IOException(xe.getMessage());
            } catch (OpenXML4JException oe) {
                throw new IOException(oe.getMessage());
            }
        }
		return e.toArray(new POITextExtractor[e.size()]);
	}

