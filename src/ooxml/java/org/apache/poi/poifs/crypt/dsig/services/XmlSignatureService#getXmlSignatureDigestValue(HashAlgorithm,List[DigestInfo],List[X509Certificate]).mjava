    @SuppressWarnings("unchecked")
    private byte[] getXmlSignatureDigestValue(HashAlgorithm hashAlgo,
        List<DigestInfo> digestInfos,
        List<X509Certificate> signingCertificateChain)
        throws ParserConfigurationException, NoSuchAlgorithmException,
        InvalidAlgorithmParameterException, MarshalException,
        javax.xml.crypto.dsig.XMLSignatureException,
        TransformerFactoryConfigurationError, TransformerException,
        IOException, SAXException, NoSuchProviderException, XmlException {
        /*
         * DOM Document construction.
         */
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        Document doc = dbf.newDocumentBuilder().newDocument();

        /*
         * Signature context construction.
         */
        Key key = new Key() {
            private static final long serialVersionUID = 1L;

            public String getAlgorithm() {
                return null;
            }

            public byte[] getEncoded() {
                return null;
            }

            public String getFormat() {
                return null;
            }
        };
        
        // As of JDK 7, can't use sigDoc here directly, because the
        // setAttributeID will be called and it's not implemented in xmlbeans
        XMLSignContext xmlSignContext = new DOMSignContext(key, doc);
        URIDereferencer uriDereferencer = getURIDereferencer();
        if (null != uriDereferencer) {
            xmlSignContext.setURIDereferencer(uriDereferencer);
        }

        xmlSignContext.putNamespacePrefix(
                "http://schemas.openxmlformats.org/package/2006/digital-signature",
                "mdssi");
        
        if (this.signatureNamespacePrefix != null) {
            /*
             * OOo doesn't like ds namespaces so per default prefixing is off.
             */
            xmlSignContext.putNamespacePrefix(
                javax.xml.crypto.dsig.XMLSignature.XMLNS,
                this.signatureNamespacePrefix);
        }

        XMLSignatureFactory signatureFactory = XMLSignatureFactory.getInstance("DOM", "XMLDSig");

        /*
         * Add ds:References that come from signing client local files.
         */
        List<Reference> references = new LinkedList<Reference>();
        addDigestInfosAsReferences(digestInfos, signatureFactory, references);

        /*
         * Invoke the signature facets.
         */
        String localSignatureId;
        if (null == this.signatureId) {
            localSignatureId = "xmldsig-" + UUID.randomUUID().toString();
        } else {
            localSignatureId = this.signatureId;
        }
        List<XMLObject> objects = new LinkedList<XMLObject>();
        for (SignatureFacet signatureFacet : this.signatureFacets) {
            LOG.log(POILogger.DEBUG, "invoking signature facet: "
                + signatureFacet.getClass().getSimpleName());
            signatureFacet.preSign(signatureFactory, localSignatureId, signingCertificateChain, references, objects);
        }

        /*
         * ds:SignedInfo
         */
        SignatureMethod signatureMethod = signatureFactory.newSignatureMethod(
            getSignatureMethod(hashAlgo), null);
        CanonicalizationMethod canonicalizationMethod = signatureFactory
            .newCanonicalizationMethod(getCanonicalizationMethod(),
            (C14NMethodParameterSpec) null);
        SignedInfo signedInfo = signatureFactory.newSignedInfo(
            canonicalizationMethod, signatureMethod, references);

        /*
         * JSR105 ds:Signature creation
         */
        String signatureValueId = localSignatureId + "-signature-value";
        javax.xml.crypto.dsig.XMLSignature xmlSignature = signatureFactory
            .newXMLSignature(signedInfo, null, objects, localSignatureId,
            signatureValueId);

        /*
         * ds:Signature Marshalling.
         */
        DOMXMLSignatureIf domXmlSignature;
        try {
            domXmlSignature = HorribleProxy.newProxy(DOMXMLSignatureIf.class, xmlSignature);
        } catch (Exception e) {
            throw new RuntimeException("DomXmlSignature instance error: " + e.getMessage(), e);
        }
        
        domXmlSignature.marshal(doc, this.signatureNamespacePrefix, (DOMCryptoContext) xmlSignContext);

        registerIds(doc);
        Element el = doc.getElementById("idPackageObject");
        assert (el != null);
        el.setAttributeNS(Constants.NamespaceSpecNS, "xmlns:mdssi", PackageNamespaces.DIGITAL_SIGNATURE);

        
        /*
         * Completion of undigested ds:References in the ds:Manifests.
         */
        for (XMLObject object : objects) {
            LOG.log(POILogger.DEBUG, "object java type: " + object.getClass().getName());
            List<XMLStructure> objectContentList = object.getContent();
            for (XMLStructure objectContent : objectContentList) {
                LOG.log(POILogger.DEBUG, "object content java type: " + objectContent.getClass().getName());
                if (!(objectContent instanceof Manifest)) continue;
                Manifest manifest = (Manifest) objectContent;
                List<Reference> manifestReferences = manifest.getReferences();
                for (Reference manifestReference : manifestReferences) {
                    if (manifestReference.getDigestValue() != null) continue;

                    DOMReferenceIf manifestDOMReference;
                    try {
                        manifestDOMReference = HorribleProxy.newProxy(DOMReferenceIf.class, manifestReference);
                    } catch (Exception e) {
                        throw new RuntimeException("DOMReference instance error: " + e.getMessage(), e);
                    }
                    manifestDOMReference.digest(xmlSignContext);
                }
            }
        }

        /*
         * Completion of undigested ds:References.
         */
        List<Reference> signedInfoReferences = signedInfo.getReferences();
        for (Reference signedInfoReference : signedInfoReferences) {
            DOMReferenceIf domReference;
            try {
                domReference = HorribleProxy.newProxy(DOMReferenceIf.class, signedInfoReference);
            } catch (Exception e) {
                throw new RuntimeException("DOMReference instance error: " + e.getMessage(), e);
            }

            // ds:Reference with external digest value
            if (domReference.getDigestValue() != null) continue;
            
            domReference.digest(xmlSignContext);
        }

        /*
         * Calculation of XML signature digest value.
         */
        DOMSignedInfoIf domSignedInfo;
        try {
            domSignedInfo = HorribleProxy.newProxy(DOMSignedInfoIf.class, signedInfo); 
        } catch (Exception e) {
            throw new RuntimeException("DOMSignedInfo instance error: " + e.getMessage(), e);
        }
        
        ByteArrayOutputStream dataStream = new ByteArrayOutputStream();
        domSignedInfo.canonicalize(xmlSignContext, dataStream);
        byte[] octets = dataStream.toByteArray();

        sigDoc = SignatureDocument.Factory.parse(doc.getDocumentElement());
        
        
        /*
         * TODO: we could be using DigestOutputStream here to optimize memory
         * usage.
         */

        MessageDigest jcaMessageDigest = CryptoFunctions.getMessageDigest(hashAlgo);
        byte[] digestValue = jcaMessageDigest.digest(octets);
        return digestValue;
    }

