    /**
     * Helper method for adding informations before the signing.
     * Normally {@link #confirmSignature()} is sufficient to be used.
     */
    @SuppressWarnings("unchecked")
    public DigestInfo preSign(Document document, List<DigestInfo> digestInfos)
    throws XMLSignatureException, MarshalException {
        try {
            signatureConfig.init(false);
            
            // it's necessary to explicitly set the mdssi namespace, but the sign() method has no
            // normal way to interfere with, so we need to add the namespace under the hand ...
            EventTarget target = (EventTarget)document;
            EventListener creationListener = signatureConfig.getSignatureMarshalListener();
            if (creationListener != null) {
                if (creationListener instanceof SignatureMarshalListener) {
                    ((SignatureMarshalListener)creationListener).setEventTarget(target);
                }
                SignatureMarshalListener.setListener(target, creationListener, true);
            }
            
            /*
             * Signature context construction.
             */
            XMLSignContext xmlSignContext = new DOMSignContext(signatureConfig.getKey(), document);
            URIDereferencer uriDereferencer = signatureConfig.getUriDereferencer();
            if (null != uriDereferencer) {
                xmlSignContext.setURIDereferencer(uriDereferencer);
            }
    
            for (Map.Entry<String,String> me : signatureConfig.getNamespacePrefixes().entrySet()) {
                xmlSignContext.putNamespacePrefix(me.getKey(), me.getValue());
            }
            xmlSignContext.setDefaultNamespacePrefix("");
            // signatureConfig.getNamespacePrefixes().get(XML_DIGSIG_NS));
            
            // workaround for https://bugzilla.redhat.com/show_bug.cgi?id=1155012
            Provider bcProv = Security.getProvider("BC");
            if (bcProv != null) {
                xmlSignContext.setProperty("org.jcp.xml.dsig.internal.dom.SignatureProvider", bcProv);
            }            
            
            XMLSignatureFactory signatureFactory = signatureConfig.getSignatureFactory();
    
            /*
             * Add ds:References that come from signing client local files.
             */
            List<Reference> references = new ArrayList<Reference>();
            for (DigestInfo digestInfo : safe(digestInfos)) {
                byte[] documentDigestValue = digestInfo.digestValue;
    
                String uri = new File(digestInfo.description).getName();
                Reference reference = SignatureFacet.newReference
                    (uri, null, null, null, documentDigestValue, signatureConfig);
                references.add(reference);
            }
    
            /*
             * Invoke the signature facets.
             */
            List<XMLObject> objects = new ArrayList<XMLObject>();
            for (SignatureFacet signatureFacet : signatureConfig.getSignatureFacets()) {
                LOG.log(POILogger.DEBUG, "invoking signature facet: " + signatureFacet.getClass().getSimpleName());
                signatureFacet.preSign(document, references, objects);
            }
    
            /*
             * ds:SignedInfo
             */
            SignedInfo signedInfo;
            try {
                SignatureMethod signatureMethod = signatureFactory.newSignatureMethod
                    (signatureConfig.getSignatureMethodUri(), null);
                CanonicalizationMethod canonicalizationMethod = signatureFactory
                    .newCanonicalizationMethod(signatureConfig.getCanonicalizationMethod(),
                    (C14NMethodParameterSpec) null);
                signedInfo = signatureFactory.newSignedInfo(
                    canonicalizationMethod, signatureMethod, references);
            } catch (GeneralSecurityException e) {
                throw new XMLSignatureException(e);
            }
    
            /*
             * JSR105 ds:Signature creation
             */
            String signatureValueId = signatureConfig.getPackageSignatureId() + "-signature-value";
            javax.xml.crypto.dsig.XMLSignature xmlSignature = signatureFactory
                .newXMLSignature(signedInfo, null, objects, signatureConfig.getPackageSignatureId(),
                signatureValueId);
    
            /*
             * ds:Signature Marshalling.
             */
            xmlSignature.sign(xmlSignContext);
    
            /*
             * Completion of undigested ds:References in the ds:Manifests.
             */
            for (XMLObject object : objects) {
                LOG.log(POILogger.DEBUG, "object java type: " + object.getClass().getName());
                List<XMLStructure> objectContentList = object.getContent();
                for (XMLStructure objectContent : objectContentList) {
                    LOG.log(POILogger.DEBUG, "object content java type: " + objectContent.getClass().getName());
                    if (!(objectContent instanceof Manifest)) continue;
                    Manifest manifest = (Manifest) objectContent;
                    List<Reference> manifestReferences = manifest.getReferences();
                    for (Reference manifestReference : manifestReferences) {
                        if (manifestReference.getDigestValue() != null) continue;
    
                        DOMReference manifestDOMReference = (DOMReference)manifestReference;
                        manifestDOMReference.digest(xmlSignContext);
                    }
                }
            }
    
            /*
             * Completion of undigested ds:References.
             */
            List<Reference> signedInfoReferences = signedInfo.getReferences();
            for (Reference signedInfoReference : signedInfoReferences) {
                DOMReference domReference = (DOMReference)signedInfoReference;
    
                // ds:Reference with external digest value
                if (domReference.getDigestValue() != null) continue;
                
                domReference.digest(xmlSignContext);
            }
    
            /*
             * Calculation of XML signature digest value.
             */
            DOMSignedInfo domSignedInfo = (DOMSignedInfo)signedInfo;
            ByteArrayOutputStream dataStream = new ByteArrayOutputStream();
            domSignedInfo.canonicalize(xmlSignContext, dataStream);
            byte[] octets = dataStream.toByteArray();
    
            /*
             * TODO: we could be using DigestOutputStream here to optimize memory
             * usage.
             */
    
            MessageDigest md = CryptoFunctions.getMessageDigest(signatureConfig.getDigestAlgo());
            byte[] digestValue = md.digest(octets);
            
            
            String description = signatureConfig.getSignatureDescription();
            return new DigestInfo(digestValue, signatureConfig.getDigestAlgo(), description);
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new EncryptedDocumentException("\"your JVM is just too broken\" - check https://bugzilla.redhat.com/show_bug.cgi?id=1155012 if this applies to the stacktrace ...", e);
        }
    }

