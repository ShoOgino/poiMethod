	/**
	 * Create new instance by factory method 
	 *
	 * @param proxyClass
	 * @param factoryMethod
	 * @param initargs
	 * @return
	 * @throws InvocationTargetException
	 * @throws IllegalAccessException
	 * @throws InstantiationException
	 * @throws NoSuchMethodException
	 * @throws ClassNotFoundException
	 */
    @SuppressWarnings("unchecked")
	public static <T extends ProxyIf> T createProxy(Class<T> proxyClass, String factoryMethod, Object ... initargs)
    throws InvocationTargetException, IllegalAccessException, InstantiationException
    , NoSuchMethodException, ClassNotFoundException, NoSuchFieldException {
        ClassLoader cl = Thread.currentThread().getContextClassLoader();

        Class<?> delegateClass = getDelegateClass(proxyClass);
        Class<?> paramTypes[] = updateMethodArgs(null, initargs);
        Method facMethod = delegateClass.getMethod(factoryMethod, paramTypes);
        Object delegateRef = facMethod.invoke(null, initargs);

        if (delegateRef == null) {
            return null;
        }

        HorribleProxy hp = new HorribleProxy(delegateClass, delegateRef);
        return (T)Proxy.newProxyInstance(cl, new Class<?>[]{proxyClass}, hp);
    }

