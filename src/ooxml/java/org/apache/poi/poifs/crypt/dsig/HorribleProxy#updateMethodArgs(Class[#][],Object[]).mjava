    @SuppressWarnings("unchecked")
    private static Class<?>[] updateMethodArgs(Class<?> types[], Object args[])
    throws NoSuchFieldException, IllegalAccessException, ClassNotFoundException {
        if (args == null) return new Class<?>[0];
        if (types == null) types = new Class<?>[args.length];
        if (types.length != args.length) {
            throw new IllegalArgumentException();
        }
        
        for (int i=0; i<types.length; i++) {
            if (types[i] == null) {
                if (args[i] == null) {
                    throw new IllegalArgumentException();
                }
                types[i] = args[i].getClass();
            }
            
            if (types[i].isArray()) {
                // TODO: check for null arguments ...
                if (ProxyIf.class.isAssignableFrom(types[i].getComponentType())) {
                    ProxyIf pifs[] = (ProxyIf[])args[i];
                    Class<?> dc = getDelegateClass((Class<? extends ProxyIf>)types[i].getComponentType());
                    int dcArrSize = (pifs==null ? 0 : pifs.length);
                    Object[] dcArr = (Object[])Array.newInstance(dc, dcArrSize);
                    for (int j=0;j<dcArrSize;j++) {
                        dcArr[j] = pifs[j].getDelegate(); 
                    }
                    args[i] = dcArr;
                    types[i] = dcArr.getClass();
                }
            } else if (ProxyIf.class.isAssignableFrom(types[i])) {
                types[i] = getDelegateClass((Class<? extends ProxyIf>)types[i]);
                if (args[i] != null) {
                    args[i] = ((ProxyIf)args[i]).getDelegate();
                }
            }
        }
        return types;
    }

