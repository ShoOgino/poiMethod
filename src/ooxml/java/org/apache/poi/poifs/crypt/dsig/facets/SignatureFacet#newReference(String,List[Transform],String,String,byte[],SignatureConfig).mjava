    public static Reference newReference(
          String uri
        , List<Transform> transforms
        , String type
        , String id
        , byte digestValue[]
        , SignatureConfig signatureConfig)
    throws XMLSignatureException {
        // the references appear in the package signature or the package object
        // so we can use the default digest algorithm
        String digestMethodUri = signatureConfig.getDigestMethodUri();
        XMLSignatureFactory sigFac = signatureConfig.getSignatureFactory();
        DigestMethod digestMethod;
        try {
            digestMethod = sigFac.newDigestMethod(digestMethodUri, null);
        } catch (GeneralSecurityException e) {
            throw new XMLSignatureException("unknown digest method uri: "+digestMethodUri, e);
        }

        Reference reference;
        if (digestValue == null) {
            reference = sigFac.newReference(uri, digestMethod, transforms, type, id);
        } else {
            reference = sigFac.newReference(uri, digestMethod, transforms, type, id, digestValue);
        }
        
        // workaround for https://bugzilla.redhat.com/show_bug.cgi?id=1155012
        // overwrite standard message digest, if a digest <> SHA1 is used
        Provider bcProv = Security.getProvider("BC");
        if (bcProv != null && !DigestMethod.SHA1.equals(digestMethodUri)) {
            try {
                Method m = DOMDigestMethod.class.getDeclaredMethod("getMessageDigestAlgorithm");
                m.setAccessible(true);
                String mdAlgo = (String)m.invoke(digestMethod);
                MessageDigest md = MessageDigest.getInstance(mdAlgo, bcProv);
                Field f = DOMReference.class.getDeclaredField("md");
                f.setAccessible(true);
                f.set(reference, md);
            } catch (Exception e) {
                LOG.log(POILogger.WARN, "Can't overwrite message digest (workaround for https://bugzilla.redhat.com/show_bug.cgi?id=1155012)", e);
            }
        }

        return reference;
    }

