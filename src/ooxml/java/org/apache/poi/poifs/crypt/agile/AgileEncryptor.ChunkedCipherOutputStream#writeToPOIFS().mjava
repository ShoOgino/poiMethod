        void writeToPOIFS() throws IOException {
            DataSpaceMapUtils.addDefaultDataSpace(dir);
            
            /**
             * Generate an HMAC, as specified in [RFC2104], of the encrypted form of the data (message), 
             * which the DataIntegrity element will verify by using the Salt generated in step 2 as the key. 
             * Note that the entire EncryptedPackage stream (1), including the StreamSize field, MUST be 
             * used as the message.
             * 
             * Encrypt the HMAC as in step 3 by using a blockKey byte array consisting of the following bytes:
             * 0xa0, 0x67, 0x7f, 0x02, 0xb2, 0x2c, 0x84, and 0x33.
             **/
            byte buf[] = new byte[4096];
            LittleEndian.putLong(buf, 0, _pos);
            integrityMD.update(buf, 0, LittleEndianConsts.LONG_SIZE);
            
            InputStream fis = new FileInputStream(fileOut);
            for (int readBytes; (readBytes = fis.read(buf)) != -1; integrityMD.update(buf, 0, readBytes));
            fis.close();
            
            AgileEncryptionHeader header = builder.getHeader(); 
            int blockSize = header.getBlockSize();
            
            byte hmacValue[] = integrityMD.doFinal();
            byte iv[] = CryptoFunctions.generateIv(header.getHashAlgorithmEx(), header.getKeySalt(), kIntegrityValueBlock, header.getBlockSize());
            Cipher cipher = CryptoFunctions.getCipher(getSecretKey(), header.getCipherAlgorithm(), header.getChainingMode(), iv, Cipher.ENCRYPT_MODE);
            try {
                byte hmacValueFilled[] = getBlock0(hmacValue, getNextBlockSize(hmacValue.length, blockSize));
                byte encryptedHmacValue[] = cipher.doFinal(hmacValueFilled);
                header.setEncryptedHmacValue(encryptedHmacValue);
            } catch (GeneralSecurityException e) {
                throw new EncryptedDocumentException(e);
            }

            createEncryptionInfoEntry(dir);
            
            int oleStreamSize = (int)(fileOut.length()+LittleEndianConsts.LONG_SIZE);
            dir.createDocument("EncryptedPackage", oleStreamSize, this);
            // TODO: any properties???
        }

