    public void postSign(byte[] signatureValue, List<X509Certificate> signingCertificateChain) {
        LOG.debug("postSign");

        /*
         * Retrieve the intermediate XML signature document from the temporary
         * data storage.
         */
        TemporaryDataStorage temporaryDataStorage = getTemporaryDataStorage();
        InputStream documentInputStream = temporaryDataStorage.getTempInputStream();
        String signatureId = (String) temporaryDataStorage.getAttribute(SIGNATURE_ID_ATTRIBUTE);
        LOG.debug("signature Id: " + signatureId);

        /*
         * Load the signature DOM document.
         */
        Document document;
        try {
            document = loadDocument(documentInputStream);
        } catch (Exception e) {
            throw new RuntimeException("DOM error: " + e.getMessage(), e);
        }

        /*
         * Locate the correct ds:Signature node.
         */
        Element nsElement = document.createElement("ns");
        nsElement.setAttributeNS(Constants.NamespaceSpecNS, "xmlns:ds", Constants.SignatureSpecNS);
        Element signatureElement;
        try {
            signatureElement = (Element) XPathAPI.selectSingleNode(document, "//ds:Signature[@Id='" + signatureId + "']", nsElement);
        } catch (TransformerException e) {
            throw new RuntimeException("XPATH error: " + e.getMessage(), e);
        }
        if (null == signatureElement) {
            throw new RuntimeException("ds:Signature not found for @Id: " + signatureId);
        }

        /*
         * Insert signature value into the ds:SignatureValue element
         */
        NodeList signatureValueNodeList = signatureElement.getElementsByTagNameNS(javax.xml.crypto.dsig.XMLSignature.XMLNS, "SignatureValue");
        Element signatureValueElement = (Element) signatureValueNodeList.item(0);
        signatureValueElement.setTextContent(Base64.encode(signatureValue));

        /*
         * Allow implementation classes to inject their own stuff.
         */
        postSign(signatureElement, signingCertificateChain);

        OutputStream signedDocumentOutputStream = getSignedDocumentOutputStream();
        if (null == signedDocumentOutputStream) {
            throw new IllegalArgumentException("signed document output stream is null");
        }
        try {
            writeDocument(document, signedDocumentOutputStream);
        } catch (Exception e) {
            LOG.debug("error writing the signed XML document: " + e.getMessage(), e);
            throw new RuntimeException("error writing the signed XML document: " + e.getMessage(), e);
        }
    }

