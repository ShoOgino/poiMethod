    /**
     * Puts <code>fmt</code> in the numberFormats map if the format is not
     * already in the the number format style table.
     * Does nothing if <code>fmt</code> is already in number format style table.
     *
     * @param fmt the number format to add to number format style table
     * @return the index of <code>fmt</code> in the number format style table
     */
    public int putNumberFormat(String fmt) {
        // Check if number format already exists
        if (numberFormats.containsValue(fmt)) {
            // Find the key, and return that
            for (Entry<Integer,String> numFmt : numberFormats.entrySet()) {
                if(numFmt.getValue().equals(fmt)) {
                    return numFmt.getKey();
                }
            }
            throw new IllegalStateException("Found the format, but couldn't figure out where - should never happen!");
        }
        
        if (numberFormats.size() >= MAXIMUM_NUMBER_OF_DATA_FORMATS) {
            throw new IllegalStateException("The maximum number of Data Formats was exceeded. " +
                    "You can define up to " + MAXIMUM_NUMBER_OF_DATA_FORMATS + " formats in a .xlsx Workbook.");
        }

        // Find a spare key, and add that
        final int formatIndex;
        if (numberFormats.isEmpty()) {
            formatIndex = FIRST_USER_DEFINED_NUMBER_FORMAT_ID;
        }
        else {
            // get next-available numberFormat index.
            // Assumption: there are never gaps in numberFormats indices
            formatIndex = Math.max(
                    numberFormats.lastKey() + 1,
                    FIRST_USER_DEFINED_NUMBER_FORMAT_ID);
        }
        
        
        numberFormats.put(formatIndex, fmt);
        return formatIndex;
    }

