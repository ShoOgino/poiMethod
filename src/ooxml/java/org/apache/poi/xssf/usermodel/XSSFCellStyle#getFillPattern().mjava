    public short getFillPattern() {
	int fp= getCellFill().getPatternType().intValue();
	switch (fp) {
	case STPatternType.INT_NONE:
		return CellStyle.NO_FILL;
	case STPatternType.INT_SOLID: 
	    return CellStyle.SOLID_FOREGROUND;
	case STPatternType.INT_LIGHT_GRAY:
	    return CellStyle.FINE_DOTS;
	case STPatternType.INT_DARK_GRID:
		return CellStyle.ALT_BARS;
	case STPatternType.INT_DARK_GRAY:
	    return CellStyle.SPARSE_DOTS;
	case STPatternType.INT_DARK_HORIZONTAL: 
	    return CellStyle.THICK_HORZ_BANDS;
	case STPatternType.INT_DARK_VERTICAL:
	    return CellStyle.THICK_VERT_BANDS;
	case STPatternType.INT_DARK_UP:
		return CellStyle.THICK_BACKWARD_DIAG;
	case STPatternType.INT_DARK_DOWN:
		return CellStyle.THICK_FORWARD_DIAG;
	case STPatternType.INT_GRAY_0625:
		return CellStyle.BIG_SPOTS;
	case STPatternType.INT_DARK_TRELLIS:
		return CellStyle.BRICKS;
	case STPatternType.INT_LIGHT_HORIZONTAL:
		return CellStyle.THIN_HORZ_BANDS;
	case STPatternType.INT_LIGHT_VERTICAL:
		return CellStyle.THIN_VERT_BANDS;
	case STPatternType.INT_LIGHT_UP:
		return CellStyle.THIN_BACKWARD_DIAG;
	case STPatternType.INT_LIGHT_DOWN:
		return CellStyle.THIN_FORWARD_DIAG;
	case STPatternType.INT_LIGHT_GRID:
		return CellStyle.SQUARES;
	case STPatternType.INT_LIGHT_TRELLIS:
		return CellStyle.DIAMONDS;
	case STPatternType.INT_GRAY_125:
		return CellStyle.LESS_DOTS;
/*		
	case STPatternType.INT_GRAY_0625:
		return CellStyle.LEAST_DOTS;
*/		
	default:
	    	return CellStyle.NO_FILL;
	}
    //    return (short) getCellFill().getPatternType().intValue();
    }

