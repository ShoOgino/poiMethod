    /**
     * Create a XSSFHyperlink amd initialize it from the supplied CTHyperlink bean and package relationship
     *
     * @param ctHyperlink the xml bean containing xml properties
     * @param hyperlinkRel the relationship in the underlying OPC package which stores the actual link's address
     */
    protected XSSFHyperlink(CTHyperlink ctHyperlink, PackageRelationship hyperlinkRel) {
        _ctHyperlink = ctHyperlink;
        _externalRel = hyperlinkRel;

        // Figure out the Hyperlink type and distination

        // If it has a location, it's internal
        if (ctHyperlink.getLocation() != null) {
            _type = Hyperlink.LINK_DOCUMENT;
            _location = ctHyperlink.getLocation();
        } else {
            // Otherwise it's somehow external, check
            //  the relation to see how
            if (_externalRel == null) {
                if (ctHyperlink.getId() != null) {
                    throw new IllegalStateException("The hyperlink for cell " + ctHyperlink.getRef() +
                            " references relation " + ctHyperlink.getId() + ", but that didn't exist!");
                }
                // hyperlink is internal and is not related to other parts
                _type = Hyperlink.LINK_DOCUMENT;
            } else {
                URI target = _externalRel.getTargetURI();
                _location = target.toString();

                // Try to figure out the type
                if (_location.startsWith("http://") || _location.startsWith("https://")
                        || _location.startsWith("ftp://")) {
                    _type = Hyperlink.LINK_URL;
                } else if (_location.startsWith("mailto:")) {
                    _type = Hyperlink.LINK_EMAIL;
                } else {
                    _type = Hyperlink.LINK_FILE;
                }
            }


        }
    }

