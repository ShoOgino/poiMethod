    /**
     * Shifts column range [firstShiftColumnIndex-lastShiftColumnIndex] step places to the right.
     * @param firstShiftColumnIndex the column to start shifting
     * @param lastShiftColumnIndex the column to end shifting
     * @param step length of the shifting step
     */
    @Override
    public void shiftCellsRight(int firstShiftColumnIndex, int lastShiftColumnIndex, int step) {
        if(step < 0)
            throw new IllegalArgumentException("Shifting step may not be negative ");
        if(firstShiftColumnIndex > lastShiftColumnIndex)
            throw new IllegalArgumentException(String.format(LocaleUtil.getUserLocale(),
                    "Incorrect shifting range : %d-%d", firstShiftColumnIndex, lastShiftColumnIndex));
        for (int columnIndex = lastShiftColumnIndex; columnIndex >= firstShiftColumnIndex; columnIndex--){ // process cells backwards, because of shifting 
            shiftCell(columnIndex, step);
        }
        for (int columnIndex = firstShiftColumnIndex; columnIndex <= firstShiftColumnIndex+step-1; columnIndex++)
        {
            _cells.remove(columnIndex);
            XSSFCell targetCell = getCell(columnIndex);
            if(targetCell != null)
                targetCell.getCTCell().set(CTCell.Factory.newInstance());
        }
    }

