    /**
     * Calculate the preferred size for this picture.
     *
     * @return XSSFClientAnchor with the preferred size for this image
     */
    public XSSFClientAnchor getPreferredSize(){
        XSSFClientAnchor anchor = (XSSFClientAnchor)getAnchor();

        XSSFPictureData data = getPictureData();
        Dimension size = getImageDimension(data.getPackagePart(), data.getPictureType());

        float w = 0;
        int col2 = anchor.getCol1();
        int dx2 = 0;
        if(anchor.getDx1() > 0){
            w += getColumnWidthInPixels(col2) - anchor.getDx1();
            col2++;
        }

        for (;;) {
            w += getColumnWidthInPixels(col2);
            if(w > size.width) break;
            col2++;
        }

        if(w > size.width) {
            float cw = getColumnWidthInPixels(col2 + 1);
            float delta = w - size.width;
            dx2 = (int)(EMU_PER_PIXEL*(cw-delta));
        }
        anchor.setCol2(col2);
        anchor.setDx2(dx2);

        float h = 0;
        int row2 = anchor.getRow1();
        int dy2 = 0;

        if(anchor.getDy1() > 0){
            h += getRowHeightInPixels(row2) - anchor.getDy1();
            row2++;
        }

        for (;;) {
            h += getRowHeightInPixels(row2);
            if(h > size.height) break;
            row2++;
        }

        if(h > size.height) {
            float ch = getRowHeightInPixels(row2 + 1);
            float delta = h - size.height;
            dy2 = (int)(EMU_PER_PIXEL*(ch-delta));
        }
        anchor.setRow2(row2);
        anchor.setDy2(dy2);

        CTPositiveSize2D size2d =  ctPicture.getSpPr().getXfrm().getExt();
        size2d.setCx(size.width*EMU_PER_PIXEL);
        size2d.setCy(size.height*EMU_PER_PIXEL);

        return anchor;
    }

