    /**
     * Exports the data in an XML stream
     *
     * @param os OutputStream in which will contain the output XML
     * @param encoding the output charset encoding
     * @param validate if true, validates the XML against the XML Schema
     * @throws SAXException If validating the document fails
     * @throws TransformerException If transforming the document fails
     */
    public void exportToXML(OutputStream os, String encoding, boolean validate) throws SAXException, TransformerException{
        List<XSSFSingleXmlCell> singleXMLCells = map.getRelatedSingleXMLCell();
        List<XSSFTable> tables = map.getRelatedTables();

        String rootElement = map.getCtMap().getRootElement();

        Document doc = DocumentHelper.createDocument();

        final Element root;

        if (isNamespaceDeclared()) {
            root = doc.createElementNS(getNamespace(),rootElement);
        } else {
            root = doc.createElementNS("", rootElement);
        }
        doc.appendChild(root);


        List<String> xpaths = new Vector<>();
        Map<String,XSSFSingleXmlCell> singleXmlCellsMappings = new HashMap<>();
        Map<String,XSSFTable> tableMappings = new HashMap<>();

        for(XSSFSingleXmlCell simpleXmlCell : singleXMLCells) {
            xpaths.add(simpleXmlCell.getXpath());
            singleXmlCellsMappings.put(simpleXmlCell.getXpath(), simpleXmlCell);
        }
        for(XSSFTable table : tables) {
            String commonXPath = table.getCommonXpath();
            xpaths.add(commonXPath);
            tableMappings.put(commonXPath, table);
        }

        Collections.sort(xpaths,this);

        for(String xpath : xpaths) {

            XSSFSingleXmlCell simpleXmlCell = singleXmlCellsMappings.get(xpath);
            XSSFTable table = tableMappings.get(xpath);

            if (!xpath.matches(".*\\[.*")) {

                // Exports elements and attributes mapped with simpleXmlCell
                if (simpleXmlCell!=null) {
                    XSSFCell cell = simpleXmlCell.getReferencedCell();
                    if (cell!=null) {
                        Node currentNode = getNodeByXPath(xpath,doc.getFirstChild(),doc,false);
                        mapCellOnNode(cell,currentNode);
                        
                        //remove nodes which are empty in order to keep the output xml valid
                        if("".equals(currentNode.getTextContent()) && currentNode.getParentNode() != null) {
                        	currentNode.getParentNode().removeChild(currentNode);
                        }
                    }
                }

                // Exports elements and attributes mapped with tables
                if (table!=null) {

                    List<CTTableColumn> tableColumns = table.getCTTable().getTableColumns().getTableColumnList();

                    XSSFSheet sheet = table.getXSSFSheet();

                    int startRow = table.getStartCellReference().getRow();
                    // In mappings created with Microsoft Excel the first row contains the table header and must be skipped
                    startRow +=1;

                    int endRow = table.getEndCellReference().getRow();

                    for(int i = startRow; i<= endRow; i++) {
                        XSSFRow row = sheet.getRow(i);

                        Node tableRootNode = getNodeByXPath(table.getCommonXpath(),doc.getFirstChild(),doc,true);

                        short startColumnIndex = table.getStartCellReference().getCol();
                        for (int j = startColumnIndex; j <= table.getEndCellReference().getCol(); j++) {
                            XSSFCell cell = row.getCell(j);
                            if (cell != null) {
                                int tableColumnIndex = j - startColumnIndex;
                                if (tableColumnIndex < tableColumns.size()) { 
                                    CTTableColumn ctTableColumn = tableColumns.get(tableColumnIndex);
                                    if (ctTableColumn.getXmlColumnPr() != null) {
                                        XSSFXmlColumnPr pointer = new XSSFXmlColumnPr(table, ctTableColumn,
                                                ctTableColumn.getXmlColumnPr());
                                        String localXPath = pointer.getLocalXPath();
                                        Node currentNode = getNodeByXPath(localXPath,tableRootNode,doc,false);
                                        mapCellOnNode(cell,currentNode);
                                    }
                                }
                            }
                        }
                    }
                }
            } /*else {
                // TODO:  implement filtering management in xpath
            }*/
        }

        boolean isValid = true;
        if (validate) {
            isValid =isValid(doc);
        }

        if (isValid) {

            /////////////////
            //Output the XML

            //set up a transformer
            TransformerFactory transfac = TransformerFactory.newInstance();
            Transformer trans = transfac.newTransformer();
            trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            trans.setOutputProperty(OutputKeys.INDENT, "yes");
            trans.setOutputProperty(OutputKeys.ENCODING, encoding);

            //create string from xml tree

            StreamResult result = new StreamResult(os);
            DOMSource source = new DOMSource(doc);
            trans.transform(source, result);

        }
    }

