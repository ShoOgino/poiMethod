	/**
	 * Exports the data in an XML stream
	 * 
	 * @param os OutputStream in which will contain the output XML
	 * @param encoding the output charset encoding 
	 * @param validate if true, validates the XML againts the XML Schema
	 * @throws SAXException
	 * @throws InvalidFormatException
	 */
	
	public void exportToXML(OutputStream os, String encoding, boolean validate) throws SAXException{
		List<XSSFSingleXmlCell> singleXMLCells = map.getRelatedSingleXMLCell();
		List<Table> tables = map.getRelatedTables();
		
		String rootElement = map.getCtMap().getRootElement();
		
		try{
			
			Document doc = getEmptyDocument();
			
	        Element root = null;
	
	        if(isNamespaceDeclared()){
	        	 root=doc.createElementNS(getNamespace(),rootElement);        	
	        }else{ 
	        	root=doc.createElement(rootElement);
	        }
	        doc.appendChild(root);
	        
	        
	        List<String> xpaths = new Vector<String>();
	        Map<String,XSSFSingleXmlCell> singleXmlCellsMappings = new HashMap<String,XSSFSingleXmlCell>();
	        Map<String,Table> tableMappings = new HashMap<String,Table>();
	        
	        for(XSSFSingleXmlCell simpleXmlCell : singleXMLCells){
	        	xpaths.add(simpleXmlCell.getXpath());
	        	singleXmlCellsMappings.put(simpleXmlCell.getXpath(), simpleXmlCell);
	        }
	        for(Table table : tables){
	        	String commonXPath = table.getCommonXpath();
	        	xpaths.add(commonXPath);
	        	tableMappings.put(commonXPath, table);
	        }
	        
	        
	        Collections.sort(xpaths,this);
	        
	        for(String xpath : xpaths){
	        	
	        		XSSFSingleXmlCell simpleXmlCell = singleXmlCellsMappings.get(xpath);
	        		Table table = tableMappings.get(xpath);		
	        		
	        		if(!xpath.matches(".*\\[.*")){
	        			
	        			// Exports elements and attributes mapped with simpleXmlCell
	        			if(simpleXmlCell!=null){
	        				XSSFCell cell = simpleXmlCell.getReferencedCell();
	        				if(cell!=null){
				        		Node currentNode = getNodeByXPath(xpath,doc.getFirstChild(),doc,false);
				        		STXmlDataType.Enum dataType = simpleXmlCell.getXmlDataType();        		
				        		mapCellOnNode(cell,currentNode,dataType);	
	        				}
	        			}
	        			
	        			// Exports elements and attributes mapped with tables
	        			if(table!=null){
	        				
	        				List<XSSFXmlColumnPr> tableColumns = table.getXmlColumnPrs();
	        				
	        				XSSFSheet sheet = table.getXSSFSheet();
	        				
	        				int startRow = table.getStartCellReference().getRow();
	        				// In mappings created with Microsoft Excel the first row contains the table header and must be skipped
	        				startRow +=1;
	        				
	        				int endRow = table.getEndCellReference().getRow();
	        				
	        				for(int i = startRow; i<= endRow; i++){
	        					XSSFRow row = sheet.getRow(i);
	        					
	        					Node tableRootNode = getNodeByXPath(table.getCommonXpath(),doc.getFirstChild(),doc,true);
	        					
	        					short startColumnIndex = table.getStartCellReference().getCol();
	        					for(int j = startColumnIndex; j<= table.getEndCellReference().getCol();j++){
	        						XSSFCell cell = row.getCell(j);
	        						if(cell!=null){
		        						XSSFXmlColumnPr pointer = tableColumns.get(j-startColumnIndex);
		        						String localXPath = pointer.getLocalXPath();
		        						Node currentNode = getNodeByXPath(localXPath,tableRootNode,doc,false);
		        						STXmlDataType.Enum dataType = pointer.getXmlDataType();
		        						
		        						
		        						mapCellOnNode(cell,currentNode,dataType);
	        						}
	        					
	        					}
	        					
	        				}
	        				
	        				
	        				
	        			}
	        		}else{
	        			// TODO:  implement filtering management in xpath
	        		}
	        }
	        
	        boolean isValid = true;
	        if(validate){
	        	isValid =isValid(doc);
	        }
	        
	   
	
	        if(isValid){
				
				/////////////////
		        //Output the XML
		
		        //set up a transformer
		        TransformerFactory transfac = TransformerFactory.newInstance();
		        Transformer trans = transfac.newTransformer();
		        trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
		        trans.setOutputProperty(OutputKeys.INDENT, "yes");
		        trans.setOutputProperty(OutputKeys.ENCODING, encoding);
		        
		        //create string from xml tree
		       
		        StreamResult result = new StreamResult(os);
		        DOMSource source = new DOMSource(doc);
		        trans.transform(source, result);
			
	        }
        }catch(ParserConfigurationException e){
			e.printStackTrace();
		}catch(TransformerException e){
			e.printStackTrace();
		}

		
	}

