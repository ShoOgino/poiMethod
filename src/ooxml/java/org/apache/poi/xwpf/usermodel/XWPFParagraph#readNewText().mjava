    protected String readNewText() {
      StringBuffer text = new StringBuffer();
      
      // All the runs to loop over
      // TODO - replace this with some sort of XPath expression
      // to directly find all the CTRs, in the right order
      ArrayList<CTR> rs = new ArrayList<CTR>();
      rs.addAll( paragraph.getRList() );
      
      for (CTSdtRun sdt : paragraph.getSdtList()) {
          CTSdtContentRun run = sdt.getSdtContent();
          rs.addAll( run.getRList() );
      }
      for (CTRunTrackChange c : paragraph.getDelList()) {
          rs.addAll( c.getRList() );
      }
      for (CTRunTrackChange c : paragraph.getInsList()) {
          rs.addAll( c.getRList() );
      }

      // Get text of the paragraph
      for (int j = 0; j < rs.size(); j++) {
          // Grab the text and tabs of the paragraph
          // Do so in a way that preserves the ordering
          XmlCursor c = rs.get(j).newCursor();
          c.selectPath("./*");
          while (c.toNextSelection()) {
              XmlObject o = c.getObject();
              if (o instanceof CTText) {
                  String tagName = o.getDomNode().getNodeName();
                  // Field Codes (w:instrText, defined in spec sec. 17.16.23)
                  //  come up as instances of CTText, but we don't want them
                  //  in the normal text output
                  if (!"w:instrText".equals(tagName)) {
                     text.append(((CTText) o).getStringValue());
                  }
              }
              if (o instanceof CTPTab) {
                  text.append("\t");
              }
              if (o instanceof CTEmpty) {
                 // Some inline text elements get returned not as
                 //  themselves, but as CTEmpty, owing to some odd
                 //  definitions around line 5642 of the XSDs
                 String tagName = o.getDomNode().getNodeName();
                 if ("w:tab".equals(tagName)) {
                    text.append("\t");
                 }
                 if ("w:cr".equals(tagName)) {
                    text.append("\n");
                 }
              }
              
              // Check for bits that only apply when
              //  attached to a core document
              if(document != null) {
                 //got a reference to a footnote
                 if (o instanceof CTFtnEdnRef) {
                     CTFtnEdnRef ftn = (CTFtnEdnRef) o;
                     footnoteText.append("[").append(ftn.getId()).append(": ");
                     XWPFFootnote footnote =
                             ftn.getDomNode().getLocalName().equals("footnoteReference") ?
                                     document.getFootnoteByID(ftn.getId().intValue()) :
                                     document.getEndnoteByID(ftn.getId().intValue());
   
                     boolean first = true;
                     for (XWPFParagraph p : footnote.getParagraphs()) {
                         if (!first) {
                             footnoteText.append("\n");
                             first = false;
                         }
                         footnoteText.append(p.getText());
                     }
   
                     footnoteText.append("]");
                 }
              }
          }

          // Loop over pictures inside our
          // paragraph, looking for text in them
          for(CTPicture pict : rs.get(j).getPictList()) {
              XmlObject[] t = pict
                      .selectPath("declare namespace w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' .//w:t");
              for (int m = 0; m < t.length; m++) {
                  NodeList kids = t[m].getDomNode().getChildNodes();
                  for (int n = 0; n < kids.getLength(); n++) {
                      if (kids.item(n) instanceof Text) {
                          pictureText.append("\n");
                          pictureText.append(kids.item(n).getNodeValue());
                      }
                  }
              }
          }
      }
      
      this.text = text;
      return text.toString();
    }

