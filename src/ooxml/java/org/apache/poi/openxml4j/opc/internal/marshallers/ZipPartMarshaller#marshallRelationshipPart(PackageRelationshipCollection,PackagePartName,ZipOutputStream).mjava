	/**
	 * Save relationships into the part.
	 * 
	 * @param rels
	 *            The relationships collection to marshall.
	 * @param relPartURI
	 *            Part name of the relationship part to marshall.
	 * @param zos
	 *            Zip output stream in which to save the XML content of the
	 *            relationships serialization.
	 */
	public static boolean marshallRelationshipPart(
			PackageRelationshipCollection rels, PackagePartName relPartName,
			ZipOutputStream zos) {
		// Building xml
		Document xmlOutDoc = DocumentHelper.createDocument();
		// make something like <Relationships
		// xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
		Namespace dfNs = Namespace.get("", PackageNamespaces.RELATIONSHIPS);
		Element root = xmlOutDoc.addElement(new QName(
				PackageRelationship.RELATIONSHIPS_TAG_NAME, dfNs));

		// <Relationship
		// TargetMode="External"
		// Id="rIdx"
		// Target="http://www.custom.com/images/pic1.jpg"
		// Type="http://www.custom.com/external-resource"/>

		URI sourcePartURI = PackagingURIHelper
				.getSourcePartUriFromRelationshipPartUri(relPartName.getURI());

		for (PackageRelationship rel : rels) {
			// L'�l�ment de la relation
			Element relElem = root
					.addElement(PackageRelationship.RELATIONSHIP_TAG_NAME);

			// L'attribut ID
			relElem.addAttribute(PackageRelationship.ID_ATTRIBUTE_NAME, rel
					.getId());

			// L'attribut Type
			relElem.addAttribute(PackageRelationship.TYPE_ATTRIBUTE_NAME, rel
					.getRelationshipType());

			// L'attribut Target
			String targetValue;
			URI uri = rel.getTargetURI();
			if (rel.getTargetMode() == TargetMode.EXTERNAL) {
				// Save the target as-is - we don't need to validate it,
				//  alter it etc
                targetValue = uri.toString();

				// add TargetMode attribut (as it is external link external)
				relElem.addAttribute(
						PackageRelationship.TARGET_MODE_ATTRIBUTE_NAME,
						"External");
			} else {
				targetValue = PackagingURIHelper.relativizeURI(
						sourcePartURI, rel.getTargetURI()).getPath();
			}
			relElem.addAttribute(PackageRelationship.TARGET_ATTRIBUTE_NAME,
					targetValue);
		}

		xmlOutDoc.normalize();

		// String schemaFilename = Configuration.getPathForXmlSchema()+
		// File.separator + "opc-relationships.xsd";

		// Save part in zip
		ZipEntry ctEntry = new ZipEntry(ZipHelper.getZipURIFromOPCName(
				relPartName.getURI().toASCIIString()).getPath());
		try {
			// Cr�ation de l'entr�e dans le fichier ZIP
			zos.putNextEntry(ctEntry);
			if (!StreamHelper.saveXmlInStream(xmlOutDoc, zos)) {
				return false;
			}
			zos.closeEntry();
		} catch (IOException e) {
			logger.error("Cannot create zip entry " + relPartName, e);
			return false;
		}
		return true; // success
	}

