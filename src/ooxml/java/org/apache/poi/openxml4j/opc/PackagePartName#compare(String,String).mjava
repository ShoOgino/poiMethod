    /**
     * A natural sort order for strings, consistent with the
     * requirements of {@code java.util.Comparator}, but simply implemented
     * as a static method.
     * <p>
     * For example, this sorts "file10.png" after "file2.png" (comparing the
     * numerical portion), but sorts "File10.png" before "file2.png"
     * (lexigraphical sort)
     */
    public static int compare(String str1, String str2)
    {
        if (str1 == null)
        {
            // (null) == (null), (null) < (non-null)
            return (str2 == null ? 0 : -1);
        }
        else if (str2 == null)
        {
            // (non-null) > (null)
            return 1;
        }

        int len1 = str1.length();
        int len2 = str2.length();
        for (int idx1 = 0, idx2 = 0; idx1 < len1 && idx2 < len2; /*nil*/)
        {
            char c1 = str1.charAt(idx1++);
            char c2 = str2.charAt(idx2++);

            if (Character.isDigit(c1) && Character.isDigit(c2))
            {
                int beg1 = idx1 - 1;  // undo previous increment
                while (idx1 < len1 && Character.isDigit(str1.charAt(idx1)))
                {
                    ++idx1;
                }

                int beg2 = idx2 - 1;  // undo previous increment
                while (idx2 < len2 && Character.isDigit(str2.charAt(idx2)))
                {
                    ++idx2;
                }

                // note: BigInteger for extra safety
                int cmp = new BigInteger(str1.substring(beg1, idx1)).compareTo
                (
                    new BigInteger(str2.substring(beg2, idx2))
                );
                if (cmp != 0) return cmp;
            }
            else if (c1 != c2)
            {
                return (c1 - c2);
            }
        }

        return (len1 - len2);
    }

