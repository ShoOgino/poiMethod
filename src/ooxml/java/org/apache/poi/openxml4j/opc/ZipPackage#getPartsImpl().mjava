	/**
	 * Retrieves the parts from this package. We assume that the package has not
	 * been yet inspect to retrieve all the parts, this method will open the
	 * archive and look for all parts contain inside it. If the package part
	 * list is not empty, it will be emptied.
	 * 
	 * @return All parts contain in this package.
	 * @throws InvalidFormatException
	 *             Throws if the package is not valid.
	 */
	@Override
	protected PackagePart[] getPartsImpl() throws InvalidFormatException {
		if (this.partList == null) {
			// The package has just been created, we create an empty part
			// list.
			this.partList = new PackagePartCollection();
		}

		if (this.zipArchive == null) {
			return this.partList.values().toArray(
					new PackagePart[this.partList.values().size()]);
		} else {
			// First we need to parse the content type part
			Enumeration<? extends ZipEntry> entries = this.zipArchive.getEntries();
			while (entries.hasMoreElements()) {
				ZipEntry entry = entries.nextElement();
				if (entry.getName().equals(
						ContentTypeManager.CONTENT_TYPES_PART_NAME)) {
					try {
						this.contentTypeManager = new ZipContentTypeManager(
								getZipArchive().getInputStream(entry), this);
					} catch (IOException e) {
						throw new InvalidFormatException(e.getMessage());
					}
					break;
				}
			}

			// At this point, we should have loaded the content type part
			if (this.contentTypeManager == null) {
				throw new InvalidFormatException(
						"Package should contain a content type part [M1.13]");
			}
			
			// Now create all the relationships
			// (Need to create relationships before other
			//  parts, otherwise we might create a part before
			//  its relationship exists, and then it won't tie up)
			entries = this.zipArchive.getEntries();
			while (entries.hasMoreElements()) {
				ZipEntry entry = (ZipEntry) entries.nextElement();
				PackagePartName partName = buildPartName(entry);
				if(partName == null) continue;
				
				// Only proceed for Relationships at this stage
				String contentType = contentTypeManager.getContentType(partName);
				if (contentType != null && contentType.equals(ContentTypes.RELATIONSHIPS_PART)) {
					try {
						partList.put(partName, new ZipPackagePart(this, entry,
							partName, contentType));
					} catch (InvalidOperationException e) {
						throw new InvalidFormatException(e.getMessage());
					}
				}
			}

			// Then we can go through all the other parts
			entries = this.zipArchive.getEntries();
			while (entries.hasMoreElements()) {
				ZipEntry entry = (ZipEntry) entries.nextElement();
				PackagePartName partName = buildPartName(entry);
				if(partName == null) continue;

				String contentType = contentTypeManager
						.getContentType(partName);
				if (contentType != null && contentType.equals(ContentTypes.RELATIONSHIPS_PART)) {
					// Already handled
				}
				else if (contentType != null) {
					try {
						partList.put(partName, new ZipPackagePart(this, entry,
								partName, contentType));
					} catch (InvalidOperationException e) {
						throw new InvalidFormatException(e.getMessage());
					}
				} else {
					throw new InvalidFormatException(
							"The part "
									+ partName.getURI().getPath()
									+ " does not have any content type ! Rule: Package require content types when retrieving a part from a package. [M.1.14]");
				}
			}
			
			return (ZipPackagePart[]) partList.values().toArray(
					new ZipPackagePart[partList.size()]);
		}
	}

