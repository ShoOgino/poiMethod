    public static void main(String[] args) throws Exception {
        if (args.length == 0) {
            usage(null);
            return;
        }

        String slidenumStr = "-1";
        float scale = 1;
        File file = null;
        String format = "png";
        File outdir = null;
        String outfile = null;
        boolean quiet = false;
        String outPattern = OUTPUT_PAT_REGEX;
        File dumpfile = null;
        String fixSide = "scale";


        for (int i = 0; i < args.length; i++) {
            String opt = (i+1 < args.length) ? args[i+1] : null;
            switch (args[i]) {
                case "-scale":
                    scale = Float.parseFloat(opt);
                    i++;
                    break;
                case "-slide":
                    slidenumStr = opt;
                    i++;
                    break;
                case "-format":
                    format = opt;
                    i++;
                    break;
                case "-outdir":
                    outdir = new File(opt);
                    i++;
                    break;
                case "-outfile":
                    outfile = opt;
                    i++;
                    break;
                case "-outpat":
                    outPattern = opt;
                    i++;
                    break;
                case "-quiet":
                    quiet = true;
                    break;
                case "-dump":
                    dumpfile = new File(opt);
                    i++;
                    break;
                case "-fixside":
                    fixSide = opt.toLowerCase(Locale.ROOT);
                    i++;
                    break;
                default:
                    file = new File(args[i]);
                    break;
            }
        }

        if (file == null || !file.exists()) {
            usage("File not specified or it doesn't exist");
            return;
        }

        if (format == null || !format.matches("^(png|gif|jpg|null)$")) {
            usage("Invalid format given");
            return;
        }

        if (outdir == null) {
            outdir = file.getParentFile();
        }

        if (!"null".equals(format) && (outdir == null || !outdir.exists() || !outdir.isDirectory())) {
            usage("Output directory doesn't exist");
            return;
        }

        if (scale < 0) {
            usage("Invalid scale given");
            return;
        }

        if (!"long,short,width,height,scale".contains(fixSide)) {
            usage("<fixside> must be one of long / short / width / height");
            return;
        }

        if (!quiet) {
            System.out.println("Processing " + file);
        }


        try (MFProxy proxy = initProxy(file)) {
            final Set<Integer> slidenum = proxy.slideIndexes(slidenumStr);
            if (slidenum.isEmpty()) {
                usage("slidenum must be either -1 (for all) or within range: [1.." + proxy.getSlideCount() + "] for " + file);
                return;
            }

            final Dimension2D pgsize = proxy.getSize();
            final double lenSide;
            switch (fixSide) {
                default:
                case "scale":
                    lenSide = 1;
                    break;
                case "long":
                    lenSide = Math.max(pgsize.getWidth(), pgsize.getHeight());
                    break;
                case "short":
                    lenSide = Math.min(pgsize.getWidth(), pgsize.getHeight());
                    break;
                case "width":
                    lenSide = pgsize.getWidth();
                    break;
                case "height":
                    lenSide = pgsize.getHeight();
                    break;
            }

            final int width = Math.toIntExact(Math.round(pgsize.getWidth() * scale / lenSide));
            final int height = Math.toIntExact(Math.round(pgsize.getHeight() * scale / lenSide));


            for (int slideNo : slidenum) {
                proxy.setSlideNo(slideNo);
                if (!quiet) {
                    String title = proxy.getTitle();
                    System.out.println("Rendering slide " + (slideNo + 1) + (title == null ? "" : ": " + title.trim()));
                }

                GenericRecord gr = proxy.getRoot();
                if (dumpfile != null) {
                    try (GenericRecordJsonWriter fw = new GenericRecordJsonWriter(dumpfile)) {
                        if (gr == null) {
                            fw.writeError(file.getName()+" doesn't support GenericRecord interface and can't be dumped to a file.");
                        } else {
                            fw.write(gr);
                        }
                    }
                }

                BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
                Graphics2D graphics = img.createGraphics();

                // default rendering options
                graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                graphics.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                graphics.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_SPEED);
                graphics.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
                graphics.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
                graphics.setRenderingHint(Drawable.BUFFERED_IMAGE, new WeakReference<>(img));

                graphics.scale(scale / lenSide, scale / lenSide);

                graphics.setComposite(AlphaComposite.Clear);
                graphics.fillRect(0, 0, (int)width, (int)height);
                graphics.setComposite(AlphaComposite.SrcOver);

                // draw stuff
                proxy.draw(graphics);

                // save the result
                if (!"null".equals(format)) {
                    String inname = String.format(Locale.ROOT, "%04d|%s|%s", slideNo, format, file.getName());
                    String outpat = (proxy.getSlideCount() > 1 ? outPattern : outPattern.replaceAll("-?\\$\\{slideno\\}", ""));
                    String outname = (outfile != null) ? outfile : INPUT_PATTERN.matcher(inname).replaceAll(outpat);
                    ImageIO.write(img, format, new File(outdir, outname));
                }

                graphics.dispose();
                img.flush();
            }
        }

        if (!quiet) {
            System.out.println("Done");
        }
    }

