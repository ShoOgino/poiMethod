    @SuppressWarnings("WeakerAccess")
    protected static PaintStyle selectPaint(final CTGradientFillProperties gradFill, CTSchemeColor phClr, final XSLFTheme theme) {

        @SuppressWarnings("deprecation")
        final CTGradientStop[] gs = gradFill.getGsLst() == null ?
                new CTGradientStop[0] : gradFill.getGsLst().getGsArray();

        Arrays.sort(gs, (o1, o2) -> {
            int pos1 = o1.getPos();
            int pos2 = o2.getPos();
            return Integer.compare(pos1, pos2);
        });

        final ColorStyle[] cs = new ColorStyle[gs.length];
        final float[] fractions = new float[gs.length];

        int i=0;
        for (CTGradientStop cgs : gs) {
            CTSchemeColor phClrCgs = phClr;
            if (phClrCgs == null && cgs.isSetSchemeClr()) {
                phClrCgs = cgs.getSchemeClr();
            }
            cs[i] = new XSLFColor(cgs, theme, phClrCgs).getColorStyle();
            fractions[i] = cgs.getPos() / 100000.f;
            i++;
        }

        return new GradientPaint() {

            @Override
            public double getGradientAngle() {
                return (gradFill.isSetLin())
                    ? gradFill.getLin().getAng() / 60000.d
                    : 0;
            }

            @Override
            public ColorStyle[] getGradientColors() {
                return cs;
            }

            @Override
            public float[] getGradientFractions() {
                return fractions;
            }

            @Override
            public boolean isRotatedWithShape() {
                return gradFill.getRotWithShape();
            }

            @Override
            public GradientType getGradientType() {
                if (gradFill.isSetLin()) {
                    return GradientType.linear;
                }

                if (gradFill.isSetPath()) {
                    /* TODO: handle rect path */
                    STPathShadeType.Enum ps = gradFill.getPath().getPath();
                    if (ps == STPathShadeType.CIRCLE) {
                        return GradientType.circular;
                    } else if (ps == STPathShadeType.SHAPE) {
                        return GradientType.shape;
                    }
                }

                return GradientType.linear;
            }
        };
    }

