    /**
     * @return the line compound
     */
    public LineCompound getLineCompound() {
        PropertyFetcher<Integer> fetcher = new PropertyFetcher<Integer>() {
            public boolean fetch(XSLFShape shape) {
                CTShapeProperties spPr = shape.getSpPr();
                CTLineProperties ln = spPr.getLn();
                if (ln != null) {
                    STCompoundLine.Enum stCmpd = ln.getCmpd();
                    if (stCmpd != null) {
                        setValue(stCmpd.intValue());
                        return true;
                    }
                }
                return false;
            }
        };
        fetchShapeProperty(fetcher);

        Integer cmpd = fetcher.getValue();
        if (cmpd == null) {
            CTLineProperties defaultLn = getDefaultLineProperties();
            if (defaultLn != null) {
                STCompoundLine.Enum stCmpd = defaultLn.getCmpd();
                if (stCmpd != null) {
                    cmpd = stCmpd.intValue();
                }
            }
        }
        
        if (cmpd == null) return null;

        switch (cmpd) {
        default:
        case STCompoundLine.INT_SNG:
            return LineCompound.SINGLE;
        case STCompoundLine.INT_DBL:
            return LineCompound.DOUBLE;
        case STCompoundLine.INT_THICK_THIN:
            return LineCompound.THICK_THIN;
        case STCompoundLine.INT_THIN_THICK:
            return LineCompound.THIN_THICK;
        case STCompoundLine.INT_TRI:
            return LineCompound.TRIPLE;
        }
    }

