    @SuppressWarnings("deprecation") //  getXYZArray() array accessors are deprecated
    protected Paint getPaint(Graphics2D graphics, XmlObject spPr) {
        XSLFTheme theme = getSheet().getTheme();
        Rectangle2D anchor = getAnchor();

        Paint paint = null;
        for(XmlObject obj : spPr.selectPath("*")){
            if(obj instanceof CTNoFillProperties){
                paint = null;
                break;
            }
            if(obj instanceof CTSolidColorFillProperties){
                CTSolidColorFillProperties solidFill = (CTSolidColorFillProperties)obj;
                XSLFColor c = new XSLFColor(solidFill, theme);
                paint = c.getColor();
            }
            if(obj instanceof CTBlipFillProperties){
                CTBlipFillProperties blipFill = (CTBlipFillProperties)obj;
                CTBlip blip = blipFill.getBlip();
                String blipId = blip.getEmbed();
                PackagePart p = getSheet().getPackagePart();
                PackageRelationship rel = p.getRelationship(blipId);
                if (rel != null) {
                    XSLFImageRendener renderer = null;
                    if(graphics != null) renderer = (XSLFImageRendener)graphics.getRenderingHint(XSLFRenderingHint.IMAGE_RENDERER);
                    if(renderer == null) renderer = new XSLFImageRendener();

                    try {
                        BufferedImage img = renderer.readImage(p.getRelatedPart(rel).getInputStream());
                        if(blip.sizeOfAlphaModFixArray() > 0){
                            float alpha = blip.getAlphaModFixArray(0).getAmt()/100000.f;
                            AlphaComposite ac = AlphaComposite.getInstance(
                                                   AlphaComposite.SRC_OVER, alpha);
                            if(graphics != null) graphics.setComposite(ac);
                        }

                        paint = new TexturePaint(
                                img, new Rectangle2D.Double(0, 0, img.getWidth(), img.getHeight()));
                    }
                    catch (Exception e) {
                        return null;
                    }
                }
            }
            if(obj instanceof CTGradientFillProperties){
                CTGradientFillProperties gradFill = (CTGradientFillProperties)obj;
                double angle;
                if(gradFill.isSetLin()) {
                    angle = gradFill.getLin().getAng() / 60000;
                } else {
                    // XSLF only supports linear gradient fills. Other types are filled as liner with angle=90 degrees
                    angle = 90;
                }
                CTGradientStop[] gs =  gradFill.getGsLst().getGsArray();

                Arrays.sort(gs, new Comparator<CTGradientStop>(){
                    public int compare(CTGradientStop o1, CTGradientStop o2){
                        Integer pos1 = o1.getPos();
                        Integer pos2 = o2.getPos();
                        return pos1.compareTo(pos2);
                    }
                });

                Color[] colors = new Color[gs.length];
                float[] fractions = new float[gs.length];

                AffineTransform at = AffineTransform.getRotateInstance(
                        Math.toRadians(angle),
                        anchor.getX() + anchor.getWidth()/2,
                        anchor.getY() + anchor.getHeight()/2);

                double diagonal = Math.sqrt(anchor.getHeight()*anchor.getHeight() + anchor.getWidth()*anchor.getWidth());
                Point2D p1 = new Point2D.Double(anchor.getX() + anchor.getWidth()/2 - diagonal/2,
                        anchor.getY() + anchor.getHeight()/2);
                p1 = at.transform(p1, null);

                Point2D p2 = new Point2D.Double(anchor.getX() + anchor.getWidth(), anchor.getY() + anchor.getHeight()/2);
                p2 = at.transform(p2, null);

                norm(p1, anchor);
                norm(p2, anchor);

                for(int i = 0; i < gs.length; i++){
                    CTGradientStop stop = gs[i];
                    colors[i] = new XSLFColor(stop, theme).getColor();
                    fractions[i] = stop.getPos() / 100000.f;
                }

                paint = createGradientPaint(p1, p2, fractions, colors);
            }
        }
        return paint;
    }

