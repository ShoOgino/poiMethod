    /**
     * Convert shape fill into java.awt.Paint. The result is either Color or
     * TexturePaint or GradientPaint or null
     *
     * @param graphics  the target graphics
     * @param obj       the xml to read. Must contain elements from the EG_ColorChoice group:
     * <code>
     *     a:scrgbClr    RGB Color Model - Percentage Variant
     *     a:srgbClr    RGB Color Model - Hex Variant
     *     a:hslClr    Hue, Saturation, Luminance Color Model
     *     a:sysClr    System Color
     *     a:schemeClr    Scheme Color
     *     a:prstClr    Preset Color
     *  </code>
     *
     * @param phClr     context color
     * @param parentPart    the parent package part. Any external references (images, etc.) are resolved relative to it.
     *
     * @return  the applied Paint or null if none was applied
     */
    protected PaintStyle selectPaint(XmlObject obj, final CTSchemeColor phClr, final PackagePart parentPart) {
        if (obj instanceof CTNoFillProperties) {
            return PaintStyle.TRANSPARENT_PAINT;
        } else if (obj instanceof CTSolidColorFillProperties) {
            return selectPaint((CTSolidColorFillProperties)obj, phClr, parentPart);
        } else if (obj instanceof CTBlipFillProperties) {
            return selectPaint((CTBlipFillProperties)obj, phClr, parentPart);
        } else if (obj instanceof CTGradientFillProperties) {
            return selectPaint((CTGradientFillProperties) obj, phClr, parentPart);
        } else if (obj instanceof CTStyleMatrixReference) {
            return selectPaint((CTStyleMatrixReference)obj);
        } else {
            return null;
        }
    }

