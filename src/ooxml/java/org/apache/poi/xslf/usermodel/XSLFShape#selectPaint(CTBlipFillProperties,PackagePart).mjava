    @SuppressWarnings("WeakerAccess")
    protected static PaintStyle selectPaint(final CTBlipFillProperties blipFill, final PackagePart parentPart) {
        final CTBlip blip = blipFill.getBlip();
        return new TexturePaint() {
            private PackagePart getPart() {
                try {
                    String blipId = blip.getEmbed();
                    PackageRelationship rel = parentPart.getRelationship(blipId);
                    return parentPart.getRelatedPart(rel);
                } catch (InvalidFormatException e) {
                    throw new RuntimeException(e);
                }
            }

            @Override
            public InputStream getImageData() {
                try {
                    return getPart().getInputStream();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }

            @Override
            public String getContentType() {
                if (blip == null || !blip.isSetEmbed() || blip.getEmbed().isEmpty()) {
                    return null;
                }
                /* TOOD: map content-type */
                return getPart().getContentType();
            }

            @Override
            public int getAlpha() {
                return (blip.sizeOfAlphaModFixArray() > 0)
                    ? blip.getAlphaModFixArray(0).getAmt()
                    : 100000;
            }

            @Override
            public boolean isRotatedWithShape() {
                return blipFill.isSetRotWithShape() && blipFill.getRotWithShape();
            }

            @Override
            public Dimension2D getScale() {
                CTTileInfoProperties tile = blipFill.getTile();
                return (tile == null) ? null : new Dimension2DDouble(
                    tile.isSetSx() ? tile.getSx()/100_000. : 1,
                    tile.isSetSy() ? tile.getSy()/100_000. : 1);
            }

            @Override
            public Point2D getOffset() {
                CTTileInfoProperties tile = blipFill.getTile();
                return (tile == null) ? null : new Point2D.Double(
                        tile.isSetTx() ? Units.toPoints(tile.getTx()) : 0,
                        tile.isSetTy() ? Units.toPoints(tile.getTy()) : 0);
            }

            @Override
            public FlipMode getFlipMode() {
                CTTileInfoProperties tile = blipFill.getTile();
                switch (tile == null || tile.getFlip() == null ? STTileFlipMode.INT_NONE : tile.getFlip().intValue()) {
                    default:
                    case STTileFlipMode.INT_NONE:
                        return FlipMode.NONE;
                    case STTileFlipMode.INT_X:
                        return FlipMode.X;
                    case STTileFlipMode.INT_Y:
                        return FlipMode.Y;
                    case STTileFlipMode.INT_XY:
                        return FlipMode.XY;
                }
            }

            @Override
            public TextureAlignment getAlignment() {
                CTTileInfoProperties tile = blipFill.getTile();
                return (tile == null || !tile.isSetAlgn()) ? null
                    : TextureAlignment.fromOoxmlId(tile.getAlgn().toString());
            }
        };
    }

