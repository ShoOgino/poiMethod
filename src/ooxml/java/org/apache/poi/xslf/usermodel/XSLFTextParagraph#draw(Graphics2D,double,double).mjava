    public double draw(Graphics2D graphics, double x, double y){
        double leftInset = _shape.getLeftInset();
        double rightInset = _shape.getRightInset();
        Rectangle2D anchor = _shape.getAnchor();
        double penY = y;

        double leftMargin = getLeftMargin();
        boolean firstLine = true;
        double indent = getIndent();

        //The vertical line spacing
        double spacing = getLineSpacing();
        for(TextFragment line : _lines){
            double penX = x + leftMargin;

            if(firstLine) {
                if(_bullet != null){
                    if(indent < 0) {
                        // a negative value means "Hanging" indentation and
                        // indicates the position of the actual bullet character.
                        // (the bullet is shifted to right relative to the text)
                        _bullet.draw(graphics, penX + indent,  penY);
                    } else if(indent > 0){
                        // a positive value means the "First Line" indentation:
                        // the first line is indented and other lines start at the bullet ofset
                        _bullet.draw(graphics, penX,  penY);
                        penX += indent;
                    } else {
                        // a zero indent means that the bullet and text have the same offset
                        _bullet.draw(graphics, penX,  penY);

                        // don't let text overlay the bullet and advance by the bullet width
                        penX += _bullet._layout.getAdvance() + 1;
                    }
                } else {
                    penX += indent;
                }
            }


            switch (getTextAlign()) {
                case CENTER:
                    penX += (anchor.getWidth() - leftMargin - line.getWidth() - leftInset - rightInset) / 2;
                    break;
                case RIGHT:
                    penX += (anchor.getWidth() - line.getWidth() - leftInset - rightInset);
                    break;
                default:
                    break;
            }

            line.draw(graphics, penX,  penY);

            if(spacing > 0) {
                // If linespacing >= 0, then linespacing is a percentage of normal line height.
                penY += spacing*0.01* line.getHeight();
            } else {
                // positive value means absolute spacing in points
                penY += -spacing;
            }

            firstLine = false;
        }
        
        return penY - y;
    }

