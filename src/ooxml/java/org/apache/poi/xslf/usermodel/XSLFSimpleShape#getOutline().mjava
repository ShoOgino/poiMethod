    @Override
    protected java.awt.Shape getOutline(){
        PresetGeometries dict = PresetGeometries.getInstance();
        CTShapeProperties spPr = getSpPr();
        String name;
        if(spPr.isSetPrstGeom()) {
            name = spPr.getPrstGeom().getPrst().toString();
        } else {
            name = "rect";
        }
        CustomGeometry geom = dict.get(name);
        Rectangle2D anchor = getAnchor();
        if(geom != null) {
            // the guides in the shape definitions are all defined relative to each other,
            // so we build the path starting from (0,0).
            final Rectangle2D anchorEmu = new Rectangle2D.Double(
                    0,
                    0,
                    Units.toEMU(anchor.getWidth()),
                    Units.toEMU(anchor.getHeight())
            );

            GeneralPath path = new GeneralPath();
            Context ctx = new Context(geom, new IAdjustableShape() {
                public Rectangle2D getAnchor() {
                    return anchorEmu;
                }

                public Guide getAdjustValue(String name) {
                    CTPresetGeometry2D prst = getSpPr().getPrstGeom();
                    if(prst.isSetAvLst()) {
                        for(CTGeomGuide g : prst.getAvLst().getGdList()){
                            if(g.getName().equals(name)) {
                                return new Guide(g);
                            }
                        }
                    }
                    return null;
                }
            });

            for(Path p : geom){
                path.append( p.getPath(ctx) , false);
            }

            // translate the result to the canvas coordinates in points
            AffineTransform at = new AffineTransform();
            at.scale(
                    1.0/Units.EMU_PER_POINT, 1.0/Units.EMU_PER_POINT);
            at.translate(Units.toEMU(anchor.getX()), Units.toEMU(anchor.getY()));
            return at.createTransformedShape(path);
        } else {
            return anchor;
        }
     }

