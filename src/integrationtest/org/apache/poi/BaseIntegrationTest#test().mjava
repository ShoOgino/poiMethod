	public void test() throws Exception {
        assertNotNull("Unknown file extension for file: " + file + ": " + TestAllFiles.getExtension(file), handler);

        File inputFile = new File(rootDir, file);
        try {
            try {
                handleFile(inputFile);
            } catch (IllegalArgumentException e) {
                handleWrongFileExtension(inputFile, e);
                return;
            }
        } catch (OfficeXmlFileException e) {
        	// check if the file-extension is wrong
        	if(!e.getMessage().contains("data appears to be in the Office 2007")) {
				// use XWPF instead of HWPF and XSSF instead of HSSF as the file seems to have the wrong extension
				handleWrongOLE2XMLExtension(inputFile, e);
				return;
        	}

			throw e;
        } catch (OldFileFormatException e) {
        	if (e.getClass().equals(OldFileFormatException.class)) {
				// Not even text extraction is supported for these: handler.handleExtracting(inputFile);
				Assume.assumeFalse("File " + file + " excluded because it is unsupported old Excel format", true);
			}
			// otherwise try at least to perform extracting tests on these old files
        } catch (EncryptedDocumentException e) {
        	// Do not try to read encrypted files
			Assume.assumeFalse("File " + file + " excluded because it is password-encrypted", true);
        } catch (ZipException e) {
			// some files are corrupted
			if (e.getMessage().equals("unexpected EOF") || e.getMessage().equals("Truncated ZIP file")) {
				Assume.assumeFalse("File " + file + " excluded because the Zip file is incomplete", true);
			}

			throw e;
		} catch (IOException e) {
			// sometimes binary format has XML-format-extension...
			if(e.getMessage().contains("rong file format or file extension for OO XML file")) {
				handleWrongOLE2XMLExtension(inputFile, e);
				return;
			}

			throw e;
        } catch (IllegalArgumentException e) {
        	// ignore errors for documents with incorrect extension
        	String message = e.getMessage();
			if(message != null && (message.equals("The document is really a RTF file") ||
        			message.equals("The document is really a PDF file") ||
					message.equals("The document is really a HTML file"))) {
				Assume.assumeFalse("File " + file + " excluded because it is actually a PDF/RTF/HTML file", true);
			}

			if(message != null && message.equals("The document is really a OOXML file")) {
				handleWrongOLE2XMLExtension(inputFile, e);
				return;
			}

			throw e;
        }

        try {
        	handler.handleExtracting(inputFile);
		} catch (EncryptedDocumentException e) {
			// Do not try to read encrypted files
			Assume.assumeFalse("File " + file + " excluded because it is password-encrypted", true);
		}
	}

