    public Component getTableCellRendererComponent(JTable table, Object value,
                          boolean isSelected, boolean hasFocus, int row, int column) {
	boolean isBorderSet = false;

	if (isSelected) {
	   setForeground(table.getSelectionForeground());
	   setBackground(table.getSelectionBackground());
	}

        //If the JTables default cell renderer has been setup correctly the
        //value will be the HSSFCell that we are trying to render
        HSSFCell c = (HSSFCell)value;

        if (c != null) {

          HSSFCellStyle s = c.getCellStyle();
          HSSFFont f = wb.getFontAt(s.getFontIndex());
          boolean isbold = f.getBoldweight() > HSSFFont.BOLDWEIGHT_NORMAL;
          boolean isitalics = f.getItalic();

          int fontstyle = Font.PLAIN;

          if (isbold) fontstyle = Font.BOLD;
          if (isitalics) fontstyle = fontstyle | Font.ITALIC;

          int fontheight = f.getFontHeightInPoints();
          if (fontheight == 9) fontheight = 10; //fix for stupid ol Windows

          Font font = new Font(f.getFontName(),fontstyle,fontheight);
          setFont(font);
          
          HSSFColor clr = null;
          if (s.getFillPattern() == HSSFCellStyle.SOLID_FOREGROUND) {
            clr = (HSSFColor)colors.get(new Integer(s.getFillForegroundColor()));
          }
          if (clr == null) clr = new HSSFColor.WHITE();

          short[] rgb = clr.getTriplet();
          Color awtcolor = new Color(rgb[0],rgb[1],rgb[2]);

          setBackground(awtcolor);

          clr = (HSSFColor)colors.get(new Integer(f.getColor()));
          if (clr == null) clr = new HSSFColor.BLACK();
          rgb = clr.getTriplet();
          awtcolor = new Color(rgb[0],rgb[1],rgb[2]);
          setForeground(awtcolor);

/*          if (s.getBorderBottom() != HSSFCellStyle.BORDER_NONE ||
              s.getBorderTop()    != HSSFCellStyle.BORDER_NONE ||
              s.getBorderLeft()   != HSSFCellStyle.BORDER_NONE ||
              s.getBorderRight()  != HSSFCellStyle.BORDER_NONE) {
*/
              int borderTop = s.getBorderTop();
              int borderRight = s.getBorderRight();
              int borderBottom = s.getBorderBottom();
              int borderLeft = s.getBorderLeft();
              
              //OUCH! This could causing rendering performance problems.
              //Need to somehow create once and store
              SVBorder border = new SVBorder(Color.black, Color.black,
                                           Color.black, Color.black,
                                           borderTop, borderRight,
                                           borderBottom, borderLeft,
                                           s.getBorderTop() != HSSFCellStyle.BORDER_NONE,
                                           s.getBorderRight() != HSSFCellStyle.BORDER_NONE,
                                           s.getBorderBottom() != HSSFCellStyle.BORDER_NONE,
                                           s.getBorderLeft() != HSSFCellStyle.BORDER_NONE);
              setBorder(border);
              isBorderSet=true;

              //Set the value that is rendered for the cell
          switch (c.getCellType()) {
            case HSSFCell.CELL_TYPE_BLANK:
              setValue("");
            break;
            case HSSFCell.CELL_TYPE_BOOLEAN:
              if (c.getBooleanCellValue()) {
                setValue("true");
              } else {
                setValue("false");
              }
            break;
            case HSSFCell.CELL_TYPE_FORMULA:
            case HSSFCell.CELL_TYPE_NUMERIC:
              setValue(""+c.getNumericCellValue());
            break;
            case HSSFCell.CELL_TYPE_STRING:
              setValue(c.getStringCellValue());
            break;
            default:
              setValue("?");
          }
              //Set the text alignment of the cell
              switch (s.getAlignment()) {
                case HSSFCellStyle.ALIGN_GENERAL:
                case HSSFCellStyle.ALIGN_LEFT:
                case HSSFCellStyle.ALIGN_JUSTIFY:
                case HSSFCellStyle.ALIGN_FILL:
                  setHorizontalAlignment(SwingConstants.LEFT);
                  break;
                case HSSFCellStyle.ALIGN_CENTER:
                case HSSFCellStyle.ALIGN_CENTER_SELECTION:
                  setHorizontalAlignment(SwingConstants.CENTER);
                  break;
                case HSSFCellStyle.ALIGN_RIGHT:
                  setHorizontalAlignment(SwingConstants.RIGHT);
                  break;
                default:
                  setHorizontalAlignment(SwingConstants.LEFT);
                  break;
              }
//          }
       } else {
           setValue("");
          setBackground(Color.white);
       }


	if (hasFocus) {
            if (!isBorderSet) {
	        setBorder( UIManager.getBorder("Table.focusCellHighlightBorder") );
            }
	    if (table.isCellEditable(row, column)) {
	        setForeground( UIManager.getColor("Table.focusCellForeground") );
	        setBackground( UIManager.getColor("Table.focusCellBackground") );
	    }
	} else if (!isBorderSet) {
	    setBorder(noFocusBorder);
	}

	// ---- begin optimization to avoid painting background ----
	Color back = getBackground();
	boolean colorMatch = (back != null) && ( back.equals(table.getBackground()) ) && table.isOpaque();
        setOpaque(!colorMatch);
	// ---- end optimization to aviod painting background ----

	return this;
    }

