    // create a workbook, validate and write back
    void testSS(SlideShow ppt) throws Exception {
        Slide<?, ?> slide = ppt.createSlide();

        TextBox<?, ?> box1 = slide.createTextBox();
        box1.setTextPlaceholder(TextShape.TextPlaceholder.TITLE);
        box1.setText("HSLF in a Nutshell");
        box1.setAnchor(new Rectangle(36, 15, 648, 65));

        TextBox<?, ?> box2 = slide.createTextBox();
        box2.setTextPlaceholder(TextShape.TextPlaceholder.BODY);
        box2.setText(
                "HSLF provides a way to read, create and modify MS PowerPoint presentations\r" +
                        "Pure Java API - you don't need PowerPoint to read and write *.ppt files\r" +
                        "Comprehensive support of PowerPoint objects\r" +
                        "Rich text\r" +
                        "Tables\r" +
                        "Shapes\r" +
                        "Pictures\r" +
                        "Master slides\r" +
                        "Access to low level data structures"
        );

        List<? extends TextParagraph<?, ?, ?>> tp = box2.getTextParagraphs();
        for (int i : new byte[]{0, 1, 2, 8}) {
            tp.get(i).getTextRuns().get(0).setFontSize(28d);
        }
        for (int i : new byte[]{3, 4, 5, 6, 7}) {
            tp.get(i).getTextRuns().get(0).setFontSize(24d);
            tp.get(i).setIndentLevel(1);
        }
        box2.setAnchor(new Rectangle(36, 80, 648, 400));

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ppt.write(baos);
        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());

        ppt = SlideShowFactory.create(bais);
        assertEquals(1, ppt.getSlides().size());
        slide = (Slide) ppt.getSlides().iterator().next();
        assertEquals(2, slide.getShapes().size());
    }

