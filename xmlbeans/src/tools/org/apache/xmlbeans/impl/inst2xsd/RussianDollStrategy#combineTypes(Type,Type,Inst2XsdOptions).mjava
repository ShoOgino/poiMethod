    protected void combineTypes(Type into, Type with, Inst2XsdOptions options)
    {
        if (into==with)
            return;

        if (into.isGlobal() && with.isGlobal() && into.getName().equals(with.getName()))
            return;


        if (into.getContentType()==Type.SIMPLE_TYPE_SIMPLE_CONTENT &&
            with.getContentType()==Type.SIMPLE_TYPE_SIMPLE_CONTENT)
        {
            combineSimpleTypes(into, with, options);
            return;
        }

        if ((into.getContentType()==Type.SIMPLE_TYPE_SIMPLE_CONTENT ||
            into.getContentType()==Type.COMPLEX_TYPE_SIMPLE_CONTENT) &&
            (with.getContentType()==Type.SIMPLE_TYPE_SIMPLE_CONTENT ||
            with.getContentType()==Type.COMPLEX_TYPE_SIMPLE_CONTENT) )
        {
            // take the extension name if it's a complex type
            QName intoTypeName = into.isComplexType() ? into.getExtensionType().getName() : into.getName();
            QName withTypeName = with.isComplexType() ? with.getExtensionType().getName() : with.getName();

            //complex type simple content
            into.setContentType(Type.COMPLEX_TYPE_SIMPLE_CONTENT);

            QName moreGeneralTypeName = combineToMoreGeneralSimpleType(intoTypeName, withTypeName);
            if (into.isComplexType())
            {
                Type extendedType = Type.createNamedType(moreGeneralTypeName, Type.SIMPLE_TYPE_SIMPLE_CONTENT);
                into.setExtensionType(extendedType);
            }
            else
                into.setName(moreGeneralTypeName);

            combineAttributesOfTypes(into, with);
            return;
        }

        if (into.getContentType()==Type.COMPLEX_TYPE_COMPLEX_CONTENT &&
            with.getContentType()==Type.COMPLEX_TYPE_COMPLEX_CONTENT)
        {
            combineAttributesOfTypes(into, with);
            combineElementsOfTypes(into, with, false, options);
            return;
        }

        if (into.getContentType()==Type.SIMPLE_TYPE_SIMPLE_CONTENT ||
            into.getContentType()==Type.COMPLEX_TYPE_SIMPLE_CONTENT ||
            with.getContentType()==Type.SIMPLE_TYPE_SIMPLE_CONTENT ||
            with.getContentType()==Type.COMPLEX_TYPE_SIMPLE_CONTENT)
        {
            into.setContentType(Type.COMPLEX_TYPE_MIXED_CONTENT);
            combineAttributesOfTypes(into, with);
            combineElementsOfTypes(into, with, true, options);
            return;
        }

        if ((into.getContentType()==Type.SIMPLE_TYPE_SIMPLE_CONTENT ||
            into.getContentType()==Type.COMPLEX_TYPE_SIMPLE_CONTENT ||
            into.getContentType()==Type.COMPLEX_TYPE_COMPLEX_CONTENT ||
            into.getContentType()==Type.COMPLEX_TYPE_MIXED_CONTENT) &&
            (with.getContentType()==Type.SIMPLE_TYPE_SIMPLE_CONTENT ||
            with.getContentType()==Type.COMPLEX_TYPE_SIMPLE_CONTENT ||
            with.getContentType()==Type.COMPLEX_TYPE_COMPLEX_CONTENT ||
            with.getContentType()==Type.COMPLEX_TYPE_MIXED_CONTENT) )
        {
            into.setContentType(Type.COMPLEX_TYPE_MIXED_CONTENT);
            combineAttributesOfTypes(into, with);
            combineElementsOfTypes(into, with, false, options);
            return;
        }

        throw new IllegalArgumentException("Unknown content type.");
    }

