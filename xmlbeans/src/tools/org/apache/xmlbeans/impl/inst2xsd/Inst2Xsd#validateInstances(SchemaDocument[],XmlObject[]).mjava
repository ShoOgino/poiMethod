    private static boolean validateInstances(SchemaDocument[] sDocs, XmlObject[] instances)
    {
        SchemaTypeLoader sLoader;
        Collection compErrors = new ArrayList();
        XmlOptions schemaOptions = new XmlOptions();
        schemaOptions.setErrorListener(compErrors);
        try
        {
            sLoader = XmlBeans.loadXsd(sDocs, schemaOptions);
        }
        catch (Exception e)
        {
            if (compErrors.isEmpty() || !(e instanceof XmlException))
            {
                e.printStackTrace(System.out);
            }
            System.out.println("\n-------------------\n\nInvalid schemas.");
            for (Iterator errors = compErrors.iterator(); errors.hasNext(); )
            {
                XmlError xe = (XmlError)errors.next();
                System.out.println(xe.getLine() + ":" + xe.getColumn() + " " + xe.getMessage());
            }
            return false;
        }

        System.out.println("\n-------------------");
        boolean result = true;

        for (int i = 0; i < instances.length; i++)
        {
            XmlObject xobj;

            try
            {
                xobj = sLoader.parse( instances[i].newXMLStreamReader(), null, new XmlOptions().setLoadLineNumbers() );
            }
            catch (XmlException e)
            {
                System.out.println("Error:\n" + instances[i].documentProperties().getSourceName() + " not loadable: " + e);
                e.printStackTrace(System.out);
                result = false;
                continue;
            }

            Collection errors = new ArrayList();

            if (xobj.schemaType() == XmlObject.type)
            {
                System.out.println(instances[i].documentProperties().getSourceName() + " NOT valid.  ");
                System.out.println("  Document type not found." );
                result = false;
            }
            else if (xobj.validate(new XmlOptions().setErrorListener(errors)))
                System.out.println("Instance[" + i + "] valid - " + instances[i].documentProperties().getSourceName());
            else
            {
                System.out.println("Instance[" + i + "] NOT valid - " + instances[i].documentProperties().getSourceName());
                for (Iterator it = errors.iterator(); it.hasNext(); )
                {
                    XmlError xe = (XmlError)it.next();
                    System.out.println(xe.getLine() + ":" + xe.getColumn() + " " + xe.getMessage());
                }
                result = false;
            }
        }

        return result;
    }

