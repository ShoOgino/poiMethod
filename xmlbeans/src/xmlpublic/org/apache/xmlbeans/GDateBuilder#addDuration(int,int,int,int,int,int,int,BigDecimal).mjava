    /**
     * Adds a given duration to the date/time.
     * 
     * @param sign +1 to add, -1 to subtract
     * @param year the number of years to add
     * @param month the number of months to add
     * @param day the number of days to add
     * @param hour the number of hours to add
     * @param minute the number of minutes to add
     * @param second the number of seconds to add
     * @param fraction the number of fractional seconds to add (may be null)
     */
    public void addDuration(int sign, int year, int month, int day,
                            int hour, int minute, int second, BigDecimal fraction)
    {
        boolean timemath = hour != 0 || minute != 0 || second != 0 || fraction != null && fraction.signum() != 0;
        if (timemath && !hasTime())
            throw new IllegalStateException("cannot do time math without a complete time");
        boolean datemath = hasDay() && (day != 0 || timemath);
        if (datemath && !hasDate())
            throw new IllegalStateException("cannot do date math without a complete date");

        int temp;

        // months + years are easy
        if (month != 0 || year != 0)
        {
            // Prepare the _D to be pegged before changing month
            if (hasDay())
                _normalizeDate();

            // Add months and years
            temp = _M + sign * month;
            _M = _modulo(temp, 1, 13);
            _CY = _CY + sign * year + (int)_fQuotient(temp, 1, 13);

            // In new month, day may need to be pegged before proceeding
            if (hasDay())
            {
                assert(_D >= 1);
                temp = _maxDayInMonthFor(_CY, _M);
                if (_D > temp)
                    _D = temp;
            }
        }

        long carry = 0;

        if (timemath)
        {
            // fractions
            if (fraction != null && fraction.signum() != 0)
            {
                if (_fs.signum() == 0 && sign == 1)
                    _fs = fraction;
                else
                    _fs = (sign == 1) ? _fs.add(fraction) : _fs.subtract(fraction);
            }

            // seconds, minutes, hours
            _s += sign * second;
            _m += sign * minute;
            _h += sign * hour;

            // normalize time
            carry = _normalizeTime();
        }

        if (datemath)
        {
            // days: may require renormalization
            _D += sign * day + carry;
            _normalizeDate();
        }
    }

