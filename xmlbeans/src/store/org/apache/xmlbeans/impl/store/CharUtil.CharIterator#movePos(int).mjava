        public void movePos ( int newPos )
        {
            assert newPos >= 0 && newPos <= _cchRoot;

            if (newPos < _minPos || newPos > _maxPos)
            {
                // if newPos out of cached leaf, recache new leaf
                Object  src    = _srcRoot;
                int     off    = _offRoot + newPos;
                int     cch    = _cchRoot;

                for ( _offLeaf = _offRoot ; src instanceof CharJoin ; )
                {
                    CharJoin j = (CharJoin) src;

                    if (off < j._cchLeft)
                    {
                        src = j._srcLeft;
                        _offLeaf = j._offLeft;
                        off = off + j._offLeft;
                        cch = j._cchLeft;
                    }
                    else
                    {
                        src = j._srcRight;
                        _offLeaf = j._offRight;
                        off = off - (j._cchLeft - j._offRight);
                        cch = cch - j._cchLeft;
                    }
                }

//                _offLeaf = off - Math.min( off - _offLeaf, newPos );
                _minPos = newPos - (off - _offLeaf);
//                _maxPos = newPos + Math.min( _cchRoot - newPos, sizeof( src ) - off );
                _maxPos = _minPos + cch;

                if (newPos < _cchRoot)
                    _maxPos--;

                // Cache the leaf src to avoid instanceof for every char
                
                _srcLeafChars = null;
                _srcLeafString = null;

                if (src instanceof char[])
                    _srcLeafChars = (char[]) src;
                else
                    _srcLeafString = (String) src;
                
                assert newPos >= _minPos && newPos <= _maxPos;
            }

            _pos = newPos;
        }

