    public static void validateValue(float v, SchemaType sType, ValidationContext context)
    {
        XmlObject x;
        float f;

        if ((x = sType.getFacet(SchemaType.FACET_MIN_EXCLUSIVE)) != null)
        {
            if (compare(v, f = ((XmlObjectBase)x).floatValue()) <= 0)
            {
                context.invalid(XmlErrorCodes.DATATYPE_MIN_EXCLUSIVE_VALID,
                    new Object[] { "float", new Float(v), new Float(f), QNameHelper.readable(sType) });
            }
        }

        if ((x = sType.getFacet(SchemaType.FACET_MIN_INCLUSIVE)) != null)
        {
            if (compare(v, f = ((XmlObjectBase)x).floatValue()) < 0)
            {
                context.invalid(XmlErrorCodes.DATATYPE_MIN_INCLUSIVE_VALID,
                    new Object[] { "float", new Float(v), new Float(f), QNameHelper.readable(sType) });
            }
        }
        
        if ((x = sType.getFacet(SchemaType.FACET_MAX_INCLUSIVE)) != null)
        {
            if (compare(v, f = ((XmlObjectBase)x).floatValue()) > 0)
            {
                context.invalid(XmlErrorCodes.DATATYPE_MAX_INCLUSIVE_VALID,
                    new Object[] { "float", new Float(v), new Float(f), QNameHelper.readable(sType) });
            }
        }
        
        if ((x = sType.getFacet(SchemaType.FACET_MAX_EXCLUSIVE)) != null)
        {
            if (compare(v, f = ((XmlObjectBase)x).floatValue()) >= 0)
            {
                context.invalid(XmlErrorCodes.DATATYPE_MAX_EXCLUSIVE_VALID,
                    new Object[] { "float", new Float(v), new Float(f), QNameHelper.readable(sType) });
            }
        }
        
        XmlObject[] vals = sType.getEnumerationValues();
        if (vals != null)
        {
            for (int i = 0; i < vals.length; i++)
                if (compare(v, ((XmlObjectBase)vals[i]).floatValue()) == 0)
                    return;
            context.invalid(XmlErrorCodes.DATATYPE_ENUM_VALID,
                new Object[] { "float", new Float(v), QNameHelper.readable(sType) });
        }
    }

