    public static String printDecimal(BigDecimal value)
    {
        // We can't simply use value.toString() here, because in JDK1.5 that returns an
        // exponent String and exponents are not allowed in XMLSchema decimal values
        // The following code comes from Apache Harmony
        String intStr = value.unscaledValue().toString();
        int scale = value.scale();
        if ((scale == 0) || ((value.longValue() == 0) && (scale < 0)))
            return intStr;

        int begin = (value.signum() < 0) ? 1 : 0;
        int delta = scale;
        // We take space for all digits, plus a possible decimal point, plus 'scale'
        StringBuffer result = new StringBuffer(intStr.length() + 1 + Math.abs(scale));

        if (begin == 1)
        {
            // If the number is negative, we insert a '-' character at front 
            result.append('-');
        }
        if (scale > 0)
        {
            delta -= (intStr.length() - begin);
            if (delta >= 0)
            {
                result.append("0."); //$NON-NLS-1$
                // To append zeros after the decimal point
                for (; delta > CH_ZEROS.length; delta -= CH_ZEROS.length)
                    result.append(CH_ZEROS);
                result.append(CH_ZEROS, 0, delta);
                result.append(intStr.substring(begin));
            }
            else
            {
                delta = begin - delta;
                result.append(intStr.substring(begin, delta));
                result.append('.');
                result.append(intStr.substring(delta));
            }
        }
        else
        {// (scale <= 0)
            result.append(intStr.substring(begin));
            // To append trailing zeros
            for (; delta < -CH_ZEROS.length; delta += CH_ZEROS.length)
                result.append(CH_ZEROS);
            result.append(CH_ZEROS, 0, -delta);
        }
        return result.toString();
    }

