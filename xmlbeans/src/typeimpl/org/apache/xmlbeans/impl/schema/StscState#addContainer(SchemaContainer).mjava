    private void addContainer(SchemaContainer container)
    {
        _containers.put(container.getNamespace(), container);
        List redefModelGroups = container.redefinedModelGroups();
        for (int i = 0; i < redefModelGroups.size(); i++)
        {
            QName name = ((SchemaModelGroup) redefModelGroups.get(i)).getName();
            _redefinedModelGroups.put(name, redefModelGroups.get(i));
        }

        List redefAttrGroups = container.redefinedAttributeGroups();
        for (int i = 0; i < redefAttrGroups.size(); i++)
        {
            QName name = ((SchemaAttributeGroup) redefAttrGroups.get(i)).getName();
            _redefinedAttributeGroups.put(name, redefAttrGroups.get(i));
        }

        List redefTypes = container.redefinedGlobalTypes();
        for (int i = 0; i < redefTypes.size(); i++)
        {
            QName name = ((SchemaType) redefTypes.get(i)).getName();
            _redefinedGlobalTypes.put(name, redefTypes.get(i));
        }

        List globalElems = container.globalElements();
        for (int i = 0; i < globalElems.size(); i++)
        {
            QName name = ((SchemaGlobalElement) globalElems.get(i)).getName();
            _globalElements.put(name, globalElems.get(i));
        }

        List globalAtts = container.globalAttributes();
        for (int i = 0; i < globalAtts.size(); i++)
        {
            QName name = ((SchemaGlobalAttribute) globalAtts.get(i)).getName();
            _globalAttributes.put(name, globalAtts.get(i));
        }

        List modelGroups = container.modelGroups();
        for (int i = 0; i < modelGroups.size(); i++)
        {
            QName name = ((SchemaModelGroup) modelGroups.get(i)).getName();
            _modelGroups.put(name, modelGroups.get(i));
        }

        List attrGroups = container.attributeGroups();
        for (int i = 0; i < attrGroups.size(); i++)
        {
            QName name = ((SchemaAttributeGroup) attrGroups.get(i)).getName();
            _attributeGroups.put(name, attrGroups.get(i));
        }

        List globalTypes = container.globalTypes();
        for (int i = 0; i < globalTypes.size(); i++)
        {
            SchemaType t = (SchemaType) globalTypes.get(i);
            QName name = t.getName();
            _globalTypes.put(name, t);
            if (t.getFullJavaName() != null)
                addClassname(t.getFullJavaName(), t);
        }

        List documentTypes = container.documentTypes();
        for (int i = 0; i < documentTypes.size(); i++)
        {
            SchemaType t = (SchemaType) documentTypes.get(i);
            QName name = t.getProperties()[0].getName();
            _documentTypes.put(name, t);
            if (t.getFullJavaName() != null)
                addClassname(t.getFullJavaName(), t);
        }

        List attributeTypes = container.attributeTypes();
        for (int i = 0; i < attributeTypes.size(); i++)
        {
            SchemaType t = (SchemaType) attributeTypes.get(i);
            QName name = t.getProperties()[0].getName();
            _attributeTypes.put(name, t);
            if (t.getFullJavaName() != null)
                addClassname(t.getFullJavaName(), t);
        }

        List identityConstraints = container.identityConstraints();
        for (int i = 0; i < identityConstraints.size(); i++)
        {
            QName name = ((SchemaIdentityConstraint) identityConstraints.get(i)).getName();
            _idConstraints.put(name, identityConstraints.get(i));
        }

        _annotations.addAll(container.annotations());
        _namespaces.add(container.getNamespace());
        container.unsetImmutable();
    }

