    private void emitSpecializedAccessors(SchemaType sType) throws IOException
    {
        if (sType.getSimpleVariety() == SchemaType.ATOMIC &&
            sType.getPrimitiveType().getBuiltinTypeCode() == SchemaType.BTC_DECIMAL)
        {
            int bits = sType.getDecimalSize();
            int parentBits = sType.getBaseType().getDecimalSize();
            if (bits != parentBits || sType.getBaseType().getFullJavaName() == null)
            {
                if (bits == SchemaType.SIZE_BIG_INTEGER)
                {
                    emit("java.math.BigInteger getBigIntegerValue();");
                    emit("void setBigIntegerValue(java.math.BigInteger bi);");
                    emit("/** @deprecated */");
                    if (_useJava15)
                        emit("@Deprecated");
                    emit("java.math.BigInteger bigIntegerValue();");
                    emit("/** @deprecated */");
                    if (_useJava15)
                        emit("@Deprecated");
                    emit("void set(java.math.BigInteger bi);");
                }
                else if (bits == SchemaType.SIZE_LONG)
                {
                    emit("long getLongValue();");
                    emit("void setLongValue(long l);");
                    emit("/** @deprecated */");
                    if (_useJava15)
                        emit("@Deprecated");
                    emit("long longValue();");
                    emit("/** @deprecated */");
                    if (_useJava15)
                        emit("@Deprecated");
                    emit("void set(long l);");
                }
                else if (bits == SchemaType.SIZE_INT)
                {
                    emit("int getIntValue();");
                    emit("void setIntValue(int i);");
                    emit("/** @deprecated */");
                    if (_useJava15)
                        emit("@Deprecated");
                    emit("int intValue();");
                    emit("/** @deprecated */");
                    if (_useJava15)
                        emit("@Deprecated");
                    emit("void set(int i);");
                }
                else if (bits == SchemaType.SIZE_SHORT)
                {
                    emit("short getShortValue();");
                    emit("void setShortValue(short s);");
                    emit("/** @deprecated */");
                    if (_useJava15)
                        emit("@Deprecated");
                    emit("short shortValue();");
                    emit("/** @deprecated */");
                    if (_useJava15)
                        emit("@Deprecated");
                    emit("void set(short s);");
                }
                else if (bits == SchemaType.SIZE_BYTE)
                {
                    emit("byte getByteValue();");
                    emit("void setByteValue(byte b);");
                    emit("/** @deprecated */");
                    if (_useJava15)
                        emit("@Deprecated");
                    emit("byte byteValue();");
                    emit("/** @deprecated */");
                    if (_useJava15)
                        emit("@Deprecated");
                    emit("void set(byte b);");
                }
            }
        }

        if (sType.getSimpleVariety() == SchemaType.UNION)
        {
            emit("java.lang.Object getObjectValue();");
            emit("void setObjectValue(java.lang.Object val);");
            emit("/** @deprecated */");
            if (_useJava15)
                emit("@Deprecated");
            emit("java.lang.Object objectValue();");
            emit("/** @deprecated */");
            if (_useJava15)
                emit("@Deprecated");
            emit("void objectSet(java.lang.Object val);");
            emit("org.apache.xmlbeans.SchemaType instanceType();");
            SchemaType ctype = sType.getUnionCommonBaseType();
            if (ctype != null && ctype.getSimpleVariety() != SchemaType.UNION);
                emitSpecializedAccessors(ctype);
        }

        if (sType.getSimpleVariety() == SchemaType.LIST)
        {
            emit("java.util.List getListValue();");
            emit("java.util.List xgetListValue();");
            emit("void setListValue(java.util.List list);");
            emit("/** @deprecated */");
            if (_useJava15)
                emit("@Deprecated");
            emit("java.util.List listValue();");
            emit("/** @deprecated */");
            if (_useJava15)
                emit("@Deprecated");
            emit("java.util.List xlistValue();");
            emit("/** @deprecated */");
            if (_useJava15)
                emit("@Deprecated");
            emit("void set(java.util.List list);");
        }
    }

