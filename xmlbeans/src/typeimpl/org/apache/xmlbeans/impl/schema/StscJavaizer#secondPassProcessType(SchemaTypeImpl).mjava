    static void secondPassProcessType(SchemaTypeImpl sImpl)
    {
        if (isStringType(sImpl))
        {
            XmlAnySimpleType[] enumVals = sImpl.getEnumerationValues();

            // if this is an enumerated string type, values are to be
            // javaized as constants.
            if (enumVals != null)
            {
                //ERROR is found at > 3668
                if (enumVals.length > MAX_ENUM_COUNT)
                {
                    StscState.get().warning("SchemaType Enumeration found with too many enumeration values " +
                        "to create a Java enumeration. The base SchemaType \"" +
                        sImpl.getBaseEnumType() + "\" will be used instead", XmlError.SEVERITY_WARNING, null);

                    sImpl = (SchemaTypeImpl) sImpl.getBaseEnumType();
                }
                else
                {
                    SchemaStringEnumEntry[] entryArray = new SchemaStringEnumEntry[enumVals.length];
                    SchemaType basedOn = sImpl.getBaseEnumType();
                    if (basedOn == sImpl)
                    {
                        Set usedNames = new HashSet();
                        for (int i = 0; i < enumVals.length; i++)
                        {
                            String val = enumVals[i].getStringValue();

                            entryArray[i] = new SchemaStringEnumEntryImpl(val, i + 1, pickConstantName(usedNames, val));
                        }
                    }
                    else
                    {
                        for (int i = 0; i < enumVals.length; i++)
                        {
                            String val = enumVals[i].getStringValue();
                            entryArray[i] = basedOn.enumEntryForString(val);
                        }
                    }
                    sImpl.setStringEnumEntries(entryArray);
                }
            }
        }
    }

