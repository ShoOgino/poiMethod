    /**
     * The following code checks rule #5 of http://www.w3.org/TR/xmlschema-1/#coss-ct
     * as well as attribute + element default/fixed validity. <p/>
     * Checks that xs:NOTATION is not used directly
     */
    public static void checkFields(SchemaTypeImpl sType)
    {
        if (sType.isSimpleType())
            return;
        
        XmlObject location = sType.getParseObject();
        
        SchemaAttributeModel sAttrModel = sType.getAttributeModel();
        if (sAttrModel != null)
        {
            SchemaLocalAttribute[] sAttrs  = sAttrModel.getAttributes();
            QName idAttr = null;
            for (int i = 0; i < sAttrs.length; i++)
            {
                XmlObject attrLocation = ((SchemaLocalAttributeImpl)sAttrs[i])._parseObject;
                if (XmlID.type.isAssignableFrom(sAttrs[i].getType()))
                {
                    if (idAttr == null)
                    {
                        idAttr = sAttrs[i].getName();
                    }
                    else
                    {
                        StscState.get().error(XmlErrorCodes.ATTR_GROUP_PROPERTIES$TWO_IDS,
                            new Object[]{ QNameHelper.pretty(idAttr), sAttrs[i].getName() },
                            attrLocation != null ? attrLocation : location);
                    }
                    if (sAttrs[i].getDefaultText() != null)
                    {
                        StscState.get().error(XmlErrorCodes.ATTR_PROPERTIES$ID_FIXED_OR_DEFAULT,
                            null, attrLocation != null ? attrLocation : location);
                    }
                }
                else if (XmlNOTATION.type.isAssignableFrom(sAttrs[i].getType()))
                {
                    if (sAttrs[i].getType().getBuiltinTypeCode() == SchemaType.BTC_NOTATION)
                    {
                        StscState.get().recover(XmlErrorCodes.ATTR_NOTATION_TYPE_FORBIDDEN,
                            new Object[]{ QNameHelper.pretty(sAttrs[i].getName()) },
                            attrLocation != null ? attrLocation : location);
                    }
                    else
                    {
                        if (sAttrs[i].getType().getSimpleVariety() == SchemaType.UNION)
                        {
                            SchemaType[] members = sAttrs[i].getType().getUnionConstituentTypes();
                            for (int j = 0; j < members.length; j++)
                                if (members[j].getBuiltinTypeCode() == SchemaType.BTC_NOTATION)
                                    StscState.get().recover(XmlErrorCodes.ATTR_NOTATION_TYPE_FORBIDDEN,
                                        new Object[]{ QNameHelper.pretty(sAttrs[i].getName()) },
                                        attrLocation != null ? attrLocation : location);
                        }
                        // Check that the Schema in which this is present doesn't have a targetNS
                        boolean hasNS;
                        if (sType.isAttributeType())
                            hasNS = sAttrs[i].getName().getNamespaceURI().length() > 0;
                        else
                        {
                            SchemaType t = sType;
                            while (t.getOuterType() != null)
                                t = t.getOuterType();
                            if (t.isDocumentType())
                                hasNS = t.getDocumentElementName().getNamespaceURI().length() > 0;
                            else hasNS = t.getName().getNamespaceURI().length() > 0;
                        }
                        if (hasNS)
                            StscState.get().warning(XmlErrorCodes.ATTR_COMPATIBILITY_TARGETNS,
                                new Object[] {QNameHelper.pretty(sAttrs[i].getName()) },
                                attrLocation != null ? attrLocation : location);
                    }
                }
                else
                {
                    String valueConstraint = sAttrs[i].getDefaultText();
                    if (valueConstraint != null)
                    {
                        try
                        {
                            XmlAnySimpleType val = sAttrs[i].getDefaultValue();
                            if (!val.validate())
                                throw new Exception();
                            
                            SchemaPropertyImpl sProp = (SchemaPropertyImpl)sType.getAttributeProperty(sAttrs[i].getName());
                            if (sProp != null && sProp.getDefaultText() != null)
                            {
                                sProp.setDefaultValue(new XmlValueRef(val));
                            }
                        }
                        catch (Exception e)
                        {
                            // move to 'fixed' or 'default' attribute on the attribute definition
                            String constraintName = (sAttrs[i].isFixed() ? "fixed" : "default");
                            XmlObject constraintLocation = location;
                            if (attrLocation != null)
                            {
                                constraintLocation = attrLocation.selectAttribute("", constraintName);
                                if (constraintLocation == null)
                                    constraintLocation = attrLocation;
                            }

                            StscState.get().error(XmlErrorCodes.ATTR_PROPERTIES$CONSTRAINT_VALID,
                                new Object[] { QNameHelper.pretty(sAttrs[i].getName()), 
                                               constraintName,
                                               valueConstraint,
                                               QNameHelper.pretty(sAttrs[i].getType().getName()) },
                                constraintLocation);
                        }
                    }
                }
            }
        }
        
        checkElementDefaults(sType.getContentModel(), location, sType);
    }

