    private static void particlesMatchingAfter(SchemaParticle part, QNameSetSpecification suspectSet, Map result, QNameSetBuilder eliminate, boolean top)
    {
        recurse: switch (part.getParticleType())
        {
            case SchemaParticle.CHOICE:
            case SchemaParticle.ALL:
                {
                    SchemaParticle[] children = part.getParticleChildren();
                    for (int i = 0; i < children.length; i++)
                        particlesMatchingAfter(children[i], suspectSet, result, eliminate, false);
                    break recurse;
                }
                
            case SchemaParticle.SEQUENCE:
                {
                    SchemaParticle[] children = part.getParticleChildren();
                    if (children.length == 0)
                        break recurse;
                    if (!children[children.length - 1].isSkippable())
                    {
                        particlesMatchingAfter(children[0], suspectSet, result, eliminate, false);
                        break recurse;
                    }
                    QNameSetBuilder remainingSuspects = new QNameSetBuilder(suspectSet);
                    QNameSetBuilder suspectsToEliminate = new QNameSetBuilder();
                    for (int i = children.length - 1; i >= 0; i--)
                    {
                        particlesMatchingAfter(children[i], remainingSuspects, result, suspectsToEliminate, false);
                        eliminate.addAll(suspectsToEliminate);
                        if (!children[i].isSkippable())
                            break recurse;
                        remainingSuspects.removeAll(suspectsToEliminate);
                        if (remainingSuspects.isEmpty())
                            break recurse;
                        suspectsToEliminate.clear();
                    }
                    break recurse;
                }
        }

        if (!top)
        {
            BigInteger minOccurs = part.getMinOccurs();
            BigInteger maxOccurs = part.getMaxOccurs();
            boolean varloop = (maxOccurs == null || minOccurs.compareTo(maxOccurs) < 0);
            if (varloop)
            {
                particlesMatchingStart(part, suspectSet, result, eliminate);
            }
        }
    }

