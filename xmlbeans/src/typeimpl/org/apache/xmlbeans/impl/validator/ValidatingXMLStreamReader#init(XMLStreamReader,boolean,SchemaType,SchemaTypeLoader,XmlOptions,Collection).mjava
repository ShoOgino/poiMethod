    /**
     * Used in case of reusing the same ValidatinXMLStreamReader object
     * @param xsr The stream to be validated
     * @param startWithCurrentEvent Validation will start if true with the current event or if false with the next event in the stream
     * @param contentType The schemaType of the content. This can be null for document and global Att validation
     * @param stl SchemaTypeLoader context of validation
     * @param options Validator options
     * @param errorListener Errors and warnings listener
     */
    public void init(XMLStreamReader xsr, boolean startWithCurrentEvent, SchemaType contentType,
                     SchemaTypeLoader stl, XmlOptions options, Collection errorListener)
    {
        _packTextXmlStreamReader.init(xsr);

//        setParent(xsr);
        setParent(_packTextXmlStreamReader);
        _contentType = contentType;
        _stl = stl;
        _options = options;
        _errorListener = errorListener;
//        _elemEvent.setXMLStreamReader(xsr);
//        _attEvent.setXMLStreamReader(xsr);
//        _simpleEvent.setXMLStreamReader(xsr);
        _elemEvent.setXMLStreamReader(_packTextXmlStreamReader);
        _attEvent.setXMLStreamReader(_packTextXmlStreamReader);
        _simpleEvent.setXMLStreamReader(_packTextXmlStreamReader);
        _validator = null;
        _state = STATE_FIRSTEVENT;
        if (_attNamesList!=null)
        {
            _attNamesList.clear();
            _attValuesList.clear();
        }
        _xsiType = null;
        _depth = 0;

        if (startWithCurrentEvent)
        {
            int evType = getEventType();
            validate_event(evType);
        }
    }

