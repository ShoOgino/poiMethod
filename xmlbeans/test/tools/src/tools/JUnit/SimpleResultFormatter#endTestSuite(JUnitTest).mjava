    /**
     * The whole testsuite ended.
     */
    public void endTestSuite(JUnitTest suite) throws BuildException {
        String newLine = System.getProperty("line.separator");
        StringBuffer sb = new StringBuffer("Testsuite: ");
        sb.append(suite.getName());
        sb.append(newLine);
        sb.append("Tests run: ");
        sb.append(suite.runCount());
        sb.append(", Failures: ");
        sb.append(suite.failureCount());
        sb.append(", Errors: ");
        sb.append(suite.errorCount());
        sb.append(", Time elapsed: ");
        sb.append(nf.format(suite.getRunTime() / 1000.0));
        sb.append(" sec");
        sb.append(newLine);
        //sb.append("DEBUG: " + records.size());
        sb.append("======================================================");
        Iterator it = records.iterator();

        while (it.hasNext())
        {
            TestRecord rec = (TestRecord) it.next();
            sb.append(newLine);
            sb.append("Test: " + rec.getTestname()).append(newLine);
            sb.append("Result: " + rec.getStatusString()).append(newLine);
            float diff = rec.getEndTime() - rec.getStartTime();
            sb.append("Start time: " + rec.getStartTime()).append(newLine);
            sb.append("End time  : " + rec.getEndTime()).append(newLine);
            sb.append("Execution time: " + diff/1000).append(newLine);
            sb.append("[STDOUT]").append(newLine);
            sb.append(rec.getSysout()).append(newLine);
            sb.append("[STDERR]").append(newLine);
            sb.append(rec.getSyserr()).append(newLine);

            if (rec.isFailure())
            {
                sb.append("[EXCEPTION]").append(newLine);
                sb.append(JUnitTestRunner.getFilteredTrace(rec.getThrowable()));
                sb.append(newLine);
            }
            sb.append("======================================================");
        }



        /*
        // append the err and output streams to the log
        if (systemOutput != null && systemOutput.length() > 0) {
            sb.append("------------- Standard Output ---------------")
                .append(newLine)
                .append(systemOutput)
                .append("------------- ---------------- ---------------")
                .append(newLine);
        }

        if (systemError != null && systemError.length() > 0) {
            sb.append("------------- Standard Error -----------------")
                .append(newLine)
                .append(systemError)
                .append("------------- ---------------- ---------------")
                .append(newLine);
        }

        sb.append(newLine);
        */
        if (out != null) {
            try {
                out.write(sb.toString().getBytes());
                wri.close();
                //out.write(inner.toString().getBytes());
                out.flush();
            } catch (IOException ioex) {
                throw new BuildException("Unable to write output", ioex);
            } finally {
                if (out != System.out && out != System.err) {
                    try {
                        out.close();
                    } catch (IOException e) {
                        // ignore
                    }
                }
            }
        }

    }

