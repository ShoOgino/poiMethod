    public void publishResults()
    {
        TestLogDocument logDoc = TestLogDocument.Factory.newInstance();
        TestLogDocument.TestLog log = logDoc.addNewTestLog();

        // Populate the attributes for test-log
        // testtype
        String testtype = System.getProperty("TESTTYPE", "AUTO");

        if (testtype.equalsIgnoreCase("AUTO"))
            log.setTesttype(TestLogDocument.TestLog.Testtype.AUTOMATED);
        else
            log.setTesttype(TestLogDocument.TestLog.Testtype.MANUAL);

        // runid
        String dateFormatStr = "_yy_MMM_dd_HH_mm_ss_SS";
        String dateStr = new SimpleDateFormat(dateFormatStr).format(new java.util.Date(startTime));
        String defRunId = System.getProperty("user.name").toUpperCase() + dateStr;
        String runId = System.getProperty("RUNID", defRunId);
        log.setRunid(runId);

        // hostname
        String hostname;

        try
        {
            hostname = java.net.InetAddress.getLocalHost().getHostName();
        } catch (Exception e)
        {
            // Ignore.. not critical
            hostname = "UNKNOWN_HOST";
        }

        log.setHostname(hostname);

        // TODO: set Defaults/check sysprop for other attributes

        // Add <environment> element
        EnvironmentType env = log.addNewEnvironment();
        Map envMap = new HashMap();
        envMap.put("JVM_NAME", System.getProperty("java.vm.name"));
        envMap.put("JVM_VENDOR", System.getProperty("java.vm.vendor"));
        envMap.put("JVM_VERSION", System.getProperty("java.vm.version"));
        envMap.put("OS", System.getProperty("os.name"));
        String defFreq = "checkin";
        envMap.put("Frequency", System.getProperty("test.run.frequency", defFreq));

        Iterator itr = envMap.keySet().iterator();

        int envCount = 0;
        while (itr.hasNext())
        {
            EnvironmentType.EnvAttribute envAttr = env.addNewEnvAttribute();
            String name = (String) itr.next();
            String value = (String) envMap.get(name);
            envAttr.setValue(value);
            envAttr.setName(name);
        }

        // Add <header-info> element
        TestLogDocument.TestLog.HeaderInfo hdrInfo = log.addNewHeaderInfo();
        hdrInfo.setResultcount(Integer.toString(testCount));
        hdrInfo.setChecksum(Integer.toString(testCount));
        hdrInfo.setExecdate(new java.util.Date(startTime).toString());
        hdrInfo.setExecaccount(System.getProperty("user.name"));

        // Add test-results
        Iterator rItr = records.iterator();

        while (rItr.hasNext())
        {
            TestResultType tr = log.addNewTestResult();
            tr.set(getTestResultType((TestRecord) rItr.next()));
        }

        // Publish it to the outputStream
        XmlOptions opts = new XmlOptions().setSavePrettyPrint();
        try
        {
            logOut.write(logDoc.xmlText(opts).getBytes());
        } catch (IOException ioe)
        {
            System.out.println("XmlResultFormatter: Unable to publish results");
            System.out.println(ioe.toString());
        }

    }

