    public void doMerge()
        throws IOException
    {
        TestLogDocument logDoc = TestLogDocument.Factory.newInstance();
        TestLog log = logDoc.addNewTestLog();
        File[] files = getXmlFiles(dir);
        int testCount = 0;
        ArrayList results = new ArrayList();
        for (int i = 0; i < files.length; i++)
        {
            try
            {
                TestResultContainerDocument doc =
                        TestResultContainerDocument.Factory.parse(files[i]);
                TestResultType[] resArr =
                        doc.getTestResultContainer().getTestResultArray();
                for (int j = 0; j < resArr.length; j++)
                {
                    log.addNewTestResult();
                    log.setTestResultArray(testCount++, resArr[j]);
                }
                info("Processed: " + files[i].getAbsolutePath(), INFO_VERBOSE);
            }
            catch (org.apache.xmlbeans.XmlException xe)
            {
                // Possible parse error
                info("Could not process " + files[i].getAbsolutePath(), INFO_NORMAL);
                info(xe.getMessage(), INFO_NORMAL);
            }
        }
        // Populate the attributes for test-log

        // testtype
        String testtype = System.getProperty("TESTTYPE", "AUTO");
        if (testtype.equalsIgnoreCase("AUTO"))
            log.setTesttype(TestLog.Testtype.AUTOMATED);
        else
            log.setTesttype(TestLog.Testtype.MANUAL);

        // runid
        String dateFormatStr = "_yy_MMM_dd_HH_mm_ss_SS";
        String dateStr = new SimpleDateFormat(dateFormatStr).format(new java.util.Date());
        String defRunId = System.getProperty("user.name").toUpperCase() + dateStr;
        String runId = System.getProperty("RUNID", defRunId);
        log.setRunid(runId);

        // hostname
        String hostname;
        try
        {
            hostname = java.net.InetAddress.getLocalHost().getHostName();
        } catch (Exception e)
        {
            // Ignore.. not critical
            hostname = "UNKNOWN_HOST";
            info("Could not get Hostname. Using UNKNOWN_HOST", INFO_VERBOSE);
        }
        log.setHostname(hostname);

        // TODO: set Defaults/check sysprop for other attributes

        // Add <environment> element
        EnvironmentType env = log.addNewEnvironment();
        Map envMap = new HashMap();
        envMap.put("JVM_NAME", System.getProperty("java.vm.name"));
        envMap.put("JVM_VENDOR", System.getProperty("java.vm.vendor"));
        envMap.put("JVM_VERSION", System.getProperty("java.vm.version"));
        envMap.put("OS", System.getProperty("os.name"));
        String defFreq = "checkin";
        envMap.put("Frequency", System.getProperty("test.run.frequency", defFreq));

        Iterator itr = envMap.keySet().iterator();
        int envCount = 0;
        while (itr.hasNext())
        {
            EnvironmentType.EnvAttribute envAttr = env.addNewEnvAttribute();
            String name = (String) itr.next();
            String value = (String) envMap.get(name);
            envAttr.setValue(value);
            envAttr.setName(name);
        }

        // Add <header-info> element
        HeaderInfo hdrInfo = log.addNewHeaderInfo();
        hdrInfo.setResultcount(Integer.toString(testCount));
        hdrInfo.setChecksum(Integer.toString(testCount));
        hdrInfo.setExecdate(log.getTestResultArray(0).getExectime());
        hdrInfo.setExecaccount(System.getProperty("user.name"));

        XmlOptions opts = new XmlOptions().setSavePrettyPrint();

        // Write it out the outfile
        FileOutputStream fos = null;
        try
        {
            outFile.delete();
            fos = new FileOutputStream(outFile);
            fos.write(logDoc.xmlText(opts).getBytes());
            info("Log files merged to " + outFile.getAbsolutePath(), INFO_NORMAL);
        }
        catch(IOException ioe)
        {
            info("Could not write to outfile file: " + outFile.getAbsolutePath(),
                 INFO_NORMAL);
            info(ioe.getMessage(), INFO_NORMAL);
        }
        finally
        {
            if (fos != null)
                fos.close();
        }

    }

