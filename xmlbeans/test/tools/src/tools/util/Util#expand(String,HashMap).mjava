    /**
     * Expand key/value pairs in a String.
     * Replaces patterns in the string of the form ${key} where
     * the keys and values are taken from the hash map.  I'm sure someone
     * could write this more efficiently if they wanted to.  Replacement is
     * recursive.  Eg, if the map contains the key "foo" with value "bar", the
     * string "My dog has ${foo}." will become "My dog has bar."  This version
     * uses the JDK 1.4 regex classes.
     *
     * @param str String to be expanded.
     * @param map Map of key value pairs.
     * @return The string after replacement.
     */
    public static String expand(String str, HashMap map)
    {
        final Pattern p = Pattern.compile("\\$\\{.+?\\}");

        if (str == null)
            return null;

        if (map == null)
            return str;

        int last = 0;
        StringBuffer buf = new StringBuffer();
        Matcher m = p.matcher(str);

        while (m.find())
        {

            // guarenteed to return ${key} where key is at least one character
            // in length.  match will never be null.
            String match = m.group();
            int start = m.start();
            int end = m.end();

            // remove the ${ and } from the match
            String key = match.substring("${".length(),
                                         match.length() - "}".length());

            if (map.containsKey(key))
            {
                String value = expand((String) map.get(key), map);

                buf.append(str.substring(last, start));
                buf.append(value);

                last = end;
            }
        }

        buf.append(str.substring(last, str.length()));

        return buf.toString();
    }

