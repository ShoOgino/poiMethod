    /**
     * Provides an utility to compare the xml inside the two cursors
     * @return true if the xml inside the two strings is leniently the same
     *   otherwise false
     */
    public static boolean lenientlyCompareTwoXmlStrings(XmlCursor cur1, XmlCursor cur2, Diagnostic diag)
    {
        boolean match = true;
        int depth = 0;
        while (cur1.currentTokenType() != XmlCursor.TokenType.STARTDOC)
        {
            if (!compareNamesAndAttributes(cur1, cur2, diag))
            {
                match = false;
            }

            boolean hasChildren1 = cur1.toFirstChild();
            boolean hasChildren2 = cur2.toFirstChild();
            depth++;
            if (hasChildren1 != hasChildren2)
            {
                Diagnostic.add(diag, "Topology differs: one document has children where the other does not (" + QNameHelper.pretty(cur1.getName()) + ", " + QNameHelper.pretty(cur2.getName()) + ")"); // TODO: where?
                match = false;
                if (hasChildren1)
                {
                    cur1.toParent();
                    hasChildren1 = false;
                }
                if (hasChildren2)
                {
                    cur2.toParent();
                    hasChildren2 = false;
                }
            }
            else if (hasChildren1 == false)
            {
                if (!wsCollapseEqual(cur1.getTextValue(), cur2.getTextValue()))
                {
                    Diagnostic.add(diag, "Value " + cur1.getTextValue() + " differs from value " + cur2.getTextValue());
                    match = false;
                }
            }

            if (hasChildren1)
                continue;

            for (;;)
            {
                boolean hasSibling1 = cur1.toNextSibling();
                boolean hasSibling2 = cur2.toNextSibling();

                if (hasSibling1 != hasSibling2)
                {
                    Diagnostic.add(diag, "Topology differs: one document has siblings where the other does not"); // TODO: where?
                    hasSibling1 = false;
                    hasSibling2 = false;
                }

                if (hasSibling1)
                    break;

                cur1.toParent();
                cur2.toParent();
                depth--;

                if (cur1.currentTokenType() == XmlCursor.TokenType.STARTDOC || depth<=0)
                    break;
            }
        }
        return match;
    }

