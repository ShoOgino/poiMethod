    public void testAllTokensTest(){
	m_xc.toEndDoc();
	assertEquals(true,m_xc.isEnddoc());
	assertEquals(true,m_xc.isFinish());
	assertEquals(TokenType.END,m_xc.prevTokenType());
	m_xc.toPrevToken();

	assertEquals(true,m_xc.isEnd());
	assertEquals(true,m_xc.isFinish());
	assertEquals(TokenType.END,m_xc.prevTokenType());
	m_xc.toPrevToken();


	assertEquals(true,m_xc.isEnd());
	assertEquals(TokenType.TEXT,m_xc.prevTokenType());
	m_xc.toPrevToken();

	assertEquals(true,m_xc.isText());
	assertEquals(false,m_xc.isContainer());
	assertEquals(TokenType.ATTR,m_xc.prevTokenType());
	m_xc.toPrevToken();

	assertEquals(true,m_xc.isAttr());
	assertEquals(true,m_xc.isAnyAttr());
	assertEquals(TokenType.ATTR,m_xc.prevTokenType());
	m_xc.toPrevToken();

	assertEquals(true,m_xc.isAttr());
	assertEquals(true,m_xc.isAnyAttr());
	assertEquals(TokenType.START,m_xc.prevTokenType());
	m_xc.toPrevToken();

	assertEquals(true,m_xc.isStart());
	assertEquals(true,m_xc.isContainer());
	assertEquals(TokenType.TEXT,m_xc.prevTokenType());
	m_xc.toPrevToken();

	assertEquals(true,m_xc.isText());
	assertEquals(TokenType.COMMENT,m_xc.prevTokenType());
	m_xc.toPrevToken();

	assertEquals(true,m_xc.isComment());
	assertEquals(TokenType.PROCINST,m_xc.prevTokenType());
	m_xc.toPrevToken();

	assertEquals(true,m_xc.isProcinst());
	assertEquals(TokenType.NAMESPACE,m_xc.prevTokenType());
	m_xc.toPrevToken();

	assertEquals(true,m_xc.isNamespace());
	assertEquals(true,m_xc.isAnyAttr());
	assertEquals(false,m_xc.isAttr());
	assertEquals(TokenType.START,m_xc.prevTokenType());
	m_xc.toPrevToken();

	assertEquals(true,m_xc.isStart());
	assertEquals(true,m_xc.isContainer());
	assertEquals(TokenType.STARTDOC,m_xc.prevTokenType());
	m_xc.toPrevToken();

	assertEquals(true,m_xc.isStartdoc());
	assertEquals(true,m_xc.isContainer());
	assertEquals(TokenType.NONE,m_xc.prevTokenType());
	//assert won't move further
	assertEquals(TokenType.NONE,m_xc.toPrevToken());
	assertEquals(true,m_xc.isStartdoc());
    }

