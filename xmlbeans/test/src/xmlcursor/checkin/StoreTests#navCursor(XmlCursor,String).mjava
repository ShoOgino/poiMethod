    private XmlCursor navCursor ( XmlCursor c, String dirs )
    {
        int n = 0;
        boolean prev = false;
        
        for ( int i = 0 ; i < dirs.length() ; i++ )
        {
            char ch = dirs.charAt( i );

            if (ch == '-')
            {
                prev = ! prev;
                continue;
            }
            else if (ch >= '0' && ch <= '9')
            {
                n = n * 10 + (ch - '0');
                continue;
            }

            if (n == 0)
                n = 1;
            
            if (ch == 'c')
            {
                if (prev)
                    Assert.assertTrue( c.toPrevChar( n ) == n );
                else
                    Assert.assertTrue( c.toNextChar( n ) == n );
            }
            else if (ch == 't')
            {
                while ( n-- > 0 )
                {
                    if (prev)
                        Assert.assertTrue( c.toPrevToken() != TokenType.NONE );
                    else
                        Assert.assertTrue( c.toNextToken() != TokenType.NONE );
                }
            }
            else if (ch == 'p')
            {
                Assert.assertTrue( ! prev );
                
                while ( n-- > 0 )
                    Assert.assertTrue( c.toParent() );
            }
            else if (ch == 'r')
            {
                Assert.assertTrue( ! prev );
                Assert.assertTrue( n == 1 );
                
                c.toEndDoc();
            }
            else if (ch == 'b')
            {
                Assert.assertTrue( ! prev );
                Assert.assertTrue( n == 1 );
                
                c.toStartDoc();
            }
            else if (ch == 's')
            {
                while ( n-- > 0 )
                {
                    if (prev)
                        Assert.assertTrue( c.toPrevSibling() );
                    else
                        Assert.assertTrue( c.toNextSibling() );
                }
            }
            else if (ch == 'd')
            {
                Assert.assertTrue( ! prev );
                
                while ( n-- > 0 )
                    Assert.assertTrue( c.toFirstChild() );
            }
            else
            {
                Assert.assertTrue( false );
            }
            
            n = 0;
            prev = false;
        }

        return c;
    }

