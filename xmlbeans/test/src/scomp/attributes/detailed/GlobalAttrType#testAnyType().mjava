    /**
     * This should awlays be valid
     */
    public void testAnyType() throws Throwable {
        GlobalAttrTypeT testDoc =
                GlobalAttrTypeDocDocument.Factory.parse("<pre:GlobalAttrTypeDoc" +
                " xmlns:pre=\"http://xbean/scomp/attribute/GlobalAttrType\" " +
                " pre:attAnyType=\" 1 \" " +
                " />").getGlobalAttrTypeDoc();

        try {
            assertTrue(testDoc.validate(validateOptions));
        }
        catch (Throwable t) {
            showErrors();
            throw t;
        }

        assertEquals(" 1 ", testDoc.getAttAnyType().getStringValue());
        try {
            assertTrue(testDoc.validate(validateOptions));
        }
        catch (Throwable t) {
            showErrors();
            throw t;
        }
        XmlInteger ival = XmlInteger.Factory.newInstance();
        ival.setBigIntegerValue(BigInteger.ZERO);

        testDoc.setAttAnyType(ival);

       // assertEquals(BigInteger.ZERO,testDoc.getAttAnyType().changeType(XmlInteger.type));
assertEquals(BigInteger.ZERO.toString(),
        testDoc.getAttAnyType().getStringValue());

        try {
            assertTrue(testDoc.validate(validateOptions));
        }
        catch (Throwable t) {
            showErrors();
            throw t;
        }
        XmlString sval = XmlString.Factory.newInstance();
        sval.setStringValue("foobar");
        testDoc.setAttAnyType(sval);
        assertEquals("foobar", testDoc.getAttAnyType().getStringValue());
        try {
            assertTrue(testDoc.validate(validateOptions));
        }
        catch (Throwable t) {
            showErrors();
            throw t;
        }

        XmlDouble fval = XmlDouble.Factory.newInstance();
        fval.setDoubleValue(-0.01);
        testDoc.setAttAnyType(fval);
        assertEquals("-0.01", testDoc.getAttAnyType().getStringValue());
        try {
            assertTrue(testDoc.validate(validateOptions));
        }
        catch (Throwable t) {
            showErrors();
            throw t;
        }
    }

