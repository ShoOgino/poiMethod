    public void testNumericypes() throws Throwable {
        FloatEltDocument flDoc =
                FloatEltDocument
                .Factory.parse("<FloatElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">12.34e+5</FloatElt>");
        assertTrue(flDoc.validate(validateOptions));
        flDoc.setFloatElt(13.5f);
        assertTrue(13.5f == flDoc.getFloatElt());

        DoubleEltDocument doubDoc =
                DoubleEltDocument.Factory.newInstance();
        assertTrue(0 == doubDoc.getDoubleElt());
        XmlDouble val = XmlDouble.Factory.newInstance();
        val.setDoubleValue(13.4d);
        doubDoc.xsetDoubleElt(val);
        assertTrue(doubDoc.validate(validateOptions));

        DecimalEltDocument decDoc =
                DecimalEltDocument.Factory.parse("<DecimalElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">12.34</DecimalElt>");
        assertTrue(decDoc.validate(validateOptions));
        BigDecimal bdval = new BigDecimal(new BigInteger("10"));
        decDoc.setDecimalElt(bdval);
        assertTrue(bdval == decDoc.getDecimalElt());

        IntegerEltDocument integerDoc =
                IntegerEltDocument.Factory.parse("<IntegerElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">124353</IntegerElt>");
        assertTrue(decDoc.validate(validateOptions));
        integerDoc.setIntegerElt(BigInteger.ONE);
        assertTrue(BigInteger.ONE == integerDoc.getIntegerElt());

        LongEltDocument longDoc =
                LongEltDocument.Factory.newInstance();
        longDoc.setLongElt(2459871);
        assertTrue(longDoc.validate(validateOptions));

        IntEltDocument intDoc = IntEltDocument.Factory.parse("<IntElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                "> -2147483648 </IntElt>");
        assertTrue(intDoc.validate(validateOptions));
        intDoc.setIntElt(2147483647);
        assertTrue(intDoc.validate(validateOptions));
        /**
         * short is derived from int by
         * setting the value of maxInclusive
         * to be 32767 and minInclusive to be -32768.
         */
        ShortEltDocument shDoc = ShortEltDocument.Factory.parse("<ShortElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">-32768</ShortElt>");
        assertTrue(shDoc.validate(validateOptions));
        assertTrue(-32768 == shDoc.xgetShortElt().getShortValue());
        //largest short is 32767. Don't use set--it would wrap around
        shDoc = ShortEltDocument.Factory.parse("<ShortElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">32768</ShortElt>");
        assertTrue(!shDoc.validate(validateOptions));
        String[] errExpected = new String[]{
            XmlErrorCodes.DATATYPE_MAX_INCLUSIVE_VALID
        };
        assertTrue(compareErrorCodes(errExpected));


        ByteEltDocument byteDoc = ByteEltDocument.Factory.newInstance();
        byteDoc.setByteElt((byte) -128);
        assertTrue(byteDoc.validate(validateOptions));
        byteDoc = ByteEltDocument.Factory.parse("<ByteElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">128</ByteElt>");

        clearErrors();
        assertTrue(!byteDoc.validate(validateOptions));
        showErrors();
        errExpected = new String[]{
            XmlErrorCodes.DATATYPE_MAX_INCLUSIVE_VALID
        };
        assertTrue(compareErrorCodes(errExpected));

        NonPosIntEltDocument nonposIntDoc =
                NonPosIntEltDocument.Factory.parse("<NonPosIntElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">-0000000</NonPosIntElt>");
        assertTrue(0 == nonposIntDoc.getNonPosIntElt().intValue());
        assertTrue(nonposIntDoc.validate(validateOptions));
        //should be valid but javac complains is setter is called
        nonposIntDoc =
                NonPosIntEltDocument.Factory.parse("<NonPosIntElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">-12678967543233</NonPosIntElt>");
        assertTrue(nonposIntDoc.validate(validateOptions));

        NegativeIntEltDocument negIntDoc =
                NegativeIntEltDocument.Factory.parse("<NegativeIntElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">-12678967543233</NegativeIntElt>");
        assertTrue(negIntDoc.validate(validateOptions));

        NonNegIntEltDocument nonnegIntDoc =
                NonNegIntEltDocument.Factory.parse("<NonNegIntElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">12678967543233</NonNegIntElt>");
        assertTrue(nonnegIntDoc.validate(validateOptions));

        UnsignedLongEltDocument uLongDoc =
                UnsignedLongEltDocument.Factory.parse("<UnsignedLongElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">18446744073709551615</UnsignedLongElt>");
        assertTrue(nonnegIntDoc.validate(validateOptions));

        UnsignedIntEltDocument uInt =
                UnsignedIntEltDocument.Factory.parse("<UnsignedIntElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">4294967295</UnsignedIntElt>");
        assertTrue(uInt.validate(validateOptions));

        UnsignedShortEltDocument uShort =
                UnsignedShortEltDocument.Factory.parse("<UnsignedShortElt " +
                " xmlns=\"http://xbean/scomp/contentType/builtIn/Number\"" +
                ">65535</UnsignedShortElt>");

        assertTrue(uShort.validate(validateOptions));

        UnsignedByteEltDocument uByte =
                UnsignedByteEltDocument.Factory.newInstance();
        uByte.setUnsignedByteElt((short) 255);
        assertTrue(uByte.validate(validateOptions));

    }

