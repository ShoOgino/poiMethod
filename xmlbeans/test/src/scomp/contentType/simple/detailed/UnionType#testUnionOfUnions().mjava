    /**
     * Specifiying value for a union that is not part of the consitituent types. The constituent types in this schema
     * are enumerations and not basic XmlSchema types and hence get translated into enum types in the XmlObjects
     */
    public void testUnionOfUnions() throws Throwable {
        UnionOfUnionsDocument doc = UnionOfUnionsDocument.Factory.newInstance();
        doc.setUnionOfUnions("large");
        try {
            assertTrue(doc.validate(validateOptions));
        }
        catch (Throwable t) {
            showErrors();
            throw t;
        }
        UnionOfUnionsT elt = UnionOfUnionsT.Factory.newInstance();
        elt.setObjectValue(new Integer(-3));
        doc.xsetUnionOfUnions(elt);
        try {
            assertTrue(doc.validate(validateOptions));
        }
        catch (Throwable t) {
            showErrors();
            throw t;
        }
        doc.setUnionOfUnions("addVal1");
        try {
            assertTrue(doc.validate(validateOptions));
        }
        catch (Throwable t) {
            showErrors();
            throw t;
        }
        doc.setUnionOfUnions("addVal2");
        try {
            assertTrue(doc.validate(validateOptions));
        }
        catch (Throwable t) {
            showErrors();
            throw t;
        }
        doc.setUnionOfUnions("addVal4");
        try {
            assertTrue(doc.validate(validateOptions));
        }
        catch (Throwable t) {
            showErrors();
            throw t;
        }
        // setting a value outside of the union should throw an exception as
        // type inside the Xmlobject is an enumeration and has a fixed number of constants in the type
        // This will fail irrespective of the setValidateOnSet() option
        boolean voeThrown = false;
        try
        {
            doc.setUnionOfUnions("foobar");

            assertTrue(!doc.validate(validateOptions));

            showErrors();
            String[] errExpected = new String[]{"cvc-attribute"};
                        assertTrue(compareErrorCodes(errExpected));
        }
        catch (XmlValueOutOfRangeException voe)
        {
            voeThrown = true;
        }

        finally
        {
            if(!voeThrown)
                fail("Expected XmlValueOutOfRangeException here");
        }


    }

