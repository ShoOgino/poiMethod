    /**
     *  result type is a sequence of 2 choices
     * Valid sets: { (child1 xor child2 xor child3 )(extraEltStr xor extraEltStr) }
     * @throws Throwable
     */
    public void testChoiceExtension() throws Throwable {
        ChoiceExtensionEltDocument doc = ChoiceExtensionEltDocument.Factory
                .newInstance();
        ChoiceExtensionT elt = doc.addNewChoiceExtensionElt();
        elt.setChild1(new BigInteger("10"));
        elt.addChild2("foobar");
        elt.setChild3Array(new BigInteger[]{BigInteger.ONE, BigInteger.ZERO});
        elt.addExtraEltInt(3);
        elt.setExtraEltStrArray(new String[]{"extra1", "extra2"});
        assertTrue(!doc.validate(validateOptions));
                    showErrors();
             //TODO: child 2 and child3 not allowed
             //extraEltStr not allowed
              String[] errExpected = new String[]{
                  XmlErrorCodes.ELEM_COMPLEX_TYPE_LOCALLY_VALID$EXPECTED_DIFFERENT_ELEMENT,
                   XmlErrorCodes.ELEM_COMPLEX_TYPE_LOCALLY_VALID$EXPECTED_DIFFERENT_ELEMENT,
                  XmlErrorCodes.ELEM_COMPLEX_TYPE_LOCALLY_VALID$ELEMENT_NOT_ALLOWED
              };
                           assertTrue(compareErrorCodes(errExpected));

        assertEquals(new BigInteger("10"), elt.getChild1());
        assertEquals("foobar", elt.getChild2Array()[0]);
        elt.unsetChild1();

        XmlInteger expected = XmlInteger.Factory.newInstance();
        expected.setBigIntegerValue(BigInteger.ONE);
        assertTrue( expected.valueEquals(elt.xgetChild3Array()[0]) );
        elt.removeExtraEltInt(0);
        elt.removeChild2(0);
        clearErrors();
        try {
            assertTrue(doc.validate(validateOptions));
        }
        catch (Throwable t) {
            System.out.println(" test failed :");
            showErrors();
            throw t;
        }



         elt.addExtraEltInt(3);
        expected.setBigIntegerValue(BigInteger.ZERO);
        assertTrue( expected.valueEquals(elt.xgetChild3Array()[1]) );
          assertEquals(3, elt.getExtraEltIntArray()[0]);
        assertEquals(3, elt.getExtraEltIntArray(0));
        clearErrors();
        assertTrue(!doc.validate(validateOptions));
                           showErrors();
                    errExpected = new String[]{
                         XmlErrorCodes.ELEM_COMPLEX_TYPE_LOCALLY_VALID$ELEMENT_NOT_ALLOWED
                        };
                                  assertTrue(compareErrorCodes(errExpected));
        elt.removeExtraEltInt(0);
        try {
            assertTrue(doc.validate(validateOptions));
        }
        catch (Throwable t) {
            showErrors();
            throw t;
        }
        XmlString expected1 = XmlString.Factory.newInstance();
        expected1.setStringValue("extra1");
        assertTrue( expected1.valueEquals(elt.xgetExtraEltStrArray(0)) );
        expected1.setStringValue("extra2");
        assertTrue( expected1.valueEquals(elt.xgetExtraEltStrArray()[1]) );

    }

