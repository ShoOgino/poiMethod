    /**
     * The follwing are test for the 'final' attribute used in a base type that affects extenstion/restriction
     * They are negative tests and test for #all, restriction, extenstion and 'extenstion restriction' values
     */
    public void testFinalAll() {
        String inputXsd = "    <xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n" +
                "    <xsd:complexType name=\"BaseProductTypeFinalAll\" final=\"#all\">\n" +
                "        <xsd:sequence>\n" +
                "            <xsd:element name=\"number\" type=\"xsd:integer\" />\n" +
                "            <xsd:element name=\"name\" type=\"xsd:string\" minOccurs=\"0\" />\n" +
                "        </xsd:sequence>\n" +
                "    </xsd:complexType>\n" +
                "\n" +
                "    <xsd:complexType name=\"ProductTypeExtension\">\n" +
                "        <xsd:complexContent>\n" +
                "            <xsd:extension base=\"BaseProductTypeFinalAll\">\n" +
                "                <xsd:sequence>\n" +
                "                    <xsd:element name=\"subcategory\" type=\"xsd:string\"/>\n" +
                "                </xsd:sequence>\n" +
                "            </xsd:extension>\n" +
                "        </xsd:complexContent>\n" +
                "    </xsd:complexType>    \n" +
                "\n" +
                "    <xsd:complexType name=\"ProductTypeRestriction\">\n" +
                "        <xsd:complexContent>\n" +
                "            <xsd:restriction base=\"BaseProductTypeFinalAll\">\n" +
                "                <xsd:sequence>\n" +
                "                    <xsd:element name=\"number\" type=\"xsd:integer\"/>\n" +
                "                </xsd:sequence>\n" +
                "            </xsd:restriction>\n" +
                "        </xsd:complexContent>\n" +
                "    </xsd:complexType>    \n" +
                "\n" +
                "    </xsd:schema>";

        XmlOptions options = new XmlOptions();
        List errors = new ArrayList();
        options.setErrorListener(errors);

        try {
            XmlObject xobj = XmlObject.Factory.parse(inputXsd);
            XmlObject[] compInput = new XmlObject[]{xobj};
            XmlBeans.compileXmlBeans(null, null, compInput, null, XmlBeans.getBuiltinTypeSystem(), null, options);
        }
        catch (XmlException xme) {
            // The convention is that the XmlException that gets thrown form XmlBeans.compile* methods always contains
            // just the first error and if you need to see all errors you use XmlOptions.
            // hence checking for error codes is now done with XmlOptions.
            assertEquals(1, xme.getErrors().size());
        }

        assertEquals(2, errors.size());

        Iterator itr = errors.iterator();
        XmlError eacherr = (XmlError) itr.next();
        System.out.println("Err:" + eacherr.getMessage() + "," + eacherr.getErrorCode());
        assertNotNull(eacherr.getErrorCode());
        assertEquals(XmlErrorCodes.COMPLEX_TYPE_EXTENSION$FINAL, eacherr.getErrorCode());

        eacherr = (XmlError) itr.next();
        System.out.println("Err:" + eacherr.getMessage());
        assertNotNull(eacherr.getErrorCode());
        assertEquals(XmlErrorCodes.COMPLEX_TYPE_RESTRICTION$FINAL, eacherr.getErrorCode());

    }

