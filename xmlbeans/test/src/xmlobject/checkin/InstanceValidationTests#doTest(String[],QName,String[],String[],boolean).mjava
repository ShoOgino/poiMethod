      public void doTest (
          String[] schemas, QName docType,
          String[] validInstances, String[] invalidInstances, boolean startOnDocument )
              throws Exception
      {
          SchemaTypeLoader stl = makeSchemaTypeLoader( schemas );

          XmlOptions options = new XmlOptions();

          if (docType != null)
          {
              SchemaType docSchema = stl.findDocumentType( docType );

              Assert.assertTrue( docSchema != null );

              options.put( XmlOptions.DOCUMENT_TYPE, docSchema );
          }

          for ( int i = 0 ; i < validInstances.length ; i++ )
          {
              XmlObject x =
                  stl.parse( (String) validInstances[ i ], null, options );

              if (!startOnDocument)
              {
                  XmlCursor c = x.newCursor();
                  c.toFirstChild();
                  x = c.getObject();
                  c.dispose();
              }

              List xel = new ArrayList();

              options.put( XmlOptions.ERROR_LISTENER, xel );

              boolean isValid = x.validate( options );

              if (!isValid)
              {
                  System.err.println( "Invalid doc, expected a valid doc: " );
                  System.err.println( "Instance(" + i + "): " );
                  System.err.println( x.xmlText() );
                  System.err.println( "Errors: " );
                  for ( int j = 0 ; j < xel.size() ; j++ )
                      System.err.println( xel.get( j ) );
                  System.err.println();
              }

              Assert.assertTrue( isValid );
          }

          for ( int i = 0 ; i < invalidInstances.length ; i++ )
          {
              XmlObject x;

              try
              {
                  x = stl.parse( (String) invalidInstances[ i ], null, options );

                  if (! startOnDocument)
                  {
                      XmlCursor c = x.newCursor();
                      c.toFirstChild();
                      x = c.getObject();
                      c.dispose();
                  }

                  boolean isValid = x.validate();

                  if (isValid)
                  {
                      System.err.println( "Valid doc, expected a invalid doc: " );
                      System.err.println( "Instance(" + i + "): " );
                      System.err.println( x.xmlText() );
                      System.err.println();
                  }

                  Assert.assertTrue( !isValid );
              }
              catch ( XmlException e )
              {
              }
          }
      }

