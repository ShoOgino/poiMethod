    public void testByNameSoapUnmarshal()
        throws Exception
    {
        final boolean verbose = false;

        final Collection errors = new LinkedList();
        final MyClass source_mc = new MyClass();
        final String xmldoc = createSoapExampleXmlString(source_mc, errors);
        reportErrors(errors, "byname-marshal-soap-writer");
        Assert.assertTrue(errors.isEmpty());

        BindingContext bindingContext =
            getBindingContext(getBindingConfigDocument());

        XmlOptions opts = new XmlOptions();
        opts.setLoadLineNumbers();
        final Document document = (Document) XmlObject.Factory.parse( sXml, opts ).getDomNode();

        if (verbose) {
            final XMLStreamReader tmp_stream = XmlBeans.nodeToXmlStreamReader(document);
            dumpReader(tmp_stream, true);
            tmp_stream.close();
        }

        final SoapUnmarshaller um =
            bindingContext.createSoapUnmarshaller(EncodingStyle.SOAP11, document);

        final XMLStreamReader xrdr = XmlBeans.nodeToXmlStreamReader(document);
//        {
//            while(xrdr.hasNext()) {
//                System.out.println("## AT " + XmlStreamUtils.printEvent(xrdr));
//                final int e = xrdr.next();
//            }
//            if (System.currentTimeMillis() > 1) {
//                throw new AssertionError("STOP!");
//            }
//        }

        while (!xrdr.isStartElement()) {
            xrdr.next();
        }
        xrdr.next();
        //now at Dummy node
        while (!xrdr.isStartElement()) {
            xrdr.next();
        }
        //now at actual type
        xrdr.require(XMLStreamReader.START_ELEMENT,
                     DFLT_ELEM_NAME.getNamespaceURI(),
                     DFLT_ELEM_NAME.getLocalPart());


        final Object obj = um.unmarshalType(xrdr, MYCLASS_NAME,
                                            MyClass.class.getName(), null);

        inform("GOT OBJ: " + obj.getClass(), verbose);
        MyClass mc = (MyClass)obj;

        final YourClass myelt = mc.getMyelt();
        Assert.assertNotNull(myelt);
        Assert.assertEquals(myelt.getBools(), source_mc.getMyelt().getBools());
        Assert.assertTrue(Arrays.equals(myelt.getWrappedArrayOne(),
                                        source_mc.getMyelt().getWrappedArrayOne()));
        Assert.assertEquals(DUMMY_QNAME, myelt.getQn2());
        Assert.assertEquals(myelt.getQn(), myelt.getQn2());
        Assert.assertTrue(myelt.getMySubClass() == myelt.getMyClass());
        Assert.assertTrue(myelt.getMyBoss() == myelt);
        Assert.assertTrue(myelt.objectArray[3] == myelt.objectArray[4]);
        Assert.assertTrue(myelt.objectArray[3] == myelt.objectArray);
        Assert.assertSame(myelt.objectArray[0], myelt.objectArray[1]);
        Assert.assertNull(myelt.objectArray[5]);

        MySubClass sub = (MySubClass)myelt.objectArray[8];
        Assert.assertEquals(BigInteger.ONE, sub.getBigInt());

        Assert.assertTrue(myelt.objectArrayTwo[1] == myelt.objectArray);
        Assert.assertTrue(myelt.objectArrayTwo[2] == myelt.objectArrayTwo);


        xrdr.close();
    }

