    public void testJAXRPCBinding() throws Exception
    {
        // bind
        File typesonlyfile = TestEnv.xbeanCase("schema/typesonly/typesonly.xsd");
        File[] xsds = new File[] {typesonlyfile};
        Schema2Java compiler = new Schema2Java(
          //FIXME please dont use product internals in a test
                BindingCompilerTask.createSchemaTypeSystem(xsds));

        final JavaOutputStream joust = createJoust();
        BindingFile bindingFile = null;
        TylarWriter twriter = new TylarWriter() {
          public JavaOutputStream getJavaOutputStream() { return joust; }
          public void writeBindingFile(BindingFile bf) throws IOException {
            if (verbose) BindingFileUtils.write(bf).save(System.out);
          }
          public void writeSchema(SchemaDocument xsd, String filepath) {}
          public void writeSchemaTypeSystem(SchemaTypeSystem sts) {}
          public void close() {}
        };
        //FIXME this is kinda dumb, just emulating current behavior.
        //real test should create a tylar on disk  -pcal
        compiler.bind(twriter);

        // now compile
        // SimpleSchemaToJavaResultCompiler.Params params = new SimpleSchemaToJavaResultCompiler.Params();
        // File theJar = TestEnv.xbeanOutput("schema/binding/typesonly.jar");
        // params.setOutputJar(theJar);
        // to test later
        //SimpleSchemaToJavaResultCompiler.compile(result, params);
    }
//
//    public void testIsSetAnnotation()
//        throws Exception
//    {
//        final File sourcefile =
//            TestEnv.xbeanCase("marshal/com/mytest/MySubClass.java");
//        Assert.assertTrue(sourcefile.exists());
//
//        File sourcepath =
//            TestEnv.xbeanCase("marshal");
//        Assert.assertTrue(sourcepath.exists());
//        Assert.assertTrue(sourcepath.isDirectory());
//
//        JamServiceFactory jf = JamServiceFactory.getInstance();
//        JamServiceParams params = jf.createServiceParams();
//
//        params.includeSourceFile(new File[]{sourcepath}, sourcefile);
//
//        JamService service = jf.createService(params);
//
//        final Java2Schema j2s = new Java2Schema(service.getAllClasses());
//
////        j2s.setVerbose(true);
//
//
//        final File tmpfile = File.createTempFile("bindingTests", "-tylar");
//        if (!tmpfile.delete()) {
//            throw new AssertionError("delete failed on " + tmpfile);
//        }
//        final boolean ok = tmpfile.mkdirs();
//        Assert.assertTrue("mkdir" + tmpfile + " failed", ok);
//
//        j2s.bindAsExplodedTylar(tmpfile);
//
//    }

