    public void testByNameMarshalViaWriter()
        throws Exception
    {
        com.mytest.MyClass mc = new com.mytest.MyClass();
        mc.setMyatt("attval");
        com.mytest.YourClass myelt = new com.mytest.YourClass();
        myelt.setAttrib(99999.777f);
        myelt.setMyFloat(5555.4444f);
//        myelt.setMyClass(new com.mytest.MyClass());
//        myelt.setMyClass(new com.mytest.MySubSubClass());
        myelt.setMyClass(new com.mytest.MySubClass());
        mc.setMyelt(myelt);

        myelt.setModeEnum(ModeEnum.Off);
//        myelt.setQn(new QName("someURI", "somePart"));
        myelt.setQn(new QName("java:com.mytest2", "somePart"));
        final SimpleContentExample sce = new SimpleContentExample();
        sce.setFloatAttOne(5.43234f);
        sce.setSimpleContent("SIMPLE_CONTENT");
        myelt.setSimpleContentExample(sce);

        myelt.setStringArray(new String[]{"one", "two", "three"});

        myelt.setSimpleStringArray(myelt.getStringArray());

        BindingContext bindingContext = getBindingContext(getBindingConfigDocument());

        StringWriter sw = new StringWriter();
        XMLStreamWriter w = XMLOutputFactory.newInstance().createXMLStreamWriter(sw);

        final XmlOptions options = new XmlOptions();
        Collection errors = new LinkedList();
        options.setErrorListener(errors);


        Marshaller ctx =
            bindingContext.createMarshaller();
        Assert.assertNotNull(ctx);


        final QName elem_name = DFLT_ELEM_NAME;
        final QName type_name = MYCLASS_NAME;
        ctx.marshalType(w, mc,
                        elem_name,
                        type_name,
                        mc.getClass().getName(), options);
        w.close();
        sw.close();

        inform("=======IN-OBJ: " + mc);
        inform("=======OUT-XML:\n" + PrettyPrinter.indent(sw.getBuffer().toString()));
        reportErrors(errors, "byname-writer");
        Assert.assertTrue(errors.isEmpty());


        StringReader sr = new StringReader(sw.getBuffer().toString());
        XMLStreamReader rdr =
            XMLInputFactory.newInstance().createXMLStreamReader(sr);
        while (!rdr.isStartElement()) {
            rdr.next();
        }
        Unmarshaller umctx = bindingContext.createUnmarshaller();
        Object out_obj = umctx.unmarshalType(rdr, type_name, mc.getClass().getName(), options);
        reportErrors(errors, "byname-doc-writer");
        Assert.assertTrue(errors.isEmpty());
        if (!mc.equals(out_obj)) {
            inform("IN : " + mc, true);
            inform("OUT: " + out_obj, true);
        }
        Assert.assertEquals(mc, out_obj);
    }

