    public void testSimpleTypeUnmarshal(Object expected,
                                        String lexval,
                                        String type_uri,
                                        String xsd_type)
        throws Exception
    {
        BindingContext bindingContext = getBuiltinBindingContext();

        String xmldoc = "<a" +
            " xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'" +
            " xmlns:xs='" +
            type_uri +
            "' xsi:type='xs:" +
            xsd_type + "' >" + lexval + "</a>";

        StringReader stringReader = new StringReader(xmldoc);
        XMLStreamReader xrdr =
            XMLInputFactory.newInstance().createXMLStreamReader(stringReader);

        final XmlOptions options = new XmlOptions();
        Collection errors = new LinkedList();
        options.setErrorListener(errors);

        Unmarshaller umctx =
            bindingContext.createUnmarshaller();

        Object obj = umctx.unmarshal(xrdr, options);
        reportErrors(errors, "SimpleType error. lexical=" + lexval);
        Assert.assertTrue(errors.isEmpty());


        //special case date/time tests.
        //we really need more robust testing here.
        if (expected instanceof Calendar) {
            XmlCalendar got = (XmlCalendar)obj;
            String got_lex = got.toString();
            Assert.assertEquals(lexval, got_lex);
        } else if (expected.getClass().isArray()) {
            final boolean eq = ArrayUtils.arrayEquals(expected, obj);
            final String s = "arrays not equal.  " +
                "expected " + ArrayUtils.arrayToString(expected) +
                " got " + ArrayUtils.arrayToString(obj);
            Assert.assertTrue(s, eq);
        } else {
            Assert.assertEquals(expected, obj);
        }

//        inform("OK for " + expected);
    }

