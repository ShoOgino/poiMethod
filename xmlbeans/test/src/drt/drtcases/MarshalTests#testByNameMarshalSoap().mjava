    public void testByNameMarshalSoap()
        throws Exception
    {
        final boolean verbose = false;

        com.mytest.MyClass mc = new com.mytest.MyClass();
        mc.setMyatt("attval");
        com.mytest.YourClass myelt = new com.mytest.YourClass();
        myelt.setAttrib(99999.777f);
        myelt.setMyFloat(5555.4444f);

        QName qn = new QName("foo", "bar");
        myelt.setQn(qn);
        myelt.setQn2(qn);

        myelt.setWrappedArrayOne(new String[]{"a", "a", "b"});

        MySubClass sub = new MySubClass();
        sub.setBigInt(new BigInteger("23522352235223522352"));

        myelt.setMySubClass(sub);
        myelt.setMyClass(sub);
        sub.setMyelt(myelt);  //cycle

        myelt.setMyBoss(myelt); //cycle: self reference

        SimpleContentExample se = new SimpleContentExample();
        se.setFloatAttOne(44.33f);
        se.setSimpleContent("someSimpleContentOkay");
        myelt.setSimpleContentExample(se);

        myelt.setModeEnum(ModeEnum.On);

        mc.setMyelt(myelt);

        myelt.setStringArray(new String[]{"a", "b", "c"});

        myelt.setMyClassArray(new MyClass[]{sub, new MyClass(),
                                            //this type is not in our binding file,
                                            //but we should then treat is as its the parent type
                                            new MySubSubClass(),
                                            sub});


        BindingContext bindingContext = getBindingContext(getBindingConfigDocument());

        final XmlOptions options = new XmlOptions();
        Collection errors = new LinkedList();
        options.setErrorListener(errors);

        final SoapMarshaller ctx =
            bindingContext.createSoapMarshaller(EncodingStyle.SOAP11);

        Assert.assertNotNull(ctx);


        final XMLStreamReader reader =
            ctx.marshalType(mc, DFLT_ELEM_NAME,
                            MYCLASS_NAME,
                            mc.getClass().getName(), options);

        dumpReader(reader, verbose);
        reportErrors(errors, "byname-marshal-soap");
        Assert.assertTrue(errors.isEmpty());

        inform("===========final id objs coming next===========", verbose);
        final Iterator itr = ctx.marshalReferenced(options);
        while (itr.hasNext()) {
            final XMLStreamReader rdr = (XMLStreamReader)itr.next();
            inform("got rdr: " + System.identityHashCode(rdr), verbose);
            dumpReader(rdr, verbose);
            rdr.close();
        }
    }

