    public void testAnyTypeSoapUnmarshal()
        throws Exception
    {
        final boolean verbose = false;

        final Collection errors = new LinkedList();
        final MyClass source_mc = new MyClass();


        BindingContext bindingContext =
            getBindingContext(getBindingConfigDocument());

        //////////////////////////////////////////////

        final XmlOptions options = new XmlOptions();
        options.setErrorListener(errors);

        final SoapMarshaller ctx =
            bindingContext.createSoapMarshaller(EncodingStyle.SOAP11);

        Assert.assertNotNull(ctx);

        StringWriter sw = new StringWriter();
        XMLStreamWriter xml_out =
            XMLOutputFactory.newInstance().createXMLStreamWriter(sw);

        xml_out.writeStartDocument();
        xml_out.writeStartElement("DUMMY_ROOT");
        xml_out.writeNamespace("xs", XSD_URI);
        xml_out.writeNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
        xml_out.writeNamespace("jt", "java:com.mytest");

        ctx.marshalType(xml_out, source_mc, DFLT_ELEM_NAME,
                        ANY_TYPE_NAME,
                        Object.class.getName(), options);


        xml_out.writeComment("ids are coming next");

        ctx.marshalReferenced(xml_out, options);
        xml_out.writeEndElement();
        xml_out.writeEndDocument();
        xml_out.close();
        sw.close();
        final String xmldoc = sw.getBuffer().toString();

        //////////////////////////////////////////////

        reportErrors(errors, "byname-marshal-soap-writer");
        Assert.assertTrue(errors.isEmpty());


        XmlOptions opts = new XmlOptions();
        opts.setLoadLineNumbers();
        final Document document = (Document) XmlObject.Factory.parse(xmldoc, opts).getDomNode();

        if (verbose) {
            final XMLStreamReader tmp_stream = XmlBeans.nodeToXmlStreamReader(document);
            dumpReader(tmp_stream, true);
            tmp_stream.close();
        }

        final SoapUnmarshaller um =
            bindingContext.createSoapUnmarshaller(EncodingStyle.SOAP11, document);

        final XMLStreamReader xrdr = XmlBeans.nodeToXmlStreamReader(document);

        while (!xrdr.isStartElement()) {
            xrdr.next();
        }
        xrdr.next();
        //now at Dummy node
        while (!xrdr.isStartElement()) {
            xrdr.next();
        }
        //now at actual type
        xrdr.require(XMLStreamReader.START_ELEMENT,
                     DFLT_ELEM_NAME.getNamespaceURI(),
                     DFLT_ELEM_NAME.getLocalPart());


        final Object obj = um.unmarshalType(xrdr, ANY_TYPE_NAME,
                                            Object.class.getName(), null);

        inform("GOT OBJ: " + obj.getClass(), verbose);
        Assert.assertTrue(obj instanceof MyClass);
        xrdr.close();
    }

