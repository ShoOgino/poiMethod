    /**
     * Verify basic incremental compilation
     * and compilation with partial SOM usages
     */
    public void test_incrCompile() throws Exception
    {
        XmlObject obj1 = XmlObject.Factory.parse(forXsd);
        obj1.documentProperties().setSourceName("OBJ1");
        XmlObject[] schemas = new XmlObject[]{obj1};
        QName sts1 = new QName("http://baz", "elName");

        XmlObject obj2 = XmlObject.Factory.parse(incrXsd);
        obj2.documentProperties().setSourceName("OBJ2");
        XmlObject[] schemas2 = new XmlObject[]{obj2};
        QName sts2 = new QName("http://bar", "elName");

        XmlObject obj3 = XmlObject.Factory.parse(errXsd);
        obj3.documentProperties().setSourceName("OBJ3");
        XmlObject[] schemas3 = new XmlObject[]{obj3};
        QName sts3 = new QName("http://bar", "elErrName");

        SchemaTypeSystem sts;
        ArrayList err = new ArrayList();
        XmlOptions opt = new XmlOptions().setErrorListener(err);
        opt.put("COMPILE_PARTIAL_TYPESYSTEM");

        //BASIC COMPILATION
        sts = XmlBeans.compileXmlBeans(null,
                null, schemas, null,
                XmlBeans.getBuiltinTypeSystem(), null, opt);

        Assert.assertTrue("Errors should have been empty", err.isEmpty());
        // find element in the type System
        if (!findGlobalElement(sts.globalElements(), sts1))
            throw new Exception(
                    "Could Not find Type from first Type System: " + sts1);

        //SIMPLE INCR COMPILATION
        sts = XmlBeans.compileXmlBeans(null,
                sts, schemas2, null,
                XmlBeans.getBuiltinTypeSystem(), null, opt);
        Assert.assertTrue("Errors should have been empty", err.isEmpty());
        // find element in the type System

        if (!findGlobalElement(sts.globalElements(), sts1))
            throw new Exception("Could Not find Type from first Type System: " +
                    sts1);

        if (!findGlobalElement(sts.globalElements(), sts2))
            throw new Exception("Could Not find Type from 2nd Type System: " +
                    sts2);

        System.out.println("Building over Existing");
        //BUILDING OFF BASE SIMPLE INCR COMPILATION
        sts = XmlBeans.compileXmlBeans(null,
                sts, schemas2, null,
                sts, null, opt);
        Assert.assertTrue("Errors should have been empty", err.isEmpty());
        // find element in the type System

        if (!findGlobalElement(sts.globalElements(), sts1))
            throw new Exception("Could Not find Type from first Type System: " +
                    sts1);

        if (!findGlobalElement(sts.globalElements(), sts2))
            throw new Exception("Could Not find Type from 2nd Type System: " +
                    sts2);

        //INCR COMPILATION WITH RECOVERABLE ERROR
        err.clear();
        SchemaTypeSystem b = XmlBeans.compileXmlBeans(null,
                sts, schemas3, null,
                XmlBeans.getBuiltinTypeSystem(), null, opt);
        // find element in the type System
        if (!findGlobalElement(b.globalElements(), sts1))
            throw new Exception("Could Not find Type from first Type System: " +
                    sts1);

        if (!findGlobalElement(b.globalElements(), sts2))
            throw new Exception("Could Not find Type from 2nd Type System: " +
                    sts2);

        if (!findGlobalElement(b.globalElements(), sts3))
            throw new Exception("Could Not find Type from 3rd Type System: " +
                    sts3);

        printSTS(b);

        //INSPECT ERRORS
        boolean psom_expError = false;
        // print out the recovered xm_errors
        if (!err.isEmpty()) {
            System.out.println(
                    "Schema invalid: partial schema type system recovered");
            for (Iterator i = err.iterator(); i.hasNext();) {
                XmlError xErr = (XmlError) i.next();
                System.out.println(xErr);
                //compare to the expected xm_errors
                if ((xErr.getErrorCode().compareTo("src-resolve") == 0) &&
                        (xErr.getMessage().compareTo(
                                "type 'bType@http://baz' not found.") ==
                        0))
                    psom_expError = true;
            }
        }
        if (!psom_expError)
            throw new Exception("Error Code was not as Expected");


    }

