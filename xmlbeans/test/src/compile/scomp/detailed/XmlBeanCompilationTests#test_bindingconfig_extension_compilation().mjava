    /**
     * Filer != null for BindingConfig to be used
     *
     * @throws Exception
     */
    public void test_bindingconfig_extension_compilation() throws Exception
    {
        TestFiler f = new TestFiler();
        //initialize all of the values
        String extCaseDir = XBEAN_CASE_ROOT + P + "extensions" + P;
        String extSrcDir = CASEROOT + P +
                ".." + P + "src" + P + "xmlobject" + P + "extensions" + P;
        File[] cPath = CompileTestBase.getClassPath();
        String dir = extCaseDir + P + "interfaceFeature" + P + "averageCase";
        String dir2 = extCaseDir + P + "prePostFeature" + P +
                "ValueRestriction";

        ConfigDocument.Config bConf = ConfigDocument.Factory.parse(
                new File(dir + P + "po.xsdconfig"))
                .getConfig();
        ConfigDocument.Config cConf = ConfigDocument.Factory.parse(
                new File(dir2 + P + "company.xsdconfig"))
                .getConfig();

        String simpleConfig = "<xb:config " +
                "xmlns:xb=\"http://xml.apache.org/xmlbeans/2004/02/xbean/config\"\n" +
                " xmlns:ep=\"http://xbean.interface_feature/averageCase/PurchaseOrder\">\n" +
                "<xb:namespace uri=\"http://xbean.interface_feature/averageCase/PurchaseOrder\">\n" +
                "<xb:package>com.easypo</xb:package>\n" +
                "</xb:namespace></xb:config>";
        ConfigDocument.Config confDoc = ConfigDocument.Factory.parse(simpleConfig).getConfig();
        ConfigDocument.Config[] confs = new ConfigDocument.Config[]{bConf, confDoc, cConf};

        String fooHandlerPath = extSrcDir + P + "interfaceFeature" + P +
                "averageCase" + P + "existing" + P + "FooHandler.java";
        String iFooPath = extSrcDir + P + "interfaceFeature" + P +
                "averageCase" + P + "existing" + P + "IFoo.java";
        String iSetterPath = extSrcDir + P + "prePostFeature" + P +
                "ValueRestriction" + P + "existing" + P + "ISetter.java";
        String setterHandlerPath = extSrcDir + P + "prePostFeature" + P +
                "ValueRestriction" + P + "existing" + P + "SetterHandler.java";


        File[] fList = new File[]{new File(fooHandlerPath), new File(iFooPath),
                                  new File(iSetterPath),
                                  new File(setterHandlerPath)};

        //use created BindingConfig
        TestBindingConfig bind = new TestBindingConfig(confs, fList, cPath);

        //set XSDs
        XmlObject obj1 = XmlObject.Factory.parse(new File(dir + P + "po.xsd"));
        XmlObject obj2 = XmlObject.Factory.parse(
                new File(dir2 + P + "company.xsd"));
        XmlObject[] schemas = new XmlObject[]{obj1, obj2};

        //filer must be present on this method
        SchemaTypeSystem apiSts = XmlBeans.compileXmlBeans("apiCompile", null,
                schemas, bind, XmlBeans.getBuiltinTypeSystem(), f, xm_opts);

        if (!bind.isIslookupPrefixForNamespace())
            throw new Exception("isIslookupPrefixForNamespace not invoked");
        if (!bind.isIslookupPackageForNamespace())
            throw new Exception("isIslookupPackageForNamespace not invoked");
        if (!bind.isIslookupSuffixForNamespace())
            throw new Exception("isIslookupSuffixForNamespace not invoked");
        if (!bind.isIslookupJavanameForQName())
            throw new Exception("isIslookupJavanameForQName not invoked");
        if (!bind.isIsgetInterfaceExtensionsString())
            throw new Exception("isIsgetInterfaceExtensionsString not invoked");
        if (!bind.isIsgetInterfaceExtensions())
            throw new Exception("isIsgetInterfaceExtensions not invoked");
        if (!bind.isIsgetPrePostExtensions())
            throw new Exception("isIsgetPrePostExtensions not invoked");
        if (!bind.isIsgetInterfaceExtensions())
            throw new Exception("isIsgetInterfaceExtensions not invoked");
        if (!bind.isIsgetPrePostExtensionsString())
            throw new Exception("isIsgetPrePostExtensionsString not invoked");
    }

