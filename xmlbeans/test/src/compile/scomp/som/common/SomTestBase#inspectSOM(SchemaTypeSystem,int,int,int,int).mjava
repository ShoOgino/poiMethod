    public static void inspectSOM(SchemaTypeSystem schematypesys,
                                  int expectedGlobalElems,
                                  int expectedGlobalAttrs,
                                  int expectedGlobalTypes,
                                  int expectedAttrGroups)
    {
        // System.outs written to a log file in the build\test\output\som directory, one file per run
        // ex. SOM_INSPECTION_RESULT_1107129259405.txt

        File outDir = new File(somOutputRootDir);
        if (!outDir.exists())
        {
            outDir.mkdir();
        }

        // check if file exists already
        String logFileName = somOutputRootDir + P + "SOM_INSPECTION_RESULT_" + runid + ".txt";
        File outfile = new File(logFileName);
        PrintWriter out = null;

        try
        {
            // if file exists for this run, append to it
            if (outfile.exists())
            {
                out = new PrintWriter(new FileWriter(outfile, true));
            }
            else
            {
                if (outfile.createNewFile())
                {
                    out = new PrintWriter(new FileWriter(outfile));
                }
            }

            out.println("\n Call to inspectPSOM .. .. .. ..");
            out.println("\n\n =======================================================");
            out.println("Now Inspecting SOM for STS : " + schematypesys.getName());
            out.println("=======================================================");
            out.println("Input Params : #elems (" + expectedGlobalElems + "), #attr (" + expectedGlobalAttrs
                    + "), #types (" + expectedGlobalTypes + "), #attr groups (" + expectedAttrGroups + ")");
            out.println("-------------------------------------------------------");

            out.println("New STUFF -------------------------------------------------------");
            schematypesys.resolve();
            if (schematypesys.isNamespaceDefined("TestNameSpace"))
            {
                out.println("Name Space 'TestNameSpace' for this STS is define ..");
            }
            else
            {
                out.println("No Name Space 'TestNameSpace' for this STS is NOT ndefine ..");
            }
            out.println("End New STUFF -------------------------------------------------------");

            // walk thro the SOM here
            out.println("----- Loader Name      :" + schematypesys.getName());

            // # of global attributes
            out.println("----- # Global Attributes :" + schematypesys.globalAttributes().length);
            Assert.assertEquals("Incorrect Number of Global Attributes in STS " + schematypesys.getName(), expectedGlobalAttrs, schematypesys.globalAttributes().length);
            for (int i = 0; i < schematypesys.globalAttributes().length; i++)
            {
                out.println("\t------> Attr Name  :" + schematypesys.globalAttributes()[i].getName());
                out.println("\t------> Attr Type  :" + schematypesys.globalAttributes()[i].getType());
            }

            // # of global elements
            out.println("----- # Global Elements :" + schematypesys.globalElements().length);
            Assert.assertEquals("Incorrect Number of Global Elements in STS " + schematypesys.getName(), expectedGlobalElems, schematypesys.globalElements().length);
            for (int i = 0; i < schematypesys.globalElements().length; i++)
            {
                out.println("\t------> Elem Name :" + schematypesys.globalElements()[i].getName());
                out.println("\t------> Elem Type :" + schematypesys.globalElements()[i].getType());
            }

            // # of global Types
            out.println("----- # Global Types :" + schematypesys.globalTypes().length);
            Assert.assertEquals("Incorrect Number of Global Types in STS " + schematypesys.getName(), expectedGlobalTypes, schematypesys.globalTypes().length);
            for (int i = 0; i < schematypesys.globalTypes().length; i++)
            {
                out.println("\t------> TypeName:" + schematypesys.globalTypes()[i].getName());
            }

            // # of attribute Groups
            out.println("----- # of Attribute Groups :" + schematypesys.attributeGroups().length);
            Assert.assertEquals("Incorrect Number of Attribute Groups in STS " + schematypesys.getName(), expectedAttrGroups, schematypesys.attributeGroups().length);
            for (int i = 0; i < schematypesys.attributeGroups().length; i++)
            {
                out.println("\t------> Attr Group Name :" + schematypesys.attributeGroups()[i].getName());
                out.println("\t------> Attr STS   :" + schematypesys.attributeGroups()[i].getTypeSystem());
            }

            out.println("----- # of Model Groups :" + schematypesys.modelGroups().length);
            Assert.assertNotNull("Invalid Model Groups Collection returned in STS " + schematypesys.documentTypes());
            for (int i = 0; i < schematypesys.modelGroups().length; i++)
            {
                out.println("\t------> Model Group Name:" + schematypesys.modelGroups()[i].getName());
                out.println("\t------> Model Group STS :" + schematypesys.modelGroups()[i].getTypeSystem());
            }

            out.println("----- # of Schema Annotations :" + schematypesys.annotations().length);
            Assert.assertNotNull("Invalid Annotations Collection returned in STS " + schematypesys.annotations());
            for (int i = 0; i < schematypesys.annotations().length; i++)
            {
                out.println("\t------> Annotation Application Info Array :" + schematypesys.annotations()[i].getApplicationInformation().toString());
                out.println("\t------> Annotation User Info Array :" + schematypesys.annotations()[i].getUserInformation().toString());
            }

            out.println("----- # of Attribute Types :" + schematypesys.attributeTypes().length);
            Assert.assertNotNull("Invalid Attribute Types Collection returned in STS " + schematypesys.attributeTypes());

            for (int i = 0; i < schematypesys.attributeTypes().length; i++)
            {
                out.println("\t------> Attr Type Name :" + schematypesys.attributeTypes()[i].getName());
                out.println("\t------> Attr STS :" + schematypesys.attributeTypes()[i].getTypeSystem());
            }

            out.println("----- # of Document Types :" + schematypesys.documentTypes().length);
            Assert.assertNotNull("Invalid Document Types Collection returned in STS " + schematypesys.documentTypes());
            for (int i = 0; i < schematypesys.documentTypes().length; i++)
            {
                out.println("\t------> Doc Type Name :" + schematypesys.documentTypes()[i].getName());
                out.println("\t------> Doc Type STS  :" + schematypesys.documentTypes()[i].getTypeSystem());
            }

            // walk through the Schema Types of this STS in detail
            out.println("\t=======================================================");
            out.println("\tWalking thro Global Schema TYpes for STS : " + schematypesys.getName());
            out.println("\t=======================================================");
            SchemaType[] schematypes = schematypesys.globalTypes();
            for (int i = 0; i < schematypes.length; i++)
            {
                SchemaType schema = schematypes[i];

                out.println("\n\t Schema Type :" + schema.getName());
                out.println("\t=======================================================");

                out.println("\t----Acessing New Schema Type ......");
                if (schema.isCompiled())
                {
                    out.println("\t----This Schema has been successfully compiled");
                }
                else
                {
                    out.println("\t----This Schema has NOT compiled successfully yet");
                }

                out.println("\t----Content Type: " + schema.getContentType());
                out.println("\t----Name: " + schema.getName());
                out.println("\t----Doc Elem Name : " + schema.getDocumentElementName());
                out.println("\t----Annotation (class) : " + schema.getAnnotation());
                out.println("\t----Java Name : " + schema.getFullJavaName());
                out.println("\t----Java Imp Name : " + schema.getFullJavaImplName());
                out.println("\t----Java Class Name : " + schema.getJavaClass());
                out.println("\t----XSD src File Name : " + schema.getSourceName());


                // get Elements and Attributes
                out.println("\t Elements & Attributes for Schema Type :" + schema.getName());
                out.println("\t=======================================================");
                SchemaProperty[] spropsArr = schema.getProperties();
                for (int j = 0; j < spropsArr.length; j++)
                {
                    SchemaProperty schemaProperty = spropsArr[j];
                    out.println("\t:::-> Each prop name : " + schemaProperty.getName());
                }
                out.println("\t=======================================================");

                // other api's to look for
                SchemaProperty[] sderviedpropArr = schema.getDerivedProperties();
                for (int j = 0; j < sderviedpropArr.length; j++)
                {
                    SchemaProperty schemaProperty = sderviedpropArr[j];
                    out.println("\t+++-> Each derived prop name : " + schemaProperty.getName());
                }

                // TODO anonymus types
                //schema.getAnonymousTypes();

            }
            out.println("-------------------------------------------------------");

            out.println("Output for SchemaTypeSystem " + schematypesys.getName());
            out.close();

        } // end of try
        catch (IOException ioe)
        {
            System.out.println(ioe.getMessage());
            ioe.printStackTrace();
        }


    }

