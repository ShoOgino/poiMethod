    public void testDeleteAttributeAndElements() throws Exception
    {
        System.out.println("Inside test case testDeleteAttributeAndElements()");

        // Step 1 : create a Schema Type System with the base 'good' xsd and create the Schema Type System (STS) for it
        String sBaseSourceName = "testsourcename";
        SchemaTypeSystem baseSTS = createNewSTS("elemattr_added.xsd_",
                null,
                "BaseSchemaTS",
                sBaseSourceName);

        Assert.assertNotNull("Schema Type System created is Null.", baseSTS);

        // the tests - Walk thro the SOM, save, validate against an xml instance
        inspectSOM(baseSTS, 3, 2, 1, 0);

        // validate successful save
        Assert.assertTrue("Valid SOM " + baseSTS.getName() + "Save failed ",
                checkPSOMSave(baseSTS));

        // validate against instance successfully
        Assert.assertTrue("Validation against instance Failed ",
                validateInstance(getTestCaseFile("instance_elemattr_valid.xml"), baseSTS));

        // Step 2: create a Schema Type System with the new xsd file that has deletions
        SchemaTypeSystem modifiedSTS = createNewSTS("elemattr.xsd_",
                baseSTS,
                "ModifiedSchemaTS",
                sBaseSourceName);

        Assert.assertNotNull("Schema Type System created is Null.", modifiedSTS);

        // test for recoverable errors
        Assert.assertTrue("No Recovered Errors for Invalid Schema",
                printRecoveredErrors());

        // test the PSOM created
        inspectSOM(modifiedSTS, 1, 1, 1, 0); // walk thro the PSOM, look for # of elements,attributes,types & attribute groups

        // Test for saving of the PSOM - should not be able to save
        Assert.assertFalse("Invalid PSOM " + modifiedSTS.getName() + " Save successful - Should fail",
                checkPSOMSave(modifiedSTS));

        // verify types
        Assert.assertFalse("Attribute found but not expected - 'testAttributeComplex'",
                lookForAttributeInSTS(modifiedSTS, "testAttributeComplex"));
        Assert.assertFalse("Element found but not expected 'ComplexTypeElem'",
                lookForElemInSTS(modifiedSTS, "ComplexTypeElem"));
        Assert.assertFalse("Element found but not expected  'SimpleTypeElem'",
                lookForElemInSTS(modifiedSTS, "SimpleTypeElem"));

        // validate against an xml instance - should fail
        Assert.assertFalse("Validation against success - should Fail ",
                validateInstance(getTestCaseFile("instance_elemattr_valid.xml"), modifiedSTS));

        // Step 3: now creat the Schema Type System with the original XSD again
        SchemaTypeSystem finalSTS = createNewSTS("elemattr_added.xsd_",
                modifiedSTS,
                "FinalSchemaTS",
                sBaseSourceName);

        Assert.assertNotNull("Schema Type System created is Null.", finalSTS);

        // walk the SOM
        inspectSOM(finalSTS, 3, 2, 1, 0);

        // should be able to save as its a valid SOM
        Assert.assertTrue("Partial SOM " + finalSTS.getName() + "Save failed for complete SOM",
                checkPSOMSave(finalSTS));

        // validate against instance
        Assert.assertTrue("Validation against instance Failed ",
                validateInstance(getTestCaseFile("instance_elemattr_valid.xml"), finalSTS));

        // compare this to the original schema here
        Assert.assertTrue(compareSavedSOMs("BaseSchemaTS","FinalSchemaTS"));

    }

