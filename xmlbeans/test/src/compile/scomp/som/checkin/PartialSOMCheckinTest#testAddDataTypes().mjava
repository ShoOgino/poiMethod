    public void testAddDataTypes() throws Exception
    {
        System.out.println("Inside test case testAddDataTypes()");
        // Step 1 : create a PSOM from an incomplete/invalid xsd (datatypes.xsd) with unresolved references to various types
        String sBaseSourceName = "testsourcename";
        SchemaTypeSystem baseSTS = createNewSTS("datatypes.xsd_",
                null,
                "BaseSchemaTS",
                sBaseSourceName);

        Assert.assertNotNull("Schema Type System created is Null.", baseSTS);

        // recovearble errors should exist
        Assert.assertTrue("No Recovered Errors for Invalid Schema",
                printRecoveredErrors());

        // Walk thro the SOM (pass #Elems, #Attr, #Types, #AttrGroups)
        inspectSOM(baseSTS, 12, 1, 4, 1);

        // Test for saving of the PSOM - should not be able to save
        Assert.assertFalse("Partial SOM " + baseSTS.getName() + "Save successful - should fail!",
                checkPSOMSave(baseSTS));

        // instance validation - should fail
        Assert.assertFalse("Validation against instance Success - should fail ",
                validateInstance(getTestCaseFile("instance_datatypes_valid.xml"), baseSTS));

        // additional validation - check to see if the unresolved references to types are 'anyType'
        // validate unresolved types
        Assert.assertEquals("Unresolved Simple Type should be 'anyType'",
                anyType,
                getElementType(baseSTS, "testAtomicTypeElem"));
        Assert.assertEquals("Unresolved Simple Type should be 'anyType'",
                anyType,
                getElementType(baseSTS, "testUnionTypeElem"));

        // moved to detailed PSOMDetailedTest class
        //Assert.assertEquals("Unresolved List Type should be 'anySimpleType'", anySimpleType, getElementType(baseSTS, "testListTypeElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(baseSTS, "testComplexTypeSimpleContentElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(baseSTS, "testComplexTypeElementOnlyContentElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(baseSTS, "testComplexTypeMixedElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(baseSTS, "testComplexTypeEmptyElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(baseSTS, "testChoiceGroupElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(baseSTS, "testAllGroupElem"));

        // Step 2 : create an incremental PSOM that is valid by loading datatypes_added.xsd
        SchemaTypeSystem modifiedSTS = createNewSTS("datatypes_added.xsd_", baseSTS, "ModifiedSchemaTS", sBaseSourceName);
        Assert.assertNotNull("Schema Type System created is Null.", modifiedSTS);

        // no errors expected to be recovered - should be a valid SOM
        Assert.assertFalse("Valid Schema Type System, Errors recovered",
                printRecoveredErrors());

        // test the PSOM created : walk thro the PSOM, look for # of elements,attributes,types & attribute groups
        inspectSOM(modifiedSTS, 13, 1, 15, 1);

        // test successful save
        Assert.assertTrue("Valid SOM " + modifiedSTS.getName() + " Save failed",
                checkPSOMSave(modifiedSTS));

        // validate against an xml valid instance - should succeed
        Assert.assertTrue("Validation against instance Failed ",
                validateInstance(getTestCaseFile("instance_datatypes_valid.xml"), modifiedSTS));

        // validate against an xml invalid instance - should fail
        Assert.assertFalse("Validation against instance Failed ",
                validateInstance(getTestCaseFile("instance_simple_types_invalid.xml"), modifiedSTS));

        // additional validation - check to see if all types are resolved to their respective types
        Assert.assertEquals("Unresolved Simple Type should be 'attachmentTypes'",
                "attachmentTypes",
                getElementType(modifiedSTS, "testAtomicTypeElem"));
        Assert.assertEquals("Unresolved Simple Type should be 'union.attachmentUnionType'",
                "union.attachmentUnionType",
                getElementType(modifiedSTS, "testUnionTypeElem"));
        Assert.assertEquals("Unresolved List Type should be 'attchmentExtensionListTypes'",
                "attchmentExtensionListTypes",
                getElementType(modifiedSTS, "testListTypeElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'headerType'",
                "headerType",
                getElementType(modifiedSTS, "testComplexTypeSimpleContentElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'mailsType'",
                "mailsType",
                getElementType(modifiedSTS, "testComplexTypeElementOnlyContentElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'mixedContentType'",
                "mixedContentType",
                getElementType(modifiedSTS, "testComplexTypeMixedElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'emptyContentType'",
                "emptyContentType",
                getElementType(modifiedSTS, "testComplexTypeEmptyElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'choiceGroupType'",
                "choiceGroupType",
                getElementType(modifiedSTS, "testChoiceGroupElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'allGroupType'",
                "allGroupType",
                getElementType(modifiedSTS, "testAllGroupElem"));


        // Step 3 : create an incremental STS with the file in step 1
        SchemaTypeSystem finalSTS = createNewSTS("datatypes.xsd_",
                modifiedSTS,
                "FinalSchemaTS",
                sBaseSourceName);

        Assert.assertNotNull("Schema Type System created is Null.", finalSTS);

        // test the PSOM created : walk thro the PSOM, look for # of elements,attributes,types & attribute groups
        inspectSOM(finalSTS, 12, 1, 4, 1);

        // test save failure
        Assert.assertFalse("Partial SOM " + finalSTS.getName() + "Save Success ",
                checkPSOMSave(finalSTS));

        // instance validation - should fail
        Assert.assertFalse("Validation against instance Success - should fail ",
                validateInstance(getTestCaseFile("instance_datatypes_valid.xml"), finalSTS));

    }

