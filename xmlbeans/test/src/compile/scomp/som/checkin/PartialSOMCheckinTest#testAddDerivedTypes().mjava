    public void testAddDerivedTypes() throws Exception
    {
        System.out.println("Inside test case testAddDerivedTypes()");

        // Step 1: start with invalid SOM - one that has derived types but the base types are not defined
        String sBaseSourceName = "testsourcename";
        SchemaTypeSystem baseSTS = createNewSTS("derived_types.xsd_",
                null,
                "BaseSchemaTS",
                sBaseSourceName);
        Assert.assertNotNull("Schema Type System created is Null.", baseSTS);

        Assert.assertTrue("No Recovered Errors for Invalid PSOM",
                printRecoveredErrors());

        // the tests - Walk thro the valid SOM
        inspectSOM(baseSTS, 13, 0, 9, 0);

        // Recovered Errors, Test for saving of the SOM
        Assert.assertFalse("SOM " + baseSTS.getName() + "Save Success - should fail!",
                checkPSOMSave(baseSTS));

        // instance validation - should fail
        Assert.assertFalse("Validation against instance failed",
                validateInstance(getTestCaseFile("instance_derived_types_valid.xml"), baseSTS));

        // check types - base should be 'anyType'
        Assert.assertEquals("Elem Type  should be 'anyType' (base)",
                anyType,
                getElementType(baseSTS, "ExtensionBaseTypeElem"));
        Assert.assertEquals("Elem Type  should be 'ExtensionDerivedComplexContentType' (derived)",
                "ExtensionDerivedComplexContentType",
                getElementType(baseSTS, "ExtensionDerivedComplexContentTypeElem"));

        Assert.assertEquals("Elem Type  should be 'anyType' (base)",
                anyType,
                getElementType(baseSTS, "ExtensionBaseMixedContentTypElem"));
        Assert.assertEquals("Elem Type  should be 'ExtensionDerivedComplexContentType' (derived)",
                "ExtensionDerivedMixedContentType",
                getElementType(baseSTS, "ExtensionDerivedMixedContentTypeElem"));

        // Step 2: create valid PSOM now  from xsd with base types defined
        SchemaTypeSystem modifiedSTS = createNewSTS("derived_types_added.xsd_",
                baseSTS,
                "ModifiedSchemaTS",
                sBaseSourceName);
        Assert.assertNotNull("Schema Type System created is Null.", modifiedSTS);

        // there should be NO recovearble errors
        Assert.assertFalse("Recovered Errors for Valid Schema",
                printRecoveredErrors());

        // the tests - Walk thro the valid SOM
        inspectSOM(modifiedSTS, 13, 0, 14, 0);

        // Recovered Errors, Test for saving of the SOM - should go thro
        Assert.assertTrue("SOM " + modifiedSTS.getName() + "Save failed!",
                checkPSOMSave(modifiedSTS));

        // instance validation - should be ok
        Assert.assertTrue("Validation against instance failed",
                validateInstance(getTestCaseFile("instance_derived_types_valid.xml"), modifiedSTS));

        // check types before deletion of base types
        Assert.assertEquals("Elem Type  should be 'ExtensionBaseType' (base)",
                "ExtensionBaseType",
                getElementType(modifiedSTS, "ExtensionBaseTypeElem"));
        Assert.assertEquals("Elem Type  should be 'ExtensionDerivedComplexContentType' (derived)",
                "ExtensionDerivedComplexContentType",
                getElementType(modifiedSTS, "ExtensionDerivedComplexContentTypeElem"));
        Assert.assertEquals("Elem Type  should be 'ExtensionBaseMixedContentType' (base)",
                "ExtensionBaseMixedContentType",
                getElementType(modifiedSTS, "ExtensionBaseMixedContentTypElem"));
        Assert.assertEquals("Elem Type  should be 'ExtensionDerivedMixedContentType' (derived)",
                "ExtensionDerivedMixedContentType",
                getElementType(modifiedSTS, "ExtensionDerivedMixedContentTypeElem"));

    }

