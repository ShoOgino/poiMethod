    public void testDeleteDataTypes() throws Exception
    {
        System.out.println("Inside test case testDeleteDataTypes()");

        // Step 1: read a clean XSD file to get a valid SOM
        String sBaseSourceName = "testsourcename";
        SchemaTypeSystem baseSTS = createNewSTS("datatypes_added.xsd_",
                null,
                "BaseSchemaTS",
                sBaseSourceName);

        Assert.assertNotNull("Schema Type System created is Null.", baseSTS);

        // there should be NO recovearble errors
        Assert.assertEquals("Recovered Errors for Valid Schema", false, printRecoveredErrors());

        // the tests - Walk thro the SOM, save, validate against an xml instance
        inspectSOM(baseSTS, 13, 1, 15, 1);

        // Recovered Errors, Test for saving of the PSOM - should go thro
        Assert.assertTrue("SOM " + baseSTS.getName() + "Save failed!",
                checkPSOMSave(baseSTS));

        // instance validation - should be ok
        Assert.assertTrue("Validation against instance failed",
                validateInstance(getTestCaseFile("instance_datatypes_valid.xml"), baseSTS));

        // additional validation - check to see if all types are resolved to their respective types
        Assert.assertEquals("Unresolved Simple Type should be 'attachmentTypes'",
                "attachmentTypes",
                getElementType(baseSTS, "testAtomicTypeElem"));
        Assert.assertEquals("Unresolved Simple Type should be 'union.attachmentUnionType'",
                "union.attachmentUnionType",
                getElementType(baseSTS, "testUnionTypeElem"));
        Assert.assertEquals("Unresolved List Type should be 'attchmentExtensionListTypes'",
                "attchmentExtensionListTypes",
                getElementType(baseSTS, "testListTypeElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'headerType'",
                "headerType",
                getElementType(baseSTS, "testComplexTypeSimpleContentElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'mailsType'",
                "mailsType",
                getElementType(baseSTS, "testComplexTypeElementOnlyContentElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'mixedContentType'",
                "mixedContentType",
                getElementType(baseSTS, "testComplexTypeMixedElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'emptyContentType'",
                "emptyContentType",
                getElementType(baseSTS, "testComplexTypeEmptyElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'choiceGroupType'",
                "choiceGroupType",
                getElementType(baseSTS, "testChoiceGroupElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'allGroupType'",
                "allGroupType",
                getElementType(baseSTS, "testAllGroupElem"));


        //Step 2 : delete/remove types from the schema - should result in STS with unresolved refs
        SchemaTypeSystem modifiedSTS = createNewSTS("datatypes.xsd_",
                baseSTS,
                "ModifiedSchemaTS",
                sBaseSourceName);
        Assert.assertNotNull("Schema Type System created is Null.", modifiedSTS);

        // PSOM - recovered errors are expected
        Assert.assertEquals("Valid Schema Type System, Errors recovered", true, printRecoveredErrors());

        // test the PSOM created : walk thro the PSOM, look for # of elements,attributes,types & attribute groups
        inspectSOM(modifiedSTS, 12, 1, 4, 1);

        // Test for saving of the PSOM - should not be able to save
        Assert.assertFalse("PSOM " + modifiedSTS.getName() + " Save should fail",
                checkPSOMSave(modifiedSTS));

        // validate unresolved types
        Assert.assertEquals("Unresolved Simple Type should be 'anyType'",
                anyType,
                getElementType(modifiedSTS, "testAtomicTypeElem"));
        Assert.assertEquals("Unresolved Simple Type should be 'anyType'",
                anyType,
                getElementType(modifiedSTS, "testUnionTypeElem"));
        // moved to detailed PSOMDetailedTest class
        // Assert.assertEquals("Unresolved List Type should be 'anySimpleType'", anySimpleType, getElementType(modifiedSTS, "testListTypeElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(modifiedSTS, "testComplexTypeSimpleContentElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(modifiedSTS, "testComplexTypeElementOnlyContentElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(modifiedSTS, "testComplexTypeMixedElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(modifiedSTS, "testComplexTypeEmptyElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(modifiedSTS, "testChoiceGroupElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'anyType'",
                anyType,
                getElementType(modifiedSTS, "testAllGroupElem"));

        // validate against an xml valid instance - should fail
        Assert.assertEquals("Validation against instance should Failed ", false, validateInstance(getTestCaseFile("instance_datatypes_valid.xml"), modifiedSTS));

        // Step 3 : reaload the xsd in Step 1
        SchemaTypeSystem finalSTS = createNewSTS("datatypes_added.xsd_",
                modifiedSTS,
                "FinalSchemaTS",
                sBaseSourceName);

        // should be able to save as its a valid SOM
        Assert.assertNotNull("Schema Type System created is Null.", finalSTS);

        // walk the PSOM
        inspectSOM(finalSTS, 13, 1, 15, 1);

        // should be able to save as its a valid SOM
        Assert.assertTrue("SOM " + finalSTS.getName() + "Save failed",
                checkPSOMSave(finalSTS));

        // instance validation - should be fine
        Assert.assertTrue("Validation against instance Failed ",
                validateInstance(getTestCaseFile("instance_datatypes_valid.xml"), finalSTS));

        // compare this to the original schema here
        Assert.assertTrue(compareSavedSOMs("BaseSchemaTS","FinalSchemaTS"));

        // additional validation - check to see if all types are resolved to their respective types
        Assert.assertEquals("Unresolved Simple Type should be 'attachmentTypes'",
                "attachmentTypes",
                getElementType(baseSTS, "testAtomicTypeElem"));
        Assert.assertEquals("Unresolved Simple Type should be 'union.attachmentUnionType'",
                "union.attachmentUnionType",
                getElementType(baseSTS, "testUnionTypeElem"));
        Assert.assertEquals("Unresolved List Type should be 'attchmentExtensionListTypes'",
                "attchmentExtensionListTypes",
                getElementType(baseSTS, "testListTypeElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'headerType'",
                "headerType",
                getElementType(baseSTS, "testComplexTypeSimpleContentElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'mailsType'",
                "mailsType",
                getElementType(baseSTS, "testComplexTypeElementOnlyContentElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'mixedContentType'",
                "mixedContentType",
                getElementType(baseSTS, "testComplexTypeMixedElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'emptyContentType'",
                "emptyContentType",
                getElementType(baseSTS, "testComplexTypeEmptyElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'choiceGroupType'",
                "choiceGroupType",
                getElementType(baseSTS, "testChoiceGroupElem"));
        Assert.assertEquals("Unresolved Complex Type should be 'allGroupType'",
                "allGroupType",
                getElementType(baseSTS, "testAllGroupElem"));

    }

