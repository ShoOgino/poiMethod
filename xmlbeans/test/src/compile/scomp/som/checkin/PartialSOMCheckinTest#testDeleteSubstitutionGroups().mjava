    public void testDeleteSubstitutionGroups() throws Exception
    {
        System.out.println("Inside test case testDeleteSubstitutionGroups()");

        // Step 1: read in a clean XSD groups_added.xsd
        String sBaseSourceName = "testsourcename";
        SchemaTypeSystem baseSTS = createNewSTS("groups_added.xsd_",
                null,
                "BaseSchemaTS",
                sBaseSourceName);
        Assert.assertNotNull("Schema Type System created is Null.", baseSTS);

        // there should be NO recovearble errors
        Assert.assertFalse("Recovered Errors for Valid Schema",
                printRecoveredErrors());

        // the tests - Walk thro the valid SOM
        inspectSOM(baseSTS, 7, 0, 5, 2);

        // Test for saving of the SOM - should go thro
        Assert.assertTrue("SOM " + baseSTS.getName() + "Save failed!",
                checkPSOMSave(baseSTS));

        // instance validation - should be ok
        Assert.assertTrue("Validation against instance failed",
                validateInstance(getTestCaseFile("instance_subst_grps_valid.xml"), baseSTS));

        // verify types - substitution groups
        Assert.assertEquals("Elem Type  should be 'SubGrpHeadElemType' (base)",
                "SubGrpHeadElemType",
                getElementType(baseSTS, "SubGrpHeadElem"));
        Assert.assertEquals("Elem Type  should be 'SubGrpHeadElemType' (derived)",
                "SubGrpHeadElemType",
                getElementType(baseSTS, "SubGrpMemberElem1"));
        Assert.assertEquals("Elem Type  should be 'ExtensionSubGrpHeadElemType' (base)",
                "ExtensionSubGrpHeadElemType",
                getElementType(baseSTS, "SubGrpMemberElem2"));

        // named model groups
        //Assert.assertEquals("Elem Type  should be 'ModelGrpType'", "ModelGrpType", getElementType(baseSTS, "ModelGrpTypeElem"));
        //Assert.assertEquals("Elem Type  should be 'AttributeGroup'", "AttributeGroup", getAttributeGroup(baseSTS,"AttributeGroup"));

        // step2: load an invalid PSOM by deleting the Subst Grp head elem definition
        SchemaTypeSystem modifiedSTS = createNewSTS("groups.xsd_",
                baseSTS,
                "ModifiedSchemaTS",
                sBaseSourceName);
        Assert.assertNotNull("Schema Type System created is Null.", modifiedSTS);

        Assert.assertTrue("Recovered Errors for Valid Schema",
                printRecoveredErrors());

        // Recovered Errors, Test for saving of the SOM
        Assert.assertFalse("SOM " + modifiedSTS.getName() + "Save Success - should fail!",
                checkPSOMSave(modifiedSTS));

        // the tests - Walk thro the valid SOM
        inspectSOM(modifiedSTS, 7, 0, 4, 1);

        // instance validation - should fail
        Assert.assertFalse("Validation against instance failed",
                validateInstance(getTestCaseFile("instance_subst_grps_valid.xml"), modifiedSTS));

        // verify types
        Assert.assertEquals("Elem Type  should be 'anyType'",
                anyType,
                getElementType(modifiedSTS, "SubGrpHeadElem"));
        Assert.assertEquals("Elem Type  should be 'anyType' (Member of Sub. Group)",
                anyType,
                getElementType(modifiedSTS, "SubGrpMemberElem1"));
        Assert.assertEquals("Elem Type  should be 'ExtensionSubGrpHeadElemType' (base)",
                "ExtensionSubGrpHeadElemType",
                getElementType(modifiedSTS, "SubGrpMemberElem2"));

        // named model groups
        Assert.assertEquals("Elem Type  should be 'ModelGrpType'",
                "ModelGrpType",
                getElementType(modifiedSTS, "ModelGrpTypeElem"));
        Assert.assertTrue("Elem Type  should be 'AttributeGroup'",
                getAttributeGroup(modifiedSTS, "AttributeGroup"));

        // step 3: create a PSOM with the original xsd
        SchemaTypeSystem finalSTS = createNewSTS("groups_added.xsd_",
                modifiedSTS,
                "FinalSchemaTS",
                sBaseSourceName);
        Assert.assertNotNull("Schema Type System created is Null.", finalSTS);

        // Test for saving of the SOM - should go thro
        Assert.assertEquals("SOM " + finalSTS.getName() + "Save failed!",
                true,
                checkPSOMSave(finalSTS));

        // instance validation - should be ok
        Assert.assertTrue("Validation against instance failed",
                validateInstance(getTestCaseFile("instance_subst_grps_valid.xml"), finalSTS));

        // verify types
        Assert.assertEquals("Elem Type  should be 'SubGrpHeadElemType' (base)",
                "SubGrpHeadElemType",
                getElementType(finalSTS, "SubGrpHeadElem"));
        Assert.assertEquals("Elem Type  should be 'SubGrpHeadElemType' (derived)",
                "SubGrpHeadElemType",
                getElementType(finalSTS, "SubGrpMemberElem1"));
        Assert.assertEquals("Elem Type  should be 'ExtensionSubGrpHeadElemType' (base)",
                "ExtensionSubGrpHeadElemType",
                getElementType(finalSTS, "SubGrpMemberElem2"));

        // named model groups
        //Assert.assertEquals("Elem Type  should be 'ModelGrpType'", "ModelGrpType", getElementType(baseSTS, "ModelGrpTypeElem"));
        //Assert.assertEquals("Elem Type  should be 'AttributeGroup'", "AttributeGroup", getAttributeGroup(baseSTS,"AttributeGroup"));

        // compare this to the original schema here
        Assert.assertTrue(compareSavedSOMs("BaseSchemaTS","FinalSchemaTS"));
    }

