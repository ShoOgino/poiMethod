    public void testModifyDerivedTypes() throws Exception
    {
        System.out.println("Inside test case testModifyDerivedTypes()");

        // Step 1: read in a clean XSD derived_types_added.xsd
        String sBaseSourceName = "testsourcename";
        SchemaTypeSystem baseSTS = createNewSTS("derived_types_added.xsd_",
                null,
                "BaseSchemaTS",
                sBaseSourceName);
        Assert.assertNotNull("Schema Type System created is Null.", baseSTS);

        // there should be NO recovearble errors
        Assert.assertFalse("Recovered Errors for Valid Schema",
                printRecoveredErrors());

        // the tests - Walk thro the valid SOM
        inspectSOM(baseSTS, 13, 0, 14, 0);

        // Recovered Errors, Test for saving of the SOM - should go thro
        Assert.assertTrue("Valid SOM " + baseSTS.getName() + "Save failed!",
                checkPSOMSave(baseSTS));

        // instance validation - should be ok
        Assert.assertTrue("Validation against instance failed",
                validateInstance(getTestCaseFile("instance_derived_types_valid.xml"), baseSTS));

        // check types before deletion of base types
        Assert.assertEquals("Elem Type  should be 'ExtensionBaseType' (base)",
                "ExtensionBaseType",
                getElementType(baseSTS, "ExtensionBaseTypeElem"));
        Assert.assertEquals("Elem Type  should be 'ExtensionDerivedComplexContentType' (derived)",
                "ExtensionDerivedComplexContentType",
                getElementType(baseSTS, "ExtensionDerivedComplexContentTypeElem"));

        Assert.assertEquals("Elem Type  should be 'ExtensionBaseMixedContentType' (base)",
                "ExtensionBaseMixedContentType",
                getElementType(baseSTS, "ExtensionBaseMixedContentTypElem"));
        Assert.assertEquals("Elem Type  should be 'ExtensionDerivedMixedContentType' (derived)",
                "ExtensionDerivedMixedContentType",
                getElementType(baseSTS, "ExtensionDerivedMixedContentTypeElem"));

        Assert.assertEquals("Elem Type  should be 'RestrictionSimpleContentBaseType'",
                "RestrictionSimpleContentBaseType",
                getElementType(baseSTS, "RestrictionSimpleContentBaseTypeElem"));
        Assert.assertEquals("Elem Type  should be 'RestrictionSimpleContentDerivedType'",
                "RestrictionSimpleContentDerivedType",
                getElementType(baseSTS, "RestrictionSimpleContentDerivedTypeElem"));

        Assert.assertEquals("Elem Type  should be 'RestrictionBaseComplexContentType'",
                "RestrictionBaseComplexContentType",
                getElementType(baseSTS, "RestrictionBaseComplexContentTypeElem"));
        Assert.assertEquals("Elem Type  should be 'RestrictionDerivedComplexContentType'",
                "RestrictionDerivedComplexContentType",
                getElementType(baseSTS, "RestrictionDerivedComplexContentTypeElem"));

        Assert.assertEquals("Elem Type  should be 'RestrictionBaseMixedContentType'",
                "RestrictionBaseMixedContentType",
                getElementType(baseSTS, "RestrictionBaseMixedContentTypeElem"));
        Assert.assertEquals("Elem Type  should be 'RestrictionDerivedMixedContentType'",
                "RestrictionDerivedMixedContentType",
                getElementType(baseSTS, "RestrictionDerivedMixedContentTypeElem"));

        Assert.assertEquals("Elem Type  should be 'RestrictionBaseEmptyContentType'",
                "RestrictionBaseEmptyContentType",
                getElementType(baseSTS, "RestrictionBaseEmptyContentTypeElem"));
        Assert.assertEquals("Elem Type  should be 'RestrictionDerivedEmptyContentType'",
                "RestrictionDerivedEmptyContentType",
                getElementType(baseSTS, "RestrictionDerivedEmptyContentTypeElem"));


        // step 2 : change the base types now : derived_types_modified.xsd
        SchemaTypeSystem modifiedSTS = createNewSTS("derived_types_modifed.xsd_",
                baseSTS,
                "ModifiedSchemaTS",
                sBaseSourceName);
        Assert.assertNotNull("Schema Type System created is Null.", modifiedSTS);

        // no recovearble errors   just added another type
        Assert.assertFalse("valid PSOM",
                printRecoveredErrors());

        // the tests - Walk thro the valid SOM
        //inspectSOM(modifiedSTS, 13, 0, 14, 0);
        inspectSOM(modifiedSTS, 13, 0, 17, 0);

        // instance validation - should fail
        Assert.assertFalse("Validation against instance success - should fail",
                validateInstance(getTestCaseFile("instance_derived_types_valid.xml"), modifiedSTS));

        // now validate instance with new base type - this should go thro
        // TODO resolve     this validation
        //Assert.assertTrue("Validation against instance failed",
        //        validateInstance(getTestCaseFile("instance_derived_types_modify.xml"), modifiedSTS));

    }

