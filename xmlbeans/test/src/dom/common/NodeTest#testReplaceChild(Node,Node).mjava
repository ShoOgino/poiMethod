    /**
     * pathological cases:
     * node is DocFrag
     * node is already in tree
     */
    public void testReplaceChild(Node newChild, Node oldChild) {
        int pos = getChildPos(m_node, oldChild);
        boolean existing = isInTree(m_doc.getDocumentElement(), newChild); //new Child has a parent

        int len = m_node.getChildNodes().getLength();


        if (newChild == null) {
            try {
                m_node.replaceChild(newChild, oldChild);
                fail("Inserting null");
            } catch (IllegalArgumentException e) {
            }
        } else if (pos == -1) {
            try {
                m_node.replaceChild(newChild, oldChild);
                fail("Replacing non-existing node");
            } catch (DOMException de) {
                if (DOMException.NOT_FOUND_ERR != de.code)
                    throw de;
            }
        } else if (existing) {
            Node oldParent = newChild.getParentNode();
            NodeList old = m_node.getChildNodes();
            assertEquals(oldChild, m_node.replaceChild(newChild, oldChild));
            assertFalse(newChild.getParentNode().equals(oldParent));
        } else if (newChild == null) { //is this equivalent to deletion?
            m_node.replaceChild(newChild, oldChild);
            assertEquals(len - 1, m_node.getChildNodes().getLength());
        } else if (newChild.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE) {
            int new_len = newChild.getChildNodes().getLength();
            assertEquals(oldChild, m_node.replaceChild(newChild, oldChild));
            assertEquals(new_len + len - 1, m_node.getChildNodes().getLength());//new+old-one replaced
        } else
            m_node.replaceChild(newChild, oldChild);


    }

