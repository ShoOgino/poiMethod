    /**
     * node is a copy
     * children copies
     */
    public static boolean compareNodesDeep(Node n1, Node n2)
        throws IllegalStateException
    {
        if (n1 == n2 && n1 == null) return true;
        if (n1 == null && n2 != null || n2 == null && n1 != null) return false;
        if (!(n1.getNodeName().equals(n2.getNodeName()) &&
            compareNull(n1.getNamespaceURI(), n2.getNamespaceURI()) &&
            compareNull(n1.getPrefix(), n2.getPrefix()))
        )
            throw new IllegalStateException("Diff QNames " +
                n1.getNamespaceURI() +
                " * " +
                n1.getPrefix() +
                ":" +
                n1.getNodeName() +
                "AND " + n2.getNamespaceURI() + " * " +
                n2.getPrefix() +
                ":" +
                n2.getNodeName());
        else if (!compareNamedNodeMaps(n1.getAttributes(), n2.getAttributes()))
            throw new IllegalStateException("Diff Attrs " +
                n1.getAttributes().getLength() +
                "AND " + n2.getAttributes().getLength());

        else if (n1.hasChildNodes()     //Xerces attr quirk
            && n2.hasChildNodes())
        {
            if (!compareNodeTreeValue(n1.getChildNodes(), n2.getChildNodes()))
                throw new IllegalStateException("Diff Children " +
                    n1.getNodeName() +
                    "AND " + n2.getNodeName());
        }
        else if (n1.hasChildNodes()     //Xerces attr quirk
            ^ n2.hasChildNodes())
            throw new IllegalStateException("One node has Children, other one not ");


        return true;
    }

