    public void testInsertBefore(Node newChild, Node refChild) {

        int newChPos = getChildPos(m_node, newChild);
        int pos = getChildPos(m_node, refChild);
        Node prevParent = null;
        if (newChPos > -1)
            prevParent = newChild.getParentNode();
        NodeList childNodes = m_node.getChildNodes();
        int nOrigChildNum = childNodes.getLength(); //get it now, List is live


        if (newChild == null) {
            try {
                m_node.insertBefore(newChild, refChild);
                fail("Inserting null");
            } catch (IllegalArgumentException e) {
                return;
            }
        }
        Node inserted = m_node.insertBefore(newChild, refChild);


        if (refChild == null)
            assertEquals(inserted, m_node.getLastChild());
        else if (pos == -1)//would have thrown exc
            fail("Inserting after fake child");
        else if (newChild.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE)
            assertEquals(true, compareNodeListPrefix(newChild.getChildNodes(), m_node.getChildNodes()));
        else if (newChPos != -1) //new child is in the tree
        //assert the child is removed first
            assertEquals(false, inserted.getParentNode().equals(prevParent));
        else {
            assertEquals(newChild, childNodes.item(pos));
            assertEquals(nOrigChildNum + 1, m_node.getChildNodes().getLength());
        }

    }

